"""
Django settings for Threat_Track project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/


---------------- Enviroment Variables to set for production ----------------
1. DJANGO_SECRET_KEY = A random key (Optional)
2. DEBUG =  one of the following values -> ['True','False'] default is True
3. DJANGO_ALLOWED_HOSTS = domain name example -> azure.threat-track.com


4. MEDIA_STORAGE_TYPE = one of the following values -> ['LOCAL','S3', 'BLOB'] default is LOCAL
    -> if you choose S3 or BLOB you must set S3_CONFIGURATION or BLOB_CONFIGURATION
4.1 S3_CONFIGURATION = <AWS_ACCESS_KEY_ID>,<AWS_SECRET_ACCESS_KEY>,<AWS_STORAGE_BUCKET_NAME>,<AWS_S3_ENDPOINT_URL>,<AWS_LOCATION (optional)> 
4.2 BLOB_CONFIGURATION = <AZURE_ACCOUNT_NAME>,<AZURE_ACCOUNT_KEY>,<AZURE_CONTAINER>


5. DATABASE_TYPE = one of the following values -> ['SQLITE', 'POSTGRES'] default is SQLITE
    > if you choose POSTGRES you must set DATABASE_CONFIGURATION
5.1 DATABASE_CONFIGURATION = postgresql://<USERNAME>:<PASSWORD>@<HOST>:<PORT>/<DATABASE_NAME>?sslmode=require

"""

from django.core.management.utils import get_random_secret_key
from pathlib import Path
import os, sys, ast, dj_database_url
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', get_random_secret_key())

# Production Settings


DEBUG = ast.literal_eval(os.getenv('DEBUG', 'True'))
DATABASE_TYPE = os.getenv('DATABASE_TYPE', 'SQLITE')
MEDIA_STORAGE_TYPE = os.getenv('MEDIA_STORAGE_TYPE', 'LOCAL')

S3_CONFIGURATION = os.getenv('S3_CONFIGURATION').split(',') if os.getenv('S3_CONFIGURATION') else None
BLOB_CONFIGURATION = os.getenv('BLOB_CONFIGURATION').split(',') if os.getenv('BLOB_CONFIGURATION') else None


# Production Settings are defined below
if DEBUG:
    ALLOWED_HOSTS = ['*']
    SESSION_COOKIE_AGE = 365 * 24 * 60 * 60 # one year
    CSRF_TRUSTED_ORIGINS = ['https://' + str(os.getenv("DJANGO_ALLOWED_HOSTS"))]
else:
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")
    CSRF_TRUSTED_ORIGINS = ['https://' + str(os.getenv("DJANGO_ALLOWED_HOSTS"))]
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_AGE = 8 * 60 * 60  # The session will expire after 8 hours


# Application definition
INSTALLED_APPS = [
    'home',
    'assessments',
    'analytics',
    'activities',
    'components',
    'assessment_structures',
    'users',
    
    'axes',
    'storages',
    "whitenoise.runserver_nostatic",

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # for serving static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'axes.middleware.AxesMiddleware', # for bruteforce prevention
]

ROOT_URLCONF = 'Threat_Track.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'Threat_Track.context_processors.active_side_bar',
                'Threat_Track.context_processors.user_permissions'
            ]
        },
    },
]

WSGI_APPLICATION = 'Threat_Track.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if DATABASE_TYPE == 'SQLITE':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    
elif DATABASE_TYPE == 'POSTGRES' and len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if os.getenv("DATABASE_CONFIGURATION", None) is None:
        raise Exception("DATABASE_CONFIGURATION environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_CONFIGURATION")),
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Cairo'

USE_I18N = True

USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
LOGIN_URL = '/users/login'



# Static files
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATICFILES_STORAGE = ('whitenoise.storage.CompressedManifestStaticFilesStorage')

# Media files
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# --- Axes Settings --- (8 failed logins -> block ip/user 3h )
AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend'
    ]
AXES_FAILURE_LIMIT = 8 
AXES_COOLOFF_TIME = 3
AXES_LOCKOUT_CALLABLE = "users.views.lockout"


# --- Serve Media files via S3 or BLOB storage ---
''' 
The varibale S3_CONFIGURATION/BLOB_CONFIGURATION is retrived from the enviroment variable 
it is orignaly a string and converted into a list using the split(',') 
then passed into the connfiuration below.
'''
if MEDIA_STORAGE_TYPE == 'S3':
    AWS_ACCESS_KEY_ID = S3_CONFIGURATION[0]
    AWS_SECRET_ACCESS_KEY = S3_CONFIGURATION[1]
    AWS_STORAGE_BUCKET_NAME = S3_CONFIGURATION[2]
    AWS_S3_ENDPOINT_URL = S3_CONFIGURATION[3]
        
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_S3_FILE_OVERWRITE = False
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_URL = AWS_S3_ENDPOINT_URL + '/'

elif MEDIA_STORAGE_TYPE == 'BLOB':
    AZURE_ACCOUNT_NAME = BLOB_CONFIGURATION[0]
    AZURE_ACCOUNT_KEY = BLOB_CONFIGURATION[1]
    AZURE_CONTAINER = BLOB_CONFIGURATION[2]
    
    AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'
    AZURE_URL_EXPIRATION_SECS = 28800
    DEFAULT_FILE_STORAGE = 'storages.backends.azure_storage.AzureStorage'
    MEDIA_URL = 'https://' + AZURE_CUSTOM_DOMAIN + '/' + AZURE_CONTAINER + '/'
 