services:
  database:
    image: postgres:15
    container_name: threat_track_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: threat_track
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - threat_track_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Only run when using Docker PostgreSQL (LOCAL database type)
    profiles:
      - LOCAL

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: threat_track_app
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
        required: false
    environment:
      - DEBUG=${DEBUG:-True}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-dev-secret-key-not-for-production}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1,app}
      - DATABASE_TYPE=${DATABASE_TYPE:-LOCAL}
      - DATABASE_CONFIGURATION=${DATABASE_CONFIGURATION:-postgresql://postgres:${DB_PASSWORD:-postgres}@database:5432/threat_track}
      - MEDIA_STORAGE_TYPE=${MEDIA_STORAGE_TYPE:-LOCAL}
      - MEDIA_HOST=${MEDIA_HOST:-localhost}
      - MEDIA_PORT=${MEDIA_PORT:-8080}
      - S3_CONFIGURATION=${S3_CONFIGURATION}
      - BLOB_CONFIGURATION=${BLOB_CONFIGURATION}
    volumes:
      - app_media:/app/media
      - app_static:/app/staticfiles
      - ./certificates:/app/certificates:ro
    ports:
      - "8000:8000"
    networks:
      - threat_track_network
    user: root
    command: ["sh", "-c", "chown -R 101:101 /app/media && su appuser -c 'python manage.py migrate && gunicorn Threat_Track.wsgi:application -b 0.0.0.0:8000'"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  media:
    image: nginx:alpine
    container_name: threat_track_media
    restart: unless-stopped
    volumes:
      - app_media:/usr/share/nginx/html/media:ro
      - app_static:/usr/share/nginx/html/static:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      app:
        condition: service_healthy
        required: false
    networks:
      - threat_track_network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Only run when using local media storage
    profiles:
      - media

volumes:
  postgres_data:
    driver: local
  app_media:
    driver: local
  app_static:
    driver: local

networks:
  threat_track_network:
    driver: bridge
