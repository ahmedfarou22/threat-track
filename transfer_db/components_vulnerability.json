[
{
  "model": "components.vulnerability",
  "pk": 3050,
  "fields": {
    "name": "Sensitive Cookie Without 'HttpOnly' Flag",
    "description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.",
    "tag": "CWE-1004",
    "cvss": 0.0,
    "risk_rating": "",
    "impact": "If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.\nIf the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.",
    "remediation": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.",
    "custom_fields": {}
  }
},
{
  "model": "components.vulnerability",
  "pk": 3051,
  "fields": {
    "name": "Insufficient Visual Distinction of Homoglyphs Presented to User",
    "description": "The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.",
    "tag": "CWE-1007",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3052,
  "fields": {
    "name": "Struts: Duplicate Validation Forms",
    "description": "The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.",
    "tag": "CWE-102",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3053,
  "fields": {
    "name": "Improper Restriction of Rendered UI Layers or Frames",
    "description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.",
    "tag": "CWE-1021",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.",
    "remediation": "This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the \"frame-ancestors\" directive or the \"frame-src\" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3054,
  "fields": {
    "name": "Use of Web Link to Untrusted Target with window.opener Access",
    "description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.",
    "tag": "CWE-1022",
    "cvss": null,
    "risk_rating": "",
    "impact": "The user may be redirected to an untrusted page that contains undesired content or malicious script code.",
    "remediation": "Specify in the design that any linked external document must not be granted access to the location object of the calling page.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3055,
  "fields": {
    "name": "Incomplete Comparison with Missing Factors",
    "description": "The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.",
    "tag": "CWE-1023",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3056,
  "fields": {
    "name": "Comparison of Incompatible Types",
    "description": "The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.",
    "tag": "CWE-1024",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3057,
  "fields": {
    "name": "Comparison Using Wrong Factors",
    "description": "The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.",
    "tag": "CWE-1025",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3058,
  "fields": {
    "name": "Struts: Incomplete validate() Method Definition",
    "description": "The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().",
    "tag": "CWE-103",
    "cvss": null,
    "risk_rating": "",
    "impact": "Disabling the validation framework for a form exposes the product to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection.\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
    "remediation": "Implement the validate() method and call super.validate() within that method.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3059,
  "fields": {
    "name": "Processor Optimization Removal or Modification of Security-critical Code",
    "description": "The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.",
    "tag": "CWE-1037",
    "cvss": null,
    "risk_rating": "",
    "impact": "A successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3060,
  "fields": {
    "name": "Insecure Automated Optimizations",
    "description": "The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.",
    "tag": "CWE-1038",
    "cvss": null,
    "risk_rating": "",
    "impact": "The optimizations alter the order of execution resulting in side effects that were not intended by the original developer.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3061,
  "fields": {
    "name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations",
    "description": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.",
    "tag": "CWE-1039",
    "cvss": null,
    "risk_rating": "",
    "impact": "When the automated recognition is used in a protection mechanism, an attacker may be able to craft inputs that are misinterpreted in a way that grants excess privileges.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3062,
  "fields": {
    "name": "Struts: Form Bean Does Not Extend Validation Class",
    "description": "If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.",
    "tag": "CWE-104",
    "cvss": null,
    "risk_rating": "",
    "impact": "Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection.\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
    "remediation": "Ensure that all forms extend one of the Validation Classes.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3063,
  "fields": {
    "name": "Use of Redundant Code",
    "description": "The product has multiple functions, methods, procedures, macros, etc. that contain the same code.",
    "tag": "CWE-1041",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Merge common functionality into a single function and then call that function from across the entire code base.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3064,
  "fields": {
    "name": "Static Member Data Element outside of a Singleton Class Element",
    "description": "The code contains a member element that is declared as static (but not final), in which\n\t\t\t\t\tits parent class element \n\t\t\t\t\tis not a singleton class - that is, a class element that can be used only once in\n\t\t\t\t\tthe 'to' association of a Create action.",
    "tag": "CWE-1042",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3065,
  "fields": {
    "name": "Data Element Aggregating an Excessively Large Number of Non-Primitive Elements",
    "description": "The product uses a data element that has an excessively large\n\t\t\t\t\tnumber of sub-elements with non-primitive data types such as structures or aggregated objects.",
    "tag": "CWE-1043",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3066,
  "fields": {
    "name": "Architecture with Number of Horizontal Layers Outside of Expected Range",
    "description": "The product's architecture contains too many - or too few -\n\t\t\t\t\thorizontal layers.",
    "tag": "CWE-1044",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3067,
  "fields": {
    "name": "Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor",
    "description": "A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.",
    "tag": "CWE-1045",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3068,
  "fields": {
    "name": "Creation of Immutable Text Using String Concatenation",
    "description": "The product creates an immutable text string using string concatenation operations.",
    "tag": "CWE-1046",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3069,
  "fields": {
    "name": "Modules with Circular Dependencies",
    "description": "The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.",
    "tag": "CWE-1047",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3070,
  "fields": {
    "name": "Invokable Control Element with Large Number of Outward Calls",
    "description": "The code contains callable control elements that\n         contain an excessively large number of references to other\n         application objects external to the context of the callable,\n         i.e. a Fan-Out value that is excessively large.",
    "tag": "CWE-1048",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3071,
  "fields": {
    "name": "Excessive Data Query Operations in a Large Data Table",
    "description": "The product performs a data query with a large number of joins\n\t\t\t\t\tand sub-queries on a large data table.",
    "tag": "CWE-1049",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3072,
  "fields": {
    "name": "Struts: Form Field Without Validator",
    "description": "The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.",
    "tag": "CWE-105",
    "cvss": null,
    "risk_rating": "",
    "impact": "If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.",
    "remediation": "Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3073,
  "fields": {
    "name": "Excessive Platform Resource Consumption within a Loop",
    "description": "The product has a loop body or loop condition that contains a control element that directly or\n\t\t\t\t\tindirectly consumes platform resources, e.g. messaging, sessions, locks, or file\n\t\t\t\t\tdescriptors.",
    "tag": "CWE-1050",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3074,
  "fields": {
    "name": "Initialization with Hard-Coded Network Resource Configuration Data",
    "description": "The product initializes data using hard-coded values that act as network resource identifiers.",
    "tag": "CWE-1051",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3075,
  "fields": {
    "name": "Excessive Use of Hard-Coded Literals in Initialization",
    "description": "The product initializes a data element using a hard-coded literal that is not a simple integer or static constant element.",
    "tag": "CWE-1052",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "None",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3076,
  "fields": {
    "name": "Missing Documentation for Design",
    "description": "The product does not have documentation that represents how it is designed.",
    "tag": "CWE-1053",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3077,
  "fields": {
    "name": "Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer",
    "description": "The code at one architectural layer invokes code that resides\n\t\t\t\t\tat a deeper layer than the adjacent layer, i.e., the invocation skips at least one\n\t\t\t\t\tlayer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.",
    "tag": "CWE-1054",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3078,
  "fields": {
    "name": "Multiple Inheritance from Concrete Classes",
    "description": "The product contains a class with inheritance from more than one concrete class.",
    "tag": "CWE-1055",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3079,
  "fields": {
    "name": "Invokable Control Element with Variadic Parameters",
    "description": "A named-callable or method control element has a signature that\n\t\t\t\t\tsupports a variable (variadic) number of parameters or arguments.",
    "tag": "CWE-1056",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3080,
  "fields": {
    "name": "Data Access Operations Outside of Expected Data Manager Component",
    "description": "The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.",
    "tag": "CWE-1057",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3081,
  "fields": {
    "name": "Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
    "description": "The code contains a function or method that\n\t\t operates in a multi-threaded environment but owns an unsafe non-final\n\t\t                     static storable or member data element.",
    "tag": "CWE-1058",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3082,
  "fields": {
    "name": "Insufficient Technical Documentation",
    "description": "The product does not contain sufficient\n         technical or engineering documentation (whether on paper or\n         in electronic form) that contains descriptions of all the\n         relevant software/hardware elements of the product, such as\n         its usage, structure, architectural components, interfaces, design, implementation,\n         configuration, operation, etc.",
    "tag": "CWE-1059",
    "cvss": null,
    "risk_rating": "",
    "impact": "Without a method of verification, one cannot be sure that everything only functions as expected.",
    "remediation": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3083,
  "fields": {
    "name": "Struts: Plug-in Framework not in Use",
    "description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.",
    "tag": "CWE-106",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use an input validation framework such as Struts.\nUse an input validation framework such as Struts.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3084,
  "fields": {
    "name": "Excessive Number of Inefficient Server-Side Data Accesses",
    "description": "The product performs too many data queries without using efficient data processing functionality such as stored procedures.",
    "tag": "CWE-1060",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3085,
  "fields": {
    "name": "Insufficient Encapsulation",
    "description": "The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.",
    "tag": "CWE-1061",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3086,
  "fields": {
    "name": "Parent Class with References to Child Class",
    "description": "The code has a parent class that contains references to a child class, its methods, or its members.",
    "tag": "CWE-1062",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3087,
  "fields": {
    "name": "Creation of Class Instance within a Static Code Block",
    "description": "A static code block creates an instance of a class.",
    "tag": "CWE-1063",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3088,
  "fields": {
    "name": "Invokable Control Element with Signature Containing an Excessive Number of Parameters",
    "description": "The product contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments.",
    "tag": "CWE-1064",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "None",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3089,
  "fields": {
    "name": "Runtime Resource Management Control Element in a Component Built to Run on Application Servers",
    "description": "The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.",
    "tag": "CWE-1065",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3090,
  "fields": {
    "name": "Missing Serialization Control Element",
    "description": "The product contains a serializable data element that does not\n\t\t\t\t\thave an associated serialization method.",
    "tag": "CWE-1066",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3091,
  "fields": {
    "name": "Excessive Execution of Sequential Searches of Data Resource",
    "description": "The product contains a data query against an SQL table or view\n\t\t\t\t\tthat is configured in a way that does not utilize an index and may cause\n\t\t\t\t\tsequential searches to be performed.",
    "tag": "CWE-1067",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3092,
  "fields": {
    "name": "Inconsistency Between Implementation and Documented Design",
    "description": "The implementation of the product is not consistent with the\n\t\t\t\t\tdesign as described within the relevant documentation.",
    "tag": "CWE-1068",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3093,
  "fields": {
    "name": "Empty Exception Block",
    "description": "An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.",
    "tag": "CWE-1069",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "For every exception block add code that handles the specific exception in the way intended by the application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3094,
  "fields": {
    "name": "Struts: Unused Validation Form",
    "description": "An unused validation form indicates that validation logic is not up-to-date.",
    "tag": "CWE-107",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove the unused Validation Form from the validation.xml file.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3095,
  "fields": {
    "name": "Serializable Data Element Containing non-Serializable Item Elements",
    "description": "The product contains a serializable, storable data element such as a field or member,but the data element contains member elements that are notserializable.",
    "tag": "CWE-1070",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "None",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3096,
  "fields": {
    "name": "Empty Code Block",
    "description": "The source code contains a block that does not contain any code, i.e., the block is empty.",
    "tag": "CWE-1071",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3097,
  "fields": {
    "name": "Data Resource Access without Use of Connection Pooling",
    "description": "The product accesses a data resource through a database without using a connection pooling capability.",
    "tag": "CWE-1072",
    "cvss": 0.0,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3098,
  "fields": {
    "name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
    "description": "The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",
    "tag": "CWE-1073",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3099,
  "fields": {
    "name": "Class with Excessively Deep Inheritance",
    "description": "A class has an inheritance level that is too high, i.e., it\n\t\t\t\t\thas a large number of parent classes.",
    "tag": "CWE-1074",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3100,
  "fields": {
    "name": "Unconditional Control Flow Transfer outside of Switch Block",
    "description": "The product performs unconditional control transfer (such as a\n\t\t\t\t\t\"goto\") in code outside of a branching structure such as a switch\n\t\t\t\t\tblock.",
    "tag": "CWE-1075",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3101,
  "fields": {
    "name": "Insufficient Adherence to Expected Conventions",
    "description": "The product's architecture, source code, design, documentation,\n\t\t\t\t\tor other artifact does not follow required conventions.",
    "tag": "CWE-1076",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3102,
  "fields": {
    "name": "Floating Point Comparison with Incorrect Operator",
    "description": "The code performs a comparison such as an\n        equality test between two float (floating point) values, but\n        it uses comparison operators that do not account for the\n        possibility of loss of precision.",
    "tag": "CWE-1077",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3103,
  "fields": {
    "name": "Inappropriate Source Code Style or Formatting",
    "description": "The source code does not follow\n\t\t\t\tdesired style or formatting for indentation, white\n\t\t\t\tspace, comments, etc.",
    "tag": "CWE-1078",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3104,
  "fields": {
    "name": "Parent Class without Virtual Destructor Method",
    "description": "A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.",
    "tag": "CWE-1079",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3105,
  "fields": {
    "name": "Struts: Unvalidated Action Form",
    "description": "Every Action Form must have a corresponding validation form.",
    "tag": "CWE-108",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3106,
  "fields": {
    "name": "Source Code File with Excessive Number of Lines of Code",
    "description": "A source code file has too many lines of\n\t\t\t\t\tcode.",
    "tag": "CWE-1080",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3107,
  "fields": {
    "name": "Class Instance Self Destruction Control Element",
    "description": "The code contains a class instance that calls the method or function to delete or destroy itself.",
    "tag": "CWE-1082",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3108,
  "fields": {
    "name": "Data Access from Outside Expected Data Manager Component",
    "description": "The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.",
    "tag": "CWE-1083",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3109,
  "fields": {
    "name": "Invokable Control Element with Excessive File or Data Access Operations",
    "description": "A function or method contains too many\n\t\t\t\t\toperations that utilize a data manager or file resource.",
    "tag": "CWE-1084",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3110,
  "fields": {
    "name": "Invokable Control Element with Excessive Volume of Commented-out Code",
    "description": "A function, method, procedure, etc. contains an excessive amount of code that has been\n\t\t\t\t\tcommented out within its body.",
    "tag": "CWE-1085",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3111,
  "fields": {
    "name": "Class with Excessive Number of Child Classes",
    "description": "A class contains an unnecessarily large number of\n\t\t\t\t\tchildren.",
    "tag": "CWE-1086",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3112,
  "fields": {
    "name": "Class with Virtual Method without a Virtual Destructor",
    "description": "A class contains a virtual method, but the method does not have an associated virtual destructor.",
    "tag": "CWE-1087",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3113,
  "fields": {
    "name": "Synchronous Access of Remote Resource without Timeout",
    "description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.",
    "tag": "CWE-1088",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3114,
  "fields": {
    "name": "Large Data Table with Excessive Number of Indices",
    "description": "The product uses a large data table that contains an excessively large number of\n\t\t\t\t\tindices.",
    "tag": "CWE-1089",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3115,
  "fields": {
    "name": "Struts: Validator Turned Off",
    "description": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.",
    "tag": "CWE-109",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that an action form mapping enables validation. Set the validate field to true.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3116,
  "fields": {
    "name": "Method Containing Access of a Member Element from Another Class",
    "description": "A method for a class performs an operation that directly\n\t\t\t\t\taccesses a member element from another class.",
    "tag": "CWE-1090",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3117,
  "fields": {
    "name": "Use of Object without Invoking Destructor Method",
    "description": "The product contains a method that accesses an object but does not later invoke\n\t\t\t\t\tthe element's associated finalize/destructor method.",
    "tag": "CWE-1091",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3118,
  "fields": {
    "name": "Use of Same Invokable Control Element in Multiple Architectural Layers",
    "description": "The product uses the same control element across multiple\n\t\t\t\t\tarchitectural layers.",
    "tag": "CWE-1092",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3119,
  "fields": {
    "name": "Excessively Complex Data Representation",
    "description": "The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.",
    "tag": "CWE-1093",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3120,
  "fields": {
    "name": "Excessive Index Range Scan for a Data Resource",
    "description": "The product contains an index range scan for a large data table,\n\t\t\t\t\tbut the scan can cover a large number of rows.",
    "tag": "CWE-1094",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3121,
  "fields": {
    "name": "Loop Condition Value Update within the Loop",
    "description": "The product uses a loop with a control flow condition based on\n\t\t\t\t\ta value that is updated within the body of the loop.",
    "tag": "CWE-1095",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3122,
  "fields": {
    "name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
    "description": "The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.",
    "tag": "CWE-1096",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3123,
  "fields": {
    "name": "Persistent Storable Data Element without Associated Comparison Control Element",
    "description": "The product uses a storable data element that does not have\n\t\t\t\t\tall of the associated functions or methods that are necessary to support\n\t\t\t\t\tcomparison.",
    "tag": "CWE-1097",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3124,
  "fields": {
    "name": "Data Element containing Pointer Item without Proper Copy Control Element",
    "description": "The code contains a data element with a pointer that does not have an associated copy or constructor method.",
    "tag": "CWE-1098",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3125,
  "fields": {
    "name": "Inconsistent Naming Conventions for Identifiers",
    "description": "The product's code, documentation, or other artifacts do not\n\t\t\t\t\tconsistently use the same naming conventions for variables, callables, groups of\n\t\t\t\t\trelated callables, I/O capabilities, data types, file names, or similar types of\n\t\t\t\t\telements.",
    "tag": "CWE-1099",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3126,
  "fields": {
    "name": "ASP.NET Misconfiguration: Creating Debug Binary",
    "description": "Debugging messages help attackers learn about the system and plan a form of attack.",
    "tag": "CWE-11",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application.",
    "remediation": "Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3127,
  "fields": {
    "name": "Struts: Validator Without Form Field",
    "description": "Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.",
    "tag": "CWE-110",
    "cvss": null,
    "risk_rating": "",
    "impact": "It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3128,
  "fields": {
    "name": "Insufficient Isolation of System-Dependent Functions",
    "description": "The product or code does not isolate system-dependent\n\t\t\t\t\tfunctionality into separate standalone modules.",
    "tag": "CWE-1100",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3129,
  "fields": {
    "name": "Reliance on Runtime Component in Generated Code",
    "description": "The product uses automatically-generated code that cannot be\n\t\t\t\t\texecuted without a specific runtime support component.",
    "tag": "CWE-1101",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3130,
  "fields": {
    "name": "Reliance on Machine-Dependent Data Representation",
    "description": "The code uses a data representation that relies on low-level\n\t\t\t\t\tdata representation or constructs that may vary across different processors,\n\t\t\t\t\tphysical machines, OSes, or other physical components.",
    "tag": "CWE-1102",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3131,
  "fields": {
    "name": "Use of Platform-Dependent Third Party Components",
    "description": "The product relies on third-party components that do\n\t\t\t\t\tnot provide equivalent functionality across all desirable\n\t\t\t\t\tplatforms.",
    "tag": "CWE-1103",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3132,
  "fields": {
    "name": "Use of Unmaintained Third Party Components",
    "description": "The product relies on third-party components that are not\n\t\t\t\t\tactively supported or maintained by the original developer or a trusted proxy\n\t\t\t\t\tfor the original developer.",
    "tag": "CWE-1104",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3133,
  "fields": {
    "name": "Insufficient Encapsulation of Machine-Dependent Functionality",
    "description": "The product or code uses machine-dependent functionality, but\n\t\t\t\t\tit does not sufficiently encapsulate or isolate this functionality from\n\t\t\t\t\tthe rest of the code.",
    "tag": "CWE-1105",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3134,
  "fields": {
    "name": "Insufficient Use of Symbolic Constants",
    "description": "The source code uses literal constants that may need to change\n\t\t\t\t\tor evolve over time, instead of using symbolic constants.",
    "tag": "CWE-1106",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3135,
  "fields": {
    "name": "Insufficient Isolation of Symbolic Constant Definitions",
    "description": "The source code uses symbolic constants, but it does not\n\t\t\t\t\tsufficiently place the definitions of these constants into a more centralized or\n\t\t\t\t\tisolated location.",
    "tag": "CWE-1107",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3136,
  "fields": {
    "name": "Excessive Reliance on Global Variables",
    "description": "The code is structured in a way that relies too much on using\n\t\t\t\t\tor setting global variables throughout various points in the code, instead of\n\t\t\t\t\tpreserving the associated information in a narrower, more local\n\t\t\t\t\tcontext.",
    "tag": "CWE-1108",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3137,
  "fields": {
    "name": "Use of Same Variable for Multiple Purposes",
    "description": "The code contains a callable, block, or other code element in\n\t\t\t\t\twhich the same variable is used to control more than one unique task or store\n\t\t\t\t\tmore than one instance of data.",
    "tag": "CWE-1109",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3138,
  "fields": {
    "name": "Direct Use of Unsafe JNI",
    "description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.",
    "tag": "CWE-111",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implement error handling around the JNI call.\nDo not use JNI calls if you don't trust the native library.\nBe reluctant to use JNI calls. A Java API equivalent may exist.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3139,
  "fields": {
    "name": "Incomplete Design Documentation",
    "description": "The product's design documentation does not adequately describe\n\t\t\t\t\tcontrol flow, data flow, system initialization, relationships between tasks,\n\t\t\t\t\tcomponents, rationales, or other important aspects of the\n\t\t\t\t\tdesign.",
    "tag": "CWE-1110",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3140,
  "fields": {
    "name": "Incomplete I/O Documentation",
    "description": "The product's documentation does not adequately define inputs,\n\t\t\t\t\toutputs, or system/software interfaces.",
    "tag": "CWE-1111",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3141,
  "fields": {
    "name": "Incomplete Documentation of Program Execution",
    "description": "The document does not fully define all mechanisms that are used\n\t\t\t\t\tto control or influence how product-specific programs are\n\t\t\t\t\texecuted.",
    "tag": "CWE-1112",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3142,
  "fields": {
    "name": "Inappropriate Comment Style",
    "description": "The source code uses comment styles or formats that are\n\t\t\t\t\tinconsistent or do not follow expected standards for the\n\t\t\t\t\tproduct.",
    "tag": "CWE-1113",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3143,
  "fields": {
    "name": "Inappropriate Whitespace Style",
    "description": "The source code contains whitespace that is inconsistent across\n\t\t\t\t\tthe code or does not follow expected standards for the\n\t\t\t\t\tproduct.",
    "tag": "CWE-1114",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3144,
  "fields": {
    "name": "Source Code Element without Standard Prologue",
    "description": "The source code contains elements such as source files \n\t\t\t\t\tthat do not consistently provide a prologue or header that has been\n\t\t\t\t\tstandardized for the project.",
    "tag": "CWE-1115",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3145,
  "fields": {
    "name": "Inaccurate Comments",
    "description": "The source code contains comments that do not accurately\n\t\t\t\t\tdescribe or explain aspects of the portion of the code with which the comment is\n\t\t\t\t\tassociated.",
    "tag": "CWE-1116",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Verify that each comment accurately reflects what is intended to happen during execution of the code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3146,
  "fields": {
    "name": "Callable with Insufficient Behavioral Summary",
    "description": "The code contains a function or method whose signature and/or associated\n\t\t\t\t\tinline documentation does not sufficiently describe the callable's inputs, outputs,\n\t\t\t\t\tside effects, assumptions, or return codes.",
    "tag": "CWE-1117",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3147,
  "fields": {
    "name": "Insufficient Documentation of Error Handling Techniques",
    "description": "The documentation does not sufficiently describe the techniques\n\t\t\t\t\tthat are used for error handling, exception processing, or similar\n\t\t\t\t\tmechanisms.",
    "tag": "CWE-1118",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3148,
  "fields": {
    "name": "Excessive Use of Unconditional Branching",
    "description": "The code uses too many unconditional branches (such as\n\t\t\t\t\t\"goto\").",
    "tag": "CWE-1119",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3149,
  "fields": {
    "name": "Missing XML Validation",
    "description": "The product accepts XML from an untrusted source but does not validate the XML against the proper schema.",
    "tag": "CWE-112",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3150,
  "fields": {
    "name": "Excessive Code Complexity",
    "description": "The code is too complex, as calculated using a well-defined,\n\t\t\t\t\tquantitative measure.",
    "tag": "CWE-1120",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3151,
  "fields": {
    "name": "Excessive McCabe Cyclomatic Complexity",
    "description": "The code contains McCabe cyclomatic complexity that exceeds a\n\tdesirable maximum.",
    "tag": "CWE-1121",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3152,
  "fields": {
    "name": "Excessive Halstead Complexity",
    "description": "The code is structured in a way that a Halstead complexity\n\t\t\t\t\tmeasure exceeds a desirable maximum.",
    "tag": "CWE-1122",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3153,
  "fields": {
    "name": "Excessive Use of Self-Modifying Code",
    "description": "The product uses too much self-modifying\n\t\t\t\t\tcode.",
    "tag": "CWE-1123",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3154,
  "fields": {
    "name": "Excessively Deep Nesting",
    "description": "The code contains a callable or other code grouping in which\n\t\t\t\t\tthe nesting / branching is too deep.",
    "tag": "CWE-1124",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3155,
  "fields": {
    "name": "Excessive Attack Surface",
    "description": "The product has an attack surface whose quantitative\n\t\t\t\t\tmeasurement exceeds a desirable maximum.",
    "tag": "CWE-1125",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3156,
  "fields": {
    "name": "Declaration of Variable with Unnecessarily Wide Scope",
    "description": "The source code declares a variable in one scope, but the\n\t\t\t\t\tvariable is only used within a narrower scope.",
    "tag": "CWE-1126",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3157,
  "fields": {
    "name": "Compilation with Insufficient Warnings or Errors",
    "description": "The code is compiled without sufficient warnings enabled, which\n\t\t\t\t\tmay prevent the detection of subtle bugs or quality\n\t\t\t\t\tissues.",
    "tag": "CWE-1127",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3158,
  "fields": {
    "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')",
    "description": "The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.",
    "tag": "CWE-113",
    "cvss": null,
    "risk_rating": "",
    "impact": "CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the message that the application intends to send/receive, as well as allowing them to create additional messages entirely under their control.",
    "remediation": "Construct HTTP headers very carefully, avoiding the use of non-validated input data.\n\n                  \nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3159,
  "fields": {
    "name": "Process Control",
    "description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.",
    "tag": "CWE-114",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3160,
  "fields": {
    "name": "Misinterpretation of Input",
    "description": "The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.",
    "tag": "CWE-115",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3161,
  "fields": {
    "name": "Improper Encoding or Escaping of Output",
    "description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.",
    "tag": "CWE-116",
    "cvss": null,
    "risk_rating": "",
    "impact": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.\nThe communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.\nThe communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted.",
    "remediation": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.\nIn some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input.\nUse input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20).\nFully specify which encodings are required by components that will be communicating with each other.\nWhen exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3162,
  "fields": {
    "name": "Irrelevant Code",
    "description": "The product contains code that is not essential for execution,\n\t     i.e. makes no state changes and has no side effects that alter\n\t     data or control flow, such that removal of the code would have no impact\n\t     to functionality or correctness.",
    "tag": "CWE-1164",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3163,
  "fields": {
    "name": "Improper Output Neutralization for Logs",
    "description": "The product does not neutralize or incorrectly neutralizes output that is written to logs.",
    "tag": "CWE-117",
    "cvss": null,
    "risk_rating": "",
    "impact": "Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility.",
    "remediation": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3164,
  "fields": {
    "name": "Improper Use of Validation Framework",
    "description": "The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.",
    "tag": "CWE-1173",
    "cvss": null,
    "risk_rating": "",
    "impact": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
    "remediation": "Properly use provided input validation frameworks.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3165,
  "fields": {
    "name": "ASP.NET Misconfiguration: Improper Model Validation",
    "description": "The ASP.NET application does not use, or incorrectly uses, the model validation framework.",
    "tag": "CWE-1174",
    "cvss": null,
    "risk_rating": "",
    "impact": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3166,
  "fields": {
    "name": "Inefficient CPU Computation",
    "description": "The product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.",
    "tag": "CWE-1176",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3167,
  "fields": {
    "name": "Use of Prohibited Code",
    "description": "The product uses a function, library, or third party component\n\t     that has been explicitly prohibited, whether by the developer or\n\t     the customer.",
    "tag": "CWE-1177",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3168,
  "fields": {
    "name": "Incorrect Access of Indexable Resource ('Range Error')",
    "description": "The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.",
    "tag": "CWE-118",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3169,
  "fields": {
    "name": "DEPRECATED: Use of Uninitialized Resource",
    "description": "This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.",
    "tag": "CWE-1187",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3170,
  "fields": {
    "name": "Insecure Default Initialization of Resource",
    "description": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.",
    "tag": "CWE-1188",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3171,
  "fields": {
    "name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
    "description": "The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.",
    "tag": "CWE-1189",
    "cvss": null,
    "risk_rating": "",
    "impact": "If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user.\nThe functionality of the shared resource may be intentionally degraded.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3172,
  "fields": {
    "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
    "description": "The product performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",
    "tag": "CWE-119",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nIn the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",
    "remediation": "Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].\nReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3173,
  "fields": {
    "name": "DMA Device Enabled Too Early in Boot Phase",
    "description": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.",
    "tag": "CWE-1190",
    "cvss": null,
    "risk_rating": "",
    "impact": "DMA devices have direct write access to main memory and\n                 due to time of attack will be able to bypass OS or Bootloader\n                 access control.",
    "remediation": "Utilize an IOMMU to orchestrate IO access from\n                 the start of the boot process.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3174,
  "fields": {
    "name": "On-Chip Debug and Test Interface With Improper Access Control",
    "description": "The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.",
    "tag": "CWE-1191",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3175,
  "fields": {
    "name": "System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers",
    "description": "The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.",
    "tag": "CWE-1192",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3176,
  "fields": {
    "name": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
    "description": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.",
    "tag": "CWE-1193",
    "cvss": null,
    "risk_rating": "",
    "impact": "An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3177,
  "fields": {
    "name": "ASP.NET Misconfiguration: Missing Custom Error Page",
    "description": "An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.",
    "tag": "CWE-12",
    "cvss": null,
    "risk_rating": "",
    "impact": "Default error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.",
    "remediation": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page.\nDo not attempt to process an error or attempt to mask it.\nVerify return values are correct and do not supply sensitive information about the system.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3178,
  "fields": {
    "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
    "description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
    "tag": "CWE-120",
    "cvss": null,
    "risk_rating": "",
    "impact": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of the product's implicit security policy. This can often be used to subvert any other security service.\nBuffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the product into an infinite loop.",
    "remediation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\r\n\r\nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].\r\nMost mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.\r\nReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.\r\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\r\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3179,
  "fields": {
    "name": "Generation of Weak Initialization Vector (IV)",
    "description": "The product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t",
    "tag": "CWE-1204",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179].",
    "remediation": "None",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3180,
  "fields": {
    "name": "Failure to Disable Reserved Bits",
    "description": "The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.",
    "tag": "CWE-1209",
    "cvss": null,
    "risk_rating": "",
    "impact": "This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3181,
  "fields": {
    "name": "Stack-based Buffer Overflow",
    "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).",
    "tag": "CWE-121",
    "cvss": null,
    "risk_rating": "",
    "impact": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
    "remediation": "Use an abstraction library to abstract away risky APIs. Not a complete solution.\nCompiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.\nImplement and perform bounds checking on input.\nDo not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors.\nUse OS-level preventative functionality, such as ASLR. This is not a complete solution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3182,
  "fields": {
    "name": "Heap-based Buffer Overflow",
    "description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().",
    "tag": "CWE-122",
    "cvss": null,
    "risk_rating": "",
    "impact": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
    "remediation": "Pre-design: Use a language or compiler that performs automatic bounds checking.\nUse an abstraction library to abstract away risky APIs. Not a complete solution.\nPre-design through Build: Canary style bounds checking, library changes which ensure the validity of chunk data, and other such fixes are possible, but should not be relied upon.\nImplement and perform bounds checking on input.\nDo not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary.\nUse OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3183,
  "fields": {
    "name": "Insufficient Granularity of Access Control",
    "description": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.",
    "tag": "CWE-1220",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3184,
  "fields": {
    "name": "Incorrect Register Defaults or Module Parameters",
    "description": "Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values.",
    "tag": "CWE-1221",
    "cvss": null,
    "risk_rating": "",
    "impact": "Degradation of system functionality, or loss of access control enforcement can occur.",
    "remediation": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings.\nThe default values of these security sensitive settings need to be defined as part of the design review phase.\nTesting phase should use automated tools to test that values are configured per design specifications.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3185,
  "fields": {
    "name": "Insufficient Granularity of Address Regions Protected by Register Locks",
    "description": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.",
    "tag": "CWE-1222",
    "cvss": null,
    "risk_rating": "",
    "impact": "System security configuration cannot be defined in a way that does not conflict with functional requirements of device.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3186,
  "fields": {
    "name": "Race Condition for Write-Once Attributes",
    "description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.",
    "tag": "CWE-1223",
    "cvss": null,
    "risk_rating": "",
    "impact": "System configuration cannot be programmed in a secure way.",
    "remediation": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.\nThe testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3187,
  "fields": {
    "name": "Improper Restriction of Write-Once Bit Fields",
    "description": "The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.",
    "tag": "CWE-1224",
    "cvss": null,
    "risk_rating": "",
    "impact": "System configuration cannot be programmed in a secure way.",
    "remediation": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration.\nThe testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3188,
  "fields": {
    "name": "Creation of Emergent Resource",
    "description": "The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.",
    "tag": "CWE-1229",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3189,
  "fields": {
    "name": "Write-what-where Condition",
    "description": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.",
    "tag": "CWE-123",
    "cvss": null,
    "risk_rating": "",
    "impact": "Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.\nMany memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
    "remediation": "Use a language that provides appropriate memory abstractions.\nUse OS-level preventative functionality integrated after the fact. Not a complete solution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3190,
  "fields": {
    "name": "Exposure of Sensitive Information Through Metadata",
    "description": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.",
    "tag": "CWE-1230",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3191,
  "fields": {
    "name": "Improper Prevention of Lock Bit Modification",
    "description": "The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.",
    "tag": "CWE-1231",
    "cvss": null,
    "risk_rating": "",
    "impact": "Registers protected by lock bit can be modified even when lock is set.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3192,
  "fields": {
    "name": "Improper Lock Behavior After Power State Transition",
    "description": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.",
    "tag": "CWE-1232",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3193,
  "fields": {
    "name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection",
    "description": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.",
    "tag": "CWE-1233",
    "cvss": null,
    "risk_rating": "",
    "impact": "System Configuration protected by the lock bit can be modified even when the lock is set.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3194,
  "fields": {
    "name": "Hardware Internal or Debug Modes Allow Override of Locks",
    "description": "System configuration protection may be bypassed during debug mode.",
    "tag": "CWE-1234",
    "cvss": null,
    "risk_rating": "",
    "impact": "Bypass of lock bit allows access and modification of system configuration even when the lock bit is set.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3195,
  "fields": {
    "name": "Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
    "description": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.",
    "tag": "CWE-1235",
    "cvss": null,
    "risk_rating": "",
    "impact": "Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues.",
    "remediation": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters.  Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3196,
  "fields": {
    "name": "Improper Neutralization of Formula Elements in a CSV File",
    "description": "The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.",
    "tag": "CWE-1236",
    "cvss": null,
    "risk_rating": "",
    "impact": "Current versions of Excel warn users of untrusted content.",
    "remediation": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV.  Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).\nIf a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.\nCertain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3197,
  "fields": {
    "name": "Improper Zeroization of Hardware Register",
    "description": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.",
    "tag": "CWE-1239",
    "cvss": null,
    "risk_rating": "",
    "impact": "The consequences will depend on the information disclosed due to the vulnerability.",
    "remediation": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3198,
  "fields": {
    "name": "Buffer Underwrite ('Buffer Underflow')",
    "description": "The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
    "tag": "CWE-124",
    "cvss": null,
    "risk_rating": "",
    "impact": "Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.\nIf the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
    "remediation": "Choose a language that is not susceptible to these issues.\nAll calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3199,
  "fields": {
    "name": "Use of a Cryptographic Primitive with a Risky Implementation",
    "description": "To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.",
    "tag": "CWE-1240",
    "cvss": null,
    "risk_rating": "",
    "impact": "Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case.",
    "remediation": "Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].\n\t\t  \n\n\t\t      Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].\n\t\t  \n\n\t\t      Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.\n\t\t  \n\n\t\t      Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.\n\t\t  \nEnsure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.\n\n\t\t      Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].\n\t\t  \n\n\t\t      Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.\n\t\t  \n\n\t\t      Do not use a checksum as a substitute for a cryptographically generated hash.\n\t\t  \n\n\t\t      Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.\n\t\t  \n\n\t\t      When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.\n\t\t  \n\n\t\t      Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3200,
  "fields": {
    "name": "Use of Predictable Algorithm in Random Number Generator",
    "description": "The device uses an algorithm that is predictable and generates a pseudo-random number.",
    "tag": "CWE-1241",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "A true random number generator should be specified for cryptographic algorithms.\nA true random number generator should be implemented for cryptographic algorithms.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3201,
  "fields": {
    "name": "Inclusion of Undocumented Features or Chicken Bits",
    "description": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.",
    "tag": "CWE-1242",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3202,
  "fields": {
    "name": "Sensitive Non-Volatile Information Not Protected During Debug",
    "description": "Access to security-sensitive information stored in fuses is not limited during debug.",
    "tag": "CWE-1243",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3203,
  "fields": {
    "name": "Internal Asset Exposed to Unsafe Debug Access Level or State",
    "description": "The product uses physical debug or test\n        interfaces with support for multiple access levels, but it\n        assigns the wrong debug access level to an internal asset,\n        providing unintended access to the asset from untrusted debug\n        agents.",
    "tag": "CWE-1244",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Apply blinding [REF-1219] or masking techniques in strategic areas.\nAdd shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3204,
  "fields": {
    "name": "Improper Finite State Machines (FSMs) in Hardware Logic",
    "description": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.",
    "tag": "CWE-1245",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3205,
  "fields": {
    "name": "Improper Write Handling in Limited-write Non-Volatile Memories",
    "description": "The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.",
    "tag": "CWE-1246",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Include secure wear leveling algorithms and ensure they may not be bypassed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3206,
  "fields": {
    "name": "Improper Protection Against Voltage and Clock Glitches",
    "description": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.",
    "tag": "CWE-1247",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3207,
  "fields": {
    "name": "Semiconductor Defects in Hardware Logic with Security-Sensitive Implications",
    "description": "The security-sensitive hardware module contains semiconductor defects.",
    "tag": "CWE-1248",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3208,
  "fields": {
    "name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
    "description": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.",
    "tag": "CWE-1249",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3209,
  "fields": {
    "name": "Out-of-bounds Read",
    "description": "The product reads data past the end, or before the beginning, of the intended buffer.",
    "tag": "CWE-125",
    "cvss": null,
    "risk_rating": "",
    "impact": "By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",
    "remediation": "Use a language that provides appropriate memory abstractions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3210,
  "fields": {
    "name": "Improper Preservation of Consistency Between Independent Representations of Shared State",
    "description": "The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.",
    "tag": "CWE-1250",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3211,
  "fields": {
    "name": "Mirrored Regions with Different Values",
    "description": "The product's architecture mirrors regions without ensuring that their contents always stay in sync.",
    "tag": "CWE-1251",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3212,
  "fields": {
    "name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
    "description": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.",
    "tag": "CWE-1252",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3213,
  "fields": {
    "name": "Incorrect Selection of Fuse Values",
    "description": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.",
    "tag": "CWE-1253",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3214,
  "fields": {
    "name": "Incorrect Comparison Logic Granularity",
    "description": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.",
    "tag": "CWE-1254",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3215,
  "fields": {
    "name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks",
    "description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.",
    "tag": "CWE-1255",
    "cvss": null,
    "risk_rating": "",
    "impact": "As compromising a security token may result in complete system control, the impacts are relatively universal",
    "remediation": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check.\nAnother potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result.\nAn additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator.\nIf the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements.\nDuring integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3216,
  "fields": {
    "name": "Improper Restriction of Software Interfaces to Hardware Features",
    "description": "The product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.",
    "tag": "CWE-1256",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3217,
  "fields": {
    "name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
    "description": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\t\t\t",
    "tag": "CWE-1257",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized.\nThe controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3218,
  "fields": {
    "name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
    "description": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.",
    "tag": "CWE-1258",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3219,
  "fields": {
    "name": "Improper Restriction of Security Token Assignment",
    "description": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.",
    "tag": "CWE-1259",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3220,
  "fields": {
    "name": "Buffer Over-read",
    "description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
    "tag": "CWE-126",
    "cvss": null,
    "risk_rating": "",
    "impact": "By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3221,
  "fields": {
    "name": "Improper Handling of Overlap Between Protected Memory Ranges",
    "description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.",
    "tag": "CWE-1260",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3222,
  "fields": {
    "name": "Improper Handling of Single Event Upsets",
    "description": "The hardware logic does not effectively handle when single-event upsets (SEUs) occur.",
    "tag": "CWE-1261",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3223,
  "fields": {
    "name": "Improper Access Control for Register Interface",
    "description": "The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.",
    "tag": "CWE-1262",
    "cvss": null,
    "risk_rating": "",
    "impact": "Confidentiality of hardware assets may be violated if the protected information can be read out by software through the register interface. Registers storing security state, settings, other security-critical data may be corruptible by software without correctly implemented protections.",
    "remediation": "Design proper policies for hardware register access from software.\nEnsure that access control policies for register access are implemented in accordance with the specified design.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3224,
  "fields": {
    "name": "Improper Physical Access Control",
    "description": "The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.",
    "tag": "CWE-1263",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with.\nThe testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access.\nEnsure that all protection mechanisms are fully activated at the time of manufacturing and distribution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3225,
  "fields": {
    "name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
    "description": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.",
    "tag": "CWE-1264",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3226,
  "fields": {
    "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
    "description": "During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.",
    "tag": "CWE-1265",
    "cvss": null,
    "risk_rating": "",
    "impact": "Exploitation of this weakness can leave the application in an unexpected state and cause variables to be reassigned before the first invocation has completed. This may eventually result in memory corruption or unexpected code execution.",
    "remediation": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.\nMake sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3227,
  "fields": {
    "name": "Improper Scrubbing of Sensitive Data from Decommissioned Device",
    "description": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.",
    "tag": "CWE-1266",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3228,
  "fields": {
    "name": "Policy Uses Obsolete Encoding",
    "description": "The product uses an obsolete encoding mechanism to implement access controls.",
    "tag": "CWE-1267",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3229,
  "fields": {
    "name": "Policy Privileges are not Assigned Consistently Between Control and Data Agents",
    "description": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\n\t\t\t   ",
    "tag": "CWE-1268",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3230,
  "fields": {
    "name": "Product Released in Non-Release Configuration",
    "description": "The product released to market is released in pre-production or manufacturing configuration.",
    "tag": "CWE-1269",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).\nEnsure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).\nEnsure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3231,
  "fields": {
    "name": "Buffer Under-read",
    "description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.",
    "tag": "CWE-127",
    "cvss": null,
    "risk_rating": "",
    "impact": "By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3232,
  "fields": {
    "name": "Generation of Incorrect Security Tokens",
    "description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.",
    "tag": "CWE-1270",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3233,
  "fields": {
    "name": "Uninitialized Value on Reset for Registers Holding Security Settings",
    "description": "Security-critical logic is not set to a known value on reset.",
    "tag": "CWE-1271",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions.\nAll registers holding security-critical information should be set to a specific value on reset.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3234,
  "fields": {
    "name": "Sensitive Information Uncleared Before Debug/Power State Transition",
    "description": "The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.",
    "tag": "CWE-1272",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sensitive information may be used to unlock additional capabilities of the device and take advantage of hidden functionalities which could be used to compromise device security.",
    "remediation": "During state transitions, information not needed in the next state should be removed before the transition to the next state.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3235,
  "fields": {
    "name": "Device Unlock Credential Sharing",
    "description": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.",
    "tag": "CWE-1273",
    "cvss": null,
    "risk_rating": "",
    "impact": "Once unlock credentials are compromised, an attacker can use the credentials to unlock the device and gain unauthorized access to the hidden functionalities protected by those credentials.",
    "remediation": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.\nEnsure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3236,
  "fields": {
    "name": "Improper Access Control for Volatile Memory Containing Boot Code",
    "description": "The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.",
    "tag": "CWE-1274",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code.\nTest the volatile-memory protections to ensure they are safe from modification or untrusted code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3237,
  "fields": {
    "name": "Sensitive Cookie with Improper SameSite Attribute",
    "description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used.",
    "tag": "CWE-1275",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a \"simple\" \"Content-Type\" header in the HTTP request and many more.",
    "remediation": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3238,
  "fields": {
    "name": "Hardware Child Block Incorrectly Connected to Parent System",
    "description": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.",
    "tag": "CWE-1276",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3239,
  "fields": {
    "name": "Firmware Not Updateable",
    "description": "The product does not provide its\n\t\t\tusers with the ability to update or patch its\n\t\t\tfirmware to address any vulnerabilities or\n\t\t\tweaknesses that may be present.",
    "tag": "CWE-1277",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attacker can identify an exploitable vulnerability in one device that has no means of patching, the attack may be used against an entire class of devices.",
    "remediation": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed.\nDesign the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication.\nImplement the necessary functionality to allow the firmware to be updated.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3240,
  "fields": {
    "name": "Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques",
    "description": "Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.",
    "tag": "CWE-1278",
    "cvss": null,
    "risk_rating": "",
    "impact": "A common goal of malicious actors who reverse engineer ICs is to produce and sell counterfeit versions of the IC.",
    "remediation": "The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3241,
  "fields": {
    "name": "Cryptographic Operations are run Before Supporting Units are Ready",
    "description": "Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.",
    "tag": "CWE-1279",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Best practices should be used to design cryptographic systems.\nContinuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3242,
  "fields": {
    "name": "Wrap-around Error",
    "description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.",
    "tag": "CWE-128",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.",
    "remediation": "Requirements specification: The choice could be made to use a language that is not susceptible to these issues.\nProvide clear upper and lower bounds on the scale of any protocols designed.\nPerform validation on all incremented variables to ensure that they remain within reasonable bounds.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3243,
  "fields": {
    "name": "Access Control Check Implemented After Asset is Accessed",
    "description": "A product's hardware-based access control check occurs after the asset has been accessed.",
    "tag": "CWE-1280",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implement the access control check first. Access should only be given to asset if agent is authorized.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3244,
  "fields": {
    "name": "Sequence of Processor Instructions Leads to Unexpected Behavior",
    "description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.",
    "tag": "CWE-1281",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences.\nPatch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior.  See [REF-1108].",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3245,
  "fields": {
    "name": "Assumed-Immutable Data is Stored in Writable Memory",
    "description": "Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field.",
    "tag": "CWE-1282",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "All immutable code or data should be programmed into ROM or write-once memory.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3246,
  "fields": {
    "name": "Mutable Attestation or Measurement Reporting Data",
    "description": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.",
    "tag": "CWE-1283",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3247,
  "fields": {
    "name": "Improper Validation of Specified Quantity in Input",
    "description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.",
    "tag": "CWE-1284",
    "cvss": null,
    "risk_rating": "",
    "impact": "Since quantities are used so often to affect resource allocation or process financial data, they are often present in many places in the code.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3248,
  "fields": {
    "name": "Improper Validation of Specified Index, Position, or Offset in Input",
    "description": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.",
    "tag": "CWE-1285",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3249,
  "fields": {
    "name": "Improper Validation of Syntactic Correctness of Input",
    "description": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.",
    "tag": "CWE-1286",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3250,
  "fields": {
    "name": "Improper Validation of Specified Type of Input",
    "description": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type.",
    "tag": "CWE-1287",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3251,
  "fields": {
    "name": "Improper Validation of Consistency within Input",
    "description": "The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent.",
    "tag": "CWE-1288",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3252,
  "fields": {
    "name": "Improper Validation of Unsafe Equivalence in Input",
    "description": "The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value.",
    "tag": "CWE-1289",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3253,
  "fields": {
    "name": "Improper Validation of Array Index",
    "description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array.",
    "tag": "CWE-129",
    "cvss": null,
    "risk_rating": "",
    "impact": "Use of an index that is outside the bounds of an array will very likely result in the corruption of relevant memory and perhaps instructions, leading to a crash, if the values are outside of the valid memory area.\nIf the memory corrupted is data, rather than instructions, the system will continue to function with improper values.\nUse of an index that is outside the bounds of an array can also trigger out-of-bounds read or write operations, or operations on the wrong objects; i.e., \"buffer overflows\" are not always the result. This may result in the exposure or modification of sensitive data.\nIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow and possibly without the use of large inputs if a precise index can be controlled.\nA single fault could allow either an overflow (CWE-788) or underflow (CWE-786) of the array index. What happens next will depend on the type of operation being performed out of bounds, but can expose sensitive information, cause a system crash, or possibly lead to arbitrary code execution.",
    "remediation": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).\n\n                  \n\n                  \n\n                  \nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].\n\n                  \nBe especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3254,
  "fields": {
    "name": "Incorrect Decoding of Security Identifiers ",
    "description": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset.",
    "tag": "CWE-1290",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Security identifier decoders must be reviewed for design consistency and common weaknesses.\nAccess and programming flows must be tested in pre-silicon and post-silicon testing in order to check for this weakness.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3255,
  "fields": {
    "name": "Public Key Re-Use for Signing both Debug and Production Code",
    "description": "The same public key is used for signing both debug and production code.",
    "tag": "CWE-1291",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use different keys for Production and Debug",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3256,
  "fields": {
    "name": "Incorrect Conversion of Security Identifiers",
    "description": "The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset.",
    "tag": "CWE-1292",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Security identifier decoders must be reviewed for design inconsistency and common weaknesses.\nAccess and programming flows must be tested in pre-silicon and post-silicon testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3257,
  "fields": {
    "name": "Missing Source Correlation of Multiple Independent Data",
    "description": "The product relies on one source of data, preventing the ability to detect if an adversary has compromised a data source.",
    "tag": "CWE-1293",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker that may be able to execute a single Person-in-the-Middle attack can subvert a check of an external oracle (e.g. the ACME protocol check for a file on a website), and thus inject an arbitrary reply to the single perspective request to the external oracle.",
    "remediation": "Design system to use a Practical Byzantine fault method, to request information from multiple sources to verify the data and report on potentially compromised information sources.\nFailure to use a Practical Byzantine fault method when requesting data. Lack of place to report potentially compromised information sources. Relying on non-independent information sources for integrity checking. Failure to report information sources that respond in the minority to incident response procedures.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3258,
  "fields": {
    "name": "Insecure Security Identifier Mechanism",
    "description": "The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.",
    "tag": "CWE-1294",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Security Identifier Decoders must be reviewed for design inconsistency and common weaknesses.\nAccess and programming flows must be tested in pre-silicon and post-silicon testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3259,
  "fields": {
    "name": "Debug Messages Revealing Unnecessary Information",
    "description": "The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages.",
    "tag": "CWE-1295",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that a debug message does not reveal any unnecessary information during the debug process for the intended response.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3260,
  "fields": {
    "name": "Incorrect Chaining or Granularity of Debug Components",
    "description": "The product's debug components contain incorrect chaining or granularity of debug components.",
    "tag": "CWE-1296",
    "cvss": null,
    "risk_rating": "",
    "impact": "Depending on the access to debug component(s) erroneously granted, an attacker could use the debug component to gain additional understanding about the system to further an attack and/or execute other commands. This could compromise any security property, including the ones listed above.",
    "remediation": "Ensure that debug components are properly chained and their granularity is maintained at different authentication levels.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3261,
  "fields": {
    "name": "Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
    "description": "The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.",
    "tag": "CWE-1297",
    "cvss": null,
    "risk_rating": "",
    "impact": "The impact depends on the confidential information itself and who is inadvertently granted access. For example, if the confidential information is a key that can unlock all the parts of a generation, the impact could be severe.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3262,
  "fields": {
    "name": "Hardware Logic Contains Race Conditions",
    "description": "A race condition in the hardware logic results in undermining security guarantees of the system.",
    "tag": "CWE-1298",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Adopting design practices that encourage designers to recognize and eliminate race conditions, such as Karnaugh maps, could result in the decrease in occurrences of race conditions.\nLogic redundancy can be implemented along security critical paths to prevent race conditions. To avoid metastability, it is a good practice in general to default to a secure state in which access is not given to untrusted agents.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3263,
  "fields": {
    "name": "Missing Protection Mechanism for Alternate Hardware Interface",
    "description": "The lack of protections on alternate paths to access\n                control-protected assets (such as unprotected shadow registers\n                and other external facing unguarded interfaces) allows an\n                attacker to bypass existing protections to the asset that are\n\t\tonly performed against the primary path.",
    "tag": "CWE-1299",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Protect assets from accesses against all potential interfaces and alternate paths. \nProtect assets from accesses against all potential interfaces and alternate paths. \nProtect assets from accesses against all potential interfaces and alternate paths.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3264,
  "fields": {
    "name": "ASP.NET Misconfiguration: Password in Configuration File",
    "description": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers.",
    "tag": "CWE-13",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Credentials stored in configuration files should be encrypted, Use standard APIs and industry accepted algorithms to encrypt the credentials stored in configuration files.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3265,
  "fields": {
    "name": "Improper Handling of Length Parameter Inconsistency",
    "description": "The product parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data.",
    "tag": "CWE-130",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When processing structured incoming data containing a size field followed by raw data, ensure that you identify and resolve any inconsistencies between the size field and the actual size of the data.\nDo not let the user control the size of the buffer.\nValidate that the length of the user-supplied data is consistent with the buffer size.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3266,
  "fields": {
    "name": "Improper Protection of Physical Side Channels",
    "description": "The device does not contain sufficient protection\n\tmechanisms to prevent physical side channels from exposing\n\tsensitive information due to patterns in physically observable\n\tphenomena such as variations in power consumption,\n\telectromagnetic emissions (EME), or acoustic emissions.",
    "tag": "CWE-1300",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Apply blinding or masking techniques to implementations of cryptographic algorithms.\nAdd shielding or tamper-resistant protections to the device to increase the difficulty of obtaining measurements of the side-channel.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3267,
  "fields": {
    "name": "Insufficient or Incomplete Data Removal within Hardware Component",
    "description": "The product's data removal process does not completely delete all data and potentially sensitive information within hardware components.",
    "tag": "CWE-1301",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Apply blinding or masking techniques to implementations of cryptographic algorithms.\nAlter the method of erasure, add protection of media, or destroy the media to protect the data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3268,
  "fields": {
    "name": "Missing Security Identifier",
    "description": "The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.",
    "tag": "CWE-1302",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Transaction details must be reviewed for design inconsistency and common weaknesses.\nSecurity identifier definition and programming flow must be tested in pre-silicon and post-silicon testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3269,
  "fields": {
    "name": "Non-Transparent Sharing of Microarchitectural Resources",
    "description": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.",
    "tag": "CWE-1303",
    "cvss": null,
    "risk_rating": "",
    "impact": "Microarchitectural side-channels have been used to leak specific information such as cryptographic keys, and Address Space Layout Randomization (ALSR) offsets as well as arbitrary memory.",
    "remediation": "Microarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.\nMicroarchitectural covert channels can be addressed using a mixture of hardware and software mitigation techniques. These include partitioned caches, new barrier and flush instructions, and disabling high resolution performance counters and timers.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3270,
  "fields": {
    "name": "Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
    "description": "The product performs a power save/restore\n            operation, but it does not ensure that the integrity of\n            the configuration state is maintained and/or verified between\n\t    the beginning and ending of the operation.",
    "tag": "CWE-1304",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inside the IP, incorporate integrity checking\n                        on the configuration state via a cryptographic\n                        hash. The hash can be protected inside the IP such as\n                        by storing it in internal registers which never lose\n                        power. Before powering down, the IP performs a hash of\n                        the configuration and saves it in these persistent\n                        registers. Upon restore, the IP performs a hash of the\n                        saved configuration and compares it with the\n                        saved hash. If they do not match, then the IP should\n                        not trust the configuration.\nOutside the IP, incorporate integrity checking\n                        of the configuration state via a trusted agent. Before\n                        powering down, the trusted agent performs a hash of the\n                        configuration and saves the hash in persistent storage.\n                        Upon restore, the IP requests the trusted agent\n                        validate its current configuration. If the\n                        configuration hash is invalid, then the IP should not\n                        trust the configuration.\n                    \nOutside the IP, incorporate a protected\n                        environment that prevents undetected modification of\n                        the configuration state by untrusted agents. Before\n                        powering down, a trusted agent saves the IP's\n                        configuration state in this protected location that\n                        only it is privileged to. Upon restore, the trusted\n                        agent loads the saved state into the IP.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3271,
  "fields": {
    "name": "Incorrect Calculation of Buffer Size",
    "description": "The product does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
    "tag": "CWE-131",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the incorrect calculation is used in the context of memory allocation, then the software may create a buffer that is smaller or larger than expected. If the allocated buffer is smaller than expected, this could lead to an out-of-bounds read or write (CWE-119), possibly causing a crash, allowing arbitrary code execution, or exposing sensitive data.",
    "remediation": "When allocating a buffer for the purpose of transforming, converting, or encoding an input, allocate enough memory to handle the largest possible encoding. For example, in a routine that converts \"&\" characters to \"&amp;\" for HTML entity encoding, the output buffer needs to be at least 5 times as large as the input buffer.\n\n                  \nPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nWhen processing structured incoming data containing a size field followed by raw data, identify and resolve any inconsistencies between the size field and the actual size of the data (CWE-130).\nWhen allocating memory that uses sentinels to mark the end of a data structure - such as NUL bytes in strings - make sure you also include the sentinel in your calculation of the total amount of memory that must be allocated.\nReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.\nUse sizeof() on the appropriate data type to avoid CWE-467.\nUse the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity. This will simplify validation and will reduce surprises related to unexpected casting.\n\n                  \n\n                  \n\n                  \nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-61] [REF-60].\nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3272,
  "fields": {
    "name": "Missing Ability to Patch ROM Code",
    "description": "Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.",
    "tag": "CWE-1310",
    "cvss": null,
    "risk_rating": "",
    "impact": "When the system is unable to be patched, it can be left in a vulnerable state.",
    "remediation": "Secure patch support to allow ROM code to be patched on the next boot.\n                    \n\n\t\t\t\t\t    Support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3273,
  "fields": {
    "name": "Improper Translation of Security Attributes by Fabric Bridge",
    "description": "The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.",
    "tag": "CWE-1311",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The translation must map signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.\nEnsure that the translation maps signals in such a way that untrusted agents cannot map to trusted agents or vice-versa.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3274,
  "fields": {
    "name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
    "description": "The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.",
    "tag": "CWE-1312",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The fabric firewall should apply the same protections as the original region to the mirrored regions.\nThe fabric firewall should apply the same protections as the original region to the mirrored regions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3275,
  "fields": {
    "name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
    "description": "During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary.",
    "tag": "CWE-1313",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Insert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nInsert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.\nInsert restrictions on when the hardware's test or debug features can be activated. For example, during normal operating modes, the hardware's privileged modes that allow access to such features cannot be activated. Configuring the hardware to only enter a test or debug mode within a window of opportunity such as during boot or configuration stage. The result is disablement of such test/debug features and associated modes during normal runtime operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3276,
  "fields": {
    "name": "Missing Write Protection for Parametric Data Values",
    "description": "The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure.",
    "tag": "CWE-1314",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sensor value manipulation, particularly thermal or power, may allow physical damage to occur or disabling of the device by a false fault shutdown causing a Denial-Of-Service.",
    "remediation": "Access controls for sensor blocks should ensure that only trusted software is allowed to change threshold limits and sensor parametric data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3277,
  "fields": {
    "name": "Improper Setting of Bus Controlling Capability in Fabric End-point",
    "description": "The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.",
    "tag": "CWE-1315",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "For responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\nFor responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.\nFor responder devices, the register bit in the fabric end-point that enables the bus controlling capability must be set to 0 by default. This bit should not be set during secure-boot flows. Also, writes to this register must be access-protected to prevent malicious modifications to obtain bus-controlling capability.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3278,
  "fields": {
    "name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
    "description": "The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region.",
    "tag": "CWE-1316",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When architecting the address map of the chip, ensure that protected and unprotected ranges are isolated and do not overlap. When designing, ensure that ranges hardcoded in Register-Transfer Level (RTL) do not overlap.\nRanges configured by firmware should not overlap. If overlaps are mandatory because of constraints such as a limited number of registers, then ensure that no assets are present in the overlapped portion.\nValidate mitigation actions with robust testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3279,
  "fields": {
    "name": "Improper Access Control in Fabric Bridge",
    "description": "The product uses a fabric bridge for transactions between two Intellectual Property (IP) blocks, but the bridge does not properly perform the expected privilege, identity, or other access control checks between those IP blocks.",
    "tag": "CWE-1317",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that the design includes provisions for access-control checks in the bridge for both upstream and downstream transactions.\nImplement access-control checks in the bridge for both upstream and downstream transactions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3280,
  "fields": {
    "name": "Missing Support for Security Features in On-chip Fabrics or Buses",
    "description": " On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control. ",
    "tag": "CWE-1318",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "If fabric does not support security features, implement security checks in a bridge or any component that is between the master and the fabric.  Alternatively, connect all fabric slaves that do not have any security assets under one such fabric and connect peripherals with security assets to a different fabric that supports security features.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3281,
  "fields": {
    "name": "Improper Protection against Electromagnetic Fault Injection (EM-FI)",
    "description": "The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed.",
    "tag": "CWE-1319",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3282,
  "fields": {
    "name": "DEPRECATED: Miscalculated Null Termination",
    "description": "This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170.",
    "tag": "CWE-132",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3283,
  "fields": {
    "name": "Improper Protection for Outbound Error Messages and Alert Signals",
    "description": "Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.\n\t\t\t",
    "tag": "CWE-1320",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Alert signals generated by critical events should be protected from access by untrusted agents. Only hardware or trusted firmware modules should be able to alter the alert configuration.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3284,
  "fields": {
    "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
    "description": "The product receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype.",
    "tag": "CWE-1321",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker can inject attributes that are used in other components.\nAn attacker can override existing attributes with ones that have incompatible type, which may lead to a crash.",
    "remediation": "By freezing the object prototype first (for example, Object.freeze(Object.prototype)), modification of the prototype becomes impossible.\nBy blocking modifications of attributes that resolve to object prototype, such as proto or prototype, this weakness can be mitigated.\nWhen handling untrusted objects, validating using a schema can be used.\nBy using an object without prototypes (via Object.create(null) ), adding object prototype attributes by accessing the prototype via the special attributes becomes impossible, mitigating this weakness.\nMap can be used instead of objects in most cases. If Map methods are used instead of object attributes, it is not possible to access the object prototype or modify it.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3285,
  "fields": {
    "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
    "description": "The product uses a non-blocking model that relies on a single threaded process\n\t\t\tfor features such as scalability, but it contains code that can block when it is invoked.",
    "tag": "CWE-1322",
    "cvss": null,
    "risk_rating": "",
    "impact": "An unexpected call to blocking code can trigger an infinite loop, or a large loop that causes the software to pause and wait indefinitely.",
    "remediation": "Generally speaking, blocking calls should be\n\t\t\t\t\treplaced with non-blocking alternatives that can be used asynchronously.\n\t\t\t\t\tExpensive computations should be passed off to worker threads, although\n\t\t\t\t\tthe correct approach depends on the framework being used.\nFor expensive computations, consider breaking them up into\n\t\t\t\t\tmultiple smaller computations. Refer to the documentation of the\n\t\t\t\t\tframework being used for guidance.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3286,
  "fields": {
    "name": "Improper Management of Sensitive Trace Data",
    "description": "Trace data collected from several sources on the\n                System-on-Chip (SoC) is stored in unprotected locations or\n                transported to untrusted agents.",
    "tag": "CWE-1323",
    "cvss": null,
    "risk_rating": "",
    "impact": "An adversary can read secret values if they are captured in debug traces and stored unsafely.",
    "remediation": "Tag traces to indicate owner and debugging privilege level (designer, OEM, or end user) needed to access that trace.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3287,
  "fields": {
    "name": "DEPRECATED: Sensitive Information Accessible by Physical Probing of JTAG Interface",
    "description": "This entry has been deprecated because it was at a lower level of abstraction than supported by CWE. All relevant content has been integrated into CWE-319.",
    "tag": "CWE-1324",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3288,
  "fields": {
    "name": "Improperly Controlled Sequential Memory Allocation",
    "description": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects.",
    "tag": "CWE-1325",
    "cvss": null,
    "risk_rating": "",
    "impact": "Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system.",
    "remediation": "Ensure multiple allocations of the same kind of object are properly tracked - possibly across multiple sessions, requests, or messages. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.\nRun the program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3289,
  "fields": {
    "name": "Missing Immutable Root of Trust in Hardware",
    "description": "A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.",
    "tag": "CWE-1326",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When architecting the system, the RoT should be designated for storage in a memory that does not allow further programming/writes.\nDuring implementation and test, the RoT memory location should be demonstrated to not allow further programming/writes.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3290,
  "fields": {
    "name": "Binding to an Unrestricted IP Address",
    "description": "The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely.",
    "tag": "CWE-1327",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Assign IP addresses that are not 0.0.0.0.\nUnwanted connections to the configured server may be denied through a firewall or other packet filtering measures.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3291,
  "fields": {
    "name": "Security Version Number Mutable to Older Versions",
    "description": "Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.",
    "tag": "CWE-1328",
    "cvss": null,
    "risk_rating": "",
    "impact": "Impact includes roll-back or downgrade to a vulnerable version of the firmware or DoS (prevent upgrades).",
    "remediation": "When architecting the system, security version data should be designated for storage in registers that are either read-only or have access controls that prevent modification by an untrusted agent.\nDuring implementation and test, security version data should be demonstrated to be read-only and access controls should be validated.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3292,
  "fields": {
    "name": "Reliance on Component That is Not Updateable",
    "description": "The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs.",
    "tag": "CWE-1329",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attacker can identify an exploitable vulnerability in one product that has no means of patching, the attack may be used against all affected versions of that product.",
    "remediation": "Specify requirements that each component should be updateable, including ROM, firmware, etc.\nDesign the product to allow for updating of its components. Include the external infrastructure that might be necessary to support updates, such as distribution servers.\n\n\t\t\t\t\t    With hardware, support patches that can be programmed in-field or during manufacturing through hardware fuses. This feature can be used for limited patching of devices after shipping, or for the next batch of silicon devices manufactured, without changing the full device ROM.\n                    \nImplement the necessary functionality to allow each component to be updated.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3293,
  "fields": {
    "name": "Remanent Data Readable after Memory Erase",
    "description": "Confidential information stored in memory circuits is readable or recoverable after being cleared or erased.",
    "tag": "CWE-1330",
    "cvss": null,
    "risk_rating": "",
    "impact": "Confidential data are readable to untrusted agent.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3294,
  "fields": {
    "name": "Improper Isolation of Shared Resources in Network On Chip (NoC)",
    "description": "The Network On Chip (NoC) does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels.",
    "tag": "CWE-1331",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers may infer data that belongs to a trusted agent. The methods used to perform this attack may result in noticeably increased resource consumption.",
    "remediation": "Implement priority-based arbitration inside the NoC and have dedicated buffers or virtual channels for routing secret data from trusted agents.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3295,
  "fields": {
    "name": "Improper Handling of Faults that Lead to Instruction Skips",
    "description": "The device is missing or incorrectly implements circuitry or sensors that detect and mitigate the skipping of security-critical CPU instructions when they occur.",
    "tag": "CWE-1332",
    "cvss": null,
    "risk_rating": "",
    "impact": "Depending on the context, instruction skipping can\n                        have a broad range of consequences related to the\n                        generic bypassing of security critical code.",
    "remediation": "Design strategies for ensuring safe failure if\n                        inputs, such as Vcc, are modified out of acceptable\n                        ranges.\nDesign strategies for ensuring safe behavior if\n                        instructions attempt to be skipped.\nIdentify mission critical secrets that should\n                          be wiped if faulting is detected, and design a\n                          mechanism to do the deletion.\nAdd redundancy by performing an operation\n                          multiple times, either in space or time, and perform\n                          majority voting. Additionally, make conditional\n                          instruction timing unpredictable.\nUse redundant operations or canaries to\n                          detect and respond to faults.\nEnsure that fault mitigations are strong enough\n                        in practice. For example, a low power detection\n                        mechanism that takes 50 clock cycles to trigger at lower\n                        voltages may be an insufficient security mechanism if\n                        the instruction counter has already progressed with no\n                        other CPU activity occurring.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3296,
  "fields": {
    "name": "Inefficient Regular Expression Complexity",
    "description": "The product uses a regular expression with an inefficient, possibly exponential worst-case computational complexity that consumes excessive CPU cycles.",
    "tag": "CWE-1333",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use regular expressions that do not support backtracking, e.g. by removing nested quantifiers.\nSet backtracking limits in the configuration of the regular expression implementation, such as PHP's pcre.backtrack_limit. Also consider limits on execution time for the process.\nDo not use regular expressions with untrusted input. If regular expressions must be used, avoid using backtracking in the expression.\nLimit the length of the input that the regular expression will process.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3297,
  "fields": {
    "name": "Unauthorized Error Injection Can Degrade Hardware Redundancy",
    "description": "An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.",
    "tag": "CWE-1334",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure the design does not allow error injection in modes intended for normal run-time operation. Provide access controls on interfaces for injecting errors.\nDisallow error injection in modes which are expected to be used for normal run-time operation. Provide access controls on interfaces for injecting errors.\nAdd an access control layer atop any unprotected interfaces for injecting errors.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3298,
  "fields": {
    "name": "Incorrect Bitwise Shift of Integer",
    "description": "An integer value is specified to be shifted by a negative amount or an amount greater than or equal to the number of bits contained in the value causing an unexpected or indeterminate result.",
    "tag": "CWE-1335",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implicitly or explicitly add checks and mitigation for negative or over-shift values.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3299,
  "fields": {
    "name": "Improper Neutralization of Special Elements Used in a Template Engine",
    "description": "The product uses a template engine to insert or process externally-influenced input, but it does not neutralize or incorrectly neutralizes special elements or syntax that can be interpreted as template expressions or other code directives when processed by the engine.",
    "tag": "CWE-1336",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Choose a template engine that offers a sandbox or restricted mode, or at least limits the power of any available expressions, function calls, or commands.\nUse the template engine's sandbox or restricted mode, if available.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3300,
  "fields": {
    "name": "Improper Protections Against Hardware Overheating",
    "description": "A hardware device is missing or has inadequate protection features to prevent overheating.",
    "tag": "CWE-1338",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Temperature maximum and minimum limits should be enforced using thermal sensors both in silicon and at the platform level.\nThe platform should support cooling solutions such as fans that can be modulated based on device-operation needs to maintain a stable temperature.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3301,
  "fields": {
    "name": "Insufficient Precision or Accuracy of a Real Number",
    "description": "The product processes a real number with an implementation in which the number's representation does not preserve required accuracy and precision in its fractional part, causing an incorrect result.",
    "tag": "CWE-1339",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness will generally lead to undefined results and therefore crashes. In some implementations the program will halt if the weakness causes an overflow during a calculation.\nThe results of the math are not as expected. This could cause issues where a value would not be properly calculated and provide an incorrect answer.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a product's implicit security policy.",
    "remediation": "The developer or maintainer can move to a more accurate representation of real numbers.  In extreme cases, the programmer can move to representations such as ratios of BigInts which can represent real numbers to extremely fine precision. The programmer can also use the concept of an Unum real. The memory and CPU tradeoffs of this change must be examined. Since floating point reals are used in many products and many locations, they are implemented in hardware and most format changes will cause the calculations to be moved into software resulting in slower products.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3302,
  "fields": {
    "name": "Use of Externally-Controlled Format String",
    "description": "The product uses a function that accepts a format string as an argument, but the format string originates from an external source.",
    "tag": "CWE-134",
    "cvss": null,
    "risk_rating": "",
    "impact": "Format string problems allow for information disclosure which can severely simplify exploitation of the program.\nFormat string problems can result in the execution of arbitrary code.",
    "remediation": "Choose a language that is not subject to this flaw.\nEnsure that all format string functions are passed a static string which cannot be controlled by the user, and that the proper number of arguments are always sent to that function as well. If at all possible, use functions that do not support the %n operator in format strings. [REF-116] [REF-117]\nRun compilers and linkers with high warning levels, since they may detect incorrect usage.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3303,
  "fields": {
    "name": "Multiple Releases of Same Resource or Handle",
    "description": "The product attempts to close or release a resource or handle more than once, without any successful open between the close operations.",
    "tag": "CWE-1341",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Change the code's logic so that the resource is only closed once. This might require simplifying or refactoring. This fix can be simple to do in small code blocks, but more difficult when multiple closes are buried within complex conditionals.\nIt can be effective to implement a flag that is (1) set when the resource is opened, (2) cleared when it is closed, and (3) checked before closing. This approach can be useful when there are disparate cases in which closes must be performed. However, flag-tracking can increase code complexity and requires diligent compliance by the programmer.\nWhen closing a resource, set the resource's associated variable to NULL or equivalent value for the given language. Some APIs will ignore this null value without causing errors. For other APIs, this can lead to application crashes or exceptions, which may still be preferable to corrupting an unintended resource such as memory or data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3304,
  "fields": {
    "name": "Information Exposure through Microarchitectural State after Transient Execution",
    "description": "The processor does not properly clear microarchitectural state after incorrect microcode assists or speculative execution, resulting in transient execution.",
    "tag": "CWE-1342",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Hardware ensures that no illegal data flows from faulting micro-ops exists at the microarchitectural level.\nInclude instructions that explicitly remove traces of unneeded computations from software interactions with microarchitectural elements e.g. lfence, sfence, mfence, clflush.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3305,
  "fields": {
    "name": "Incorrect Calculation of Multi-Byte String Length",
    "description": "The product does not correctly calculate the length of strings that can contain wide or multi-byte characters.",
    "tag": "CWE-135",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness may lead to a buffer overflow. Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nIn the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.",
    "remediation": "Always verify the length of the string unit character.\nUse length computing functions (e.g. strlen, wcslen, etc.) appropriately with their equivalent type (e.g.: byte, wchar_t, etc.)",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3306,
  "fields": {
    "name": "Improper Handling of Hardware Behavior in Exceptionally Cold Environments",
    "description": "A hardware device, or the firmware running on it, is\n                missing or has incorrect protection features to maintain\n                goals of security primitives when the device is cooled below\n                standard operating temperatures.",
    "tag": "CWE-1351",
    "cvss": null,
    "risk_rating": "",
    "impact": "Consequences of this weakness are highly contextual.",
    "remediation": "The system should account for security primitive behavior when cooled outside standard temperatures.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3307,
  "fields": {
    "name": "Reliance on Insufficiently Trustworthy Component",
    "description": "The product is built from multiple separate components, but it uses a component that is not sufficiently trusted to meet expectations for security, reliability, updateability, and maintainability.",
    "tag": "CWE-1357",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "For each component, ensure that its supply chain is well-controlled with sub-tier suppliers using best practices. For third-party software components such as libraries, ensure that they are developed and actively maintained by reputable vendors.\nMaintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"\nContinue to monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, supplier practices that affect trustworthiness, etc.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3308,
  "fields": {
    "name": "Improper Neutralization of Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component.",
    "tag": "CWE-138",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that special elements (e.g. delimiters, symbols) will be injected into input vectors of their product. One defense is to create an allowlist (e.g. a regular expression) that defines valid input according to the requirements specifications. Strictly filter any input that does not match against the allowlist. Properly encode your output, and quote any elements that have special meaning to the component with which you are communicating.\n\n                  \nUse and specify an appropriate output encoding to ensure that the special elements are well-defined. A normal byte sequence in one encoding could be a special element in another.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3309,
  "fields": {
    "name": "Improper Handling of Physical or Environmental Conditions",
    "description": "The product does not properly handle unexpected physical or environmental conditions that occur naturally or are artificially induced.",
    "tag": "CWE-1384",
    "cvss": null,
    "risk_rating": "",
    "impact": "Consequences of this weakness are highly dependent on the role of affected components within the larger product.",
    "remediation": "In requirements, be specific about expectations for how the product will perform when it exceeds physical and environmental boundary conditions, e.g., by shutting down.\nWhere possible, include independent components that can detect excess environmental conditions and have the capability to shut down the product.\nWhere possible, use shielding or other materials that can increase the adversary's workload and reduce the likelihood of being able to successfully trigger a security-related failure.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3310,
  "fields": {
    "name": "Missing Origin Validation in WebSockets",
    "description": "The product uses a WebSocket, but it does not properly verify that the source of data or communication is valid.",
    "tag": "CWE-1385",
    "cvss": null,
    "risk_rating": "",
    "impact": "The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of the CSRF is limited only by the victim's privileges.",
    "remediation": "Enable CORS-like access restrictions by verifying the 'Origin' header during the WebSocket handshake.\nUse a randomized CSRF token to verify requests.\nUse TLS to securely communicate using 'wss' (WebSocket Secure) instead of 'ws'.\nRequire user authentication prior to the WebSocket connection being established. For example, the WS library in Node has a 'verifyClient' function.\nLeverage rate limiting to prevent against DoS. Use of the leaky bucket algorithm can help with this.\nUse a library that provides restriction of the payload size. For example, WS library for Node includes 'maxPayloadoption' that can be set.\nTreat data/input as untrusted in both directions and apply the same data/input sanitization as XSS, SQLi, etc.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3311,
  "fields": {
    "name": "Insecure Operation on Windows Junction / Mount Point",
    "description": "The product opens a file or directory, but it does not properly prevent the name from being associated with a junction or mount point to a destination that is outside of the intended control sphere.",
    "tag": "CWE-1386",
    "cvss": null,
    "risk_rating": "",
    "impact": "Read arbitrary files by replacing a user-controlled folder with a mount point and additional hard links.\nModify an arbitrary file by replacing the rollback files in installer directories, as they can have the installer execute those rollbacks.\nEven if there is no control of contents, an arbitrary file delete or overwrite (when running as SYSTEM or admin) can be used for a permanent system denial-of-service, e.g. by deleting a startup configuration file that prevents the service from starting.",
    "remediation": "When designing software that will have different rights than the executer, the software should check that files that it is interacting with are not improper hard links or mount points.  One way to do this in Windows is to use the functionality embedded in the following command: \"dir /al /s /b\" or, in PowerShell, use LinkType as a filter. In addition, some software uses authentication via signing to ensure that the file is the correct one to use. Make checks atomic with the file action, otherwise a TOCTOU weakness (CWE-367) can be introduced.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3312,
  "fields": {
    "name": "Incorrect Parsing of Numbers with Different Radices",
    "description": "The product parses numeric input assuming base 10 (decimal) values, but it does not account for inputs that use a different base number (radix).",
    "tag": "CWE-1389",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may use an unexpected numerical base to access private application resources.\nAn attacker may use an unexpected numerical base to bypass or manipulate access control mechanisms.",
    "remediation": "If only decimal-based values are expected in the application, conditional checks should be created in a way that prevent octal or hexadecimal strings from being checked. This can be achieved by converting any numerical string to an explicit base-10 integer prior to the conditional check, to prevent octal or hex values from ever being checked against the condition.\nIf various numerical bases do need to be supported, check for leading values indicating the non-decimal base you wish to support (such as 0x for hex) and convert the numeric strings to integers of the respective base. Reject any other alternative-base string that is not intentionally supported by the application.\nIf regular expressions are used to validate IP addresses, ensure that they are bounded using ^ and $ to prevent base-prepended IP addresses from being matched.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3313,
  "fields": {
    "name": "Weak Authentication",
    "description": "The product uses an authentication mechanism to restrict access to specific users or identities, but the mechanism does not sufficiently prove that the claimed identity is correct.",
    "tag": "CWE-1390",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3314,
  "fields": {
    "name": "Use of Weak Credentials",
    "description": "The product uses weak credentials (such as a default key or hard-coded password) that can be calculated, derived, reused, or guessed by an attacker.",
    "tag": "CWE-1391",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3315,
  "fields": {
    "name": "Use of Default Credentials",
    "description": "The product uses default credentials (such as passwords or cryptographic keys) for potentially critical functionality.",
    "tag": "CWE-1392",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\nForce the administrator to change the credential upon installation.\nThe product administrator could change the defaults upon installation or during operation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3316,
  "fields": {
    "name": "Use of Default Password",
    "description": "The product uses default passwords for potentially critical functionality.",
    "tag": "CWE-1393",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\nEnsure that product documentation clearly emphasizes the presence of default passwords and provides steps for the administrator to change them.\nForce the administrator to change the credential upon installation.\nThe product administrator could change the defaults upon installation or during operation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3317,
  "fields": {
    "name": "Use of Default Cryptographic Key",
    "description": "The product uses a default cryptographic key for potentially critical functionality.",
    "tag": "CWE-1394",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Prohibit use of default, hard-coded, or other values that do not vary for each installation of the product - especially for separate organizations.\nForce the administrator to change the credential upon installation.\nThe product administrator could change the defaults upon installation or during operation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3318,
  "fields": {
    "name": "Dependency on Vulnerable Third-Party Component",
    "description": "The product has a dependency on a third-party component that contains one or more known vulnerabilities.",
    "tag": "CWE-1395",
    "cvss": null,
    "risk_rating": "",
    "impact": "The consequences vary widely, depending on the vulnerabilities that exist in the component; how those vulnerabilities can be \"reached\" by adversaries, as the exploitation paths and attack surface will vary depending on how the component is used; and the criticality of the privilege levels and features for which the product relies on the component.",
    "remediation": "In some industries such as healthcare [REF-1320] [REF-1322] or technologies such as the cloud [REF-1321], it might be unclear about who is responsible for applying patches for third-party vulnerabilities: the vendor, the operator/customer, or a separate service. Clarifying roles and responsibilities can be important to minimize confusion or unnecessary delay when third-party vulnerabilities are disclosed.\nRequire a Bill of Materials for all components and sub-components of the product. For software, require a Software Bill of Materials (SBOM) [REF-1247] [REF-1311].\nMaintain a Bill of Materials for all components and sub-components of the product. For software, maintain a Software Bill of Materials (SBOM). According to [REF-1247], \"An SBOM is a formal, machine-readable inventory of software components and dependencies, information about those components, and their hierarchical relationships.\"\nActively monitor when a third-party component vendor announces vulnerability patches; fix the third-party component as soon as possible; and make it easy for operators/customers to obtain and apply the patch.\nContinuously monitor changes in each of the product's components, especially when the changes indicate new vulnerabilities, end-of-life (EOL) plans, etc.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3319,
  "fields": {
    "name": "Compiler Removal of Code to Clear Buffers",
    "description": "Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka \"dead store removal.\"",
    "tag": "CWE-14",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness will allow data that has not been cleared from memory to be read. If this data contains sensitive password information, then an attacker can read the password and use the information to bypass protection mechanisms.",
    "remediation": "Store the sensitive data in a \"volatile\" memory location if available.\nIf possible, configure your compiler so that it does not remove dead stores.\nWhere possible, encrypt sensitive data that are used by a software system.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3320,
  "fields": {
    "name": "Improper Neutralization of Delimiters",
    "description": "The product does not neutralize or incorrectly neutralizes delimiters.",
    "tag": "CWE-140",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3321,
  "fields": {
    "name": "Improper Neutralization of Parameter/Argument Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component.",
    "tag": "CWE-141",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that parameter/argument delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3322,
  "fields": {
    "name": "Improper Neutralization of Value Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component.",
    "tag": "CWE-142",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that value delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3323,
  "fields": {
    "name": "Improper Neutralization of Record Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component.",
    "tag": "CWE-143",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that record delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3324,
  "fields": {
    "name": "Improper Neutralization of Line Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component.",
    "tag": "CWE-144",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that line delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3325,
  "fields": {
    "name": "Improper Neutralization of Section Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component.",
    "tag": "CWE-145",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that section delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3326,
  "fields": {
    "name": "Improper Neutralization of Expression/Command Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.",
    "tag": "CWE-146",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that inter-expression and inter-command delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3327,
  "fields": {
    "name": "Improper Neutralization of Input Terminators",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component.",
    "tag": "CWE-147",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that terminators will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3328,
  "fields": {
    "name": "Improper Neutralization of Input Leaders",
    "description": "The product does not properly handle when a leading character or sequence (\"leader\") is missing or malformed, or if multiple leaders are used when only one should be allowed.",
    "tag": "CWE-148",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that leading characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3329,
  "fields": {
    "name": "Improper Neutralization of Quoting Syntax",
    "description": "Quotes injected into a product can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions.",
    "tag": "CWE-149",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that quotes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3330,
  "fields": {
    "name": "External Control of System or Configuration Setting",
    "description": "One or more system settings or configuration elements can be externally controlled by a user.",
    "tag": "CWE-15",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Because setting manipulation covers a diverse set of functions, any attempt at illustrating it will inevitably be incomplete. Rather than searching for a tight-knit relationship between the functions addressed in the setting manipulation category, take a step back and consider the sorts of system values that an attacker should not be allowed to control.\nIn general, do not allow user-provided or otherwise untrusted data to control sensitive values. The leverage that an attacker gains by controlling these values is not always immediately obvious, but do not underestimate the creativity of the attacker.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3331,
  "fields": {
    "name": "Improper Neutralization of Escape, Meta, or Control Sequences",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component.",
    "tag": "CWE-150",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that escape, meta and control characters/sequences will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3332,
  "fields": {
    "name": "Improper Neutralization of Comment Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component.",
    "tag": "CWE-151",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that comments will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3333,
  "fields": {
    "name": "Improper Neutralization of Macro Symbols",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component.",
    "tag": "CWE-152",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that macro symbols will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3334,
  "fields": {
    "name": "Improper Neutralization of Substitution Characters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component.",
    "tag": "CWE-153",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that substitution characters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3335,
  "fields": {
    "name": "Improper Neutralization of Variable Name Delimiters",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component.",
    "tag": "CWE-154",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that variable name delimiters will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3336,
  "fields": {
    "name": "Improper Neutralization of Wildcards or Matching Symbols",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component.",
    "tag": "CWE-155",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that wildcard or matching elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3337,
  "fields": {
    "name": "Improper Neutralization of Whitespace",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component.",
    "tag": "CWE-156",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that whitespace will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3338,
  "fields": {
    "name": "Failure to Sanitize Paired Delimiters",
    "description": "The product does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces.",
    "tag": "CWE-157",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that grouping elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3339,
  "fields": {
    "name": "Improper Neutralization of Null Byte or NUL Character",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component.",
    "tag": "CWE-158",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that null characters or null bytes will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3340,
  "fields": {
    "name": "Improper Handling of Invalid Use of Special Elements",
    "description": "The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity.",
    "tag": "CWE-159",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that special elements will be injected/removed/manipulated in the input vectors of their software system. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3341,
  "fields": {
    "name": "Improper Neutralization of Leading Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "tag": "CWE-160",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3342,
  "fields": {
    "name": "Improper Neutralization of Multiple Leading Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "tag": "CWE-161",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that multiple leading special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3343,
  "fields": {
    "name": "Improper Neutralization of Trailing Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "tag": "CWE-162",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3344,
  "fields": {
    "name": "Improper Neutralization of Multiple Trailing Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "tag": "CWE-163",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3345,
  "fields": {
    "name": "Improper Neutralization of Internal Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "tag": "CWE-164",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3346,
  "fields": {
    "name": "Improper Neutralization of Multiple Internal Special Elements",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.",
    "tag": "CWE-165",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3347,
  "fields": {
    "name": "Improper Handling of Missing Special Element",
    "description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.",
    "tag": "CWE-166",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3348,
  "fields": {
    "name": "Improper Handling of Additional Special Element",
    "description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.",
    "tag": "CWE-167",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3349,
  "fields": {
    "name": "Improper Handling of Inconsistent Special Elements",
    "description": "The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.",
    "tag": "CWE-168",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3350,
  "fields": {
    "name": "Improper Null Termination",
    "description": "The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.",
    "tag": "CWE-170",
    "cvss": null,
    "risk_rating": "",
    "impact": "The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code.\nIf a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could: cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer.\nMisplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory.\nShould the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code.",
    "remediation": "Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible.\nEnsure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings.\nIf performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution.\nSwitch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect.\nAdd code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3351,
  "fields": {
    "name": "Encoding Error",
    "description": "The product does not properly encode or decode the data, resulting in unexpected values.",
    "tag": "CWE-172",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3352,
  "fields": {
    "name": "Improper Handling of Alternate Encoding",
    "description": "The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.",
    "tag": "CWE-173",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3353,
  "fields": {
    "name": "Double Decoding of the Same Data",
    "description": "The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.",
    "tag": "CWE-174",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3354,
  "fields": {
    "name": "Improper Handling of Mixed Encoding",
    "description": "The product does not properly handle when the same input uses several different (mixed) encodings.",
    "tag": "CWE-175",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3355,
  "fields": {
    "name": "Improper Handling of Unicode Encoding",
    "description": "The product does not properly handle when an input contains Unicode encoding.",
    "tag": "CWE-176",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3356,
  "fields": {
    "name": "Improper Handling of URL Encoding (Hex Encoding)",
    "description": "The product does not properly handle when all or part of an input has been URL encoded.",
    "tag": "CWE-177",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3357,
  "fields": {
    "name": "Improper Handling of Case Sensitivity",
    "description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.",
    "tag": "CWE-178",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3358,
  "fields": {
    "name": "Incorrect Behavior Order: Early Validation",
    "description": "The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.",
    "tag": "CWE-179",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior.",
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3359,
  "fields": {
    "name": "Incorrect Behavior Order: Validate Before Canonicalize",
    "description": "The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.",
    "tag": "CWE-180",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3360,
  "fields": {
    "name": "Incorrect Behavior Order: Validate Before Filter",
    "description": "The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.",
    "tag": "CWE-181",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being filtered.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3361,
  "fields": {
    "name": "Collapse of Data into Unsafe Value",
    "description": "The product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.",
    "tag": "CWE-182",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\nCanonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3362,
  "fields": {
    "name": "Permissive List of Allowed Inputs",
    "description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.",
    "tag": "CWE-183",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3363,
  "fields": {
    "name": "Incomplete List of Disallowed Inputs",
    "description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.",
    "tag": "CWE-184",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not rely exclusively on detecting disallowed inputs.  There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants.  Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3364,
  "fields": {
    "name": "Incorrect Regular Expression",
    "description": "The product specifies a regular expression in a way that causes data to be improperly matched or compared.",
    "tag": "CWE-185",
    "cvss": null,
    "risk_rating": "",
    "impact": "When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors.\nIn PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses.",
    "remediation": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3365,
  "fields": {
    "name": "Overly Restrictive Regular Expression",
    "description": "A regular expression is overly restrictive, which prevents dangerous values from being detected.",
    "tag": "CWE-186",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3366,
  "fields": {
    "name": "Partial String Comparison",
    "description": "The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.",
    "tag": "CWE-187",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3367,
  "fields": {
    "name": "Reliance on Data/Memory Layout",
    "description": "The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.",
    "tag": "CWE-188",
    "cvss": null,
    "risk_rating": "",
    "impact": "Can result in unintended modifications or exposure of sensitive memory.",
    "remediation": "In flat address space situations, never allow computing memory addresses as offsets from another memory address.\nFully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar).\nTesting: Test that the implementation properly handles each case in the protocol grammar.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3368,
  "fields": {
    "name": "Integer Overflow or Wraparound",
    "description": "The product performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",
    "tag": "CWE-190",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.",
    "remediation": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol.\n\n                  \n\n                  \n\n                  \n\n                  \nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3369,
  "fields": {
    "name": "Integer Underflow (Wrap or Wraparound)",
    "description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.",
    "tag": "CWE-191",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3370,
  "fields": {
    "name": "Integer Coercion Error",
    "description": "Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.",
    "tag": "CWE-192",
    "cvss": null,
    "risk_rating": "",
    "impact": "Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes.\nIn some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code.\nInteger coercion errors result in an incorrect value being stored for the variable in question.",
    "remediation": "A language which throws exceptions on ambiguous data casts might be chosen.\nDesign objects and program flow such that multiple or complex casts are unnecessary\nEnsure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3371,
  "fields": {
    "name": "Off-by-one Error",
    "description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.",
    "tag": "CWE-193",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high.\nIf the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur.\nThis weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.",
    "remediation": "When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf().",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3372,
  "fields": {
    "name": "Unexpected Sign Extension",
    "description": "The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.",
    "tag": "CWE-194",
    "cvss": null,
    "risk_rating": "",
    "impact": "When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range.",
    "remediation": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3373,
  "fields": {
    "name": "Signed to Unsigned Conversion Error",
    "description": "The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.",
    "tag": "CWE-195",
    "cvss": null,
    "risk_rating": "",
    "impact": "Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3374,
  "fields": {
    "name": "Unsigned to Signed Conversion Error",
    "description": "The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.",
    "tag": "CWE-196",
    "cvss": null,
    "risk_rating": "",
    "impact": "Incorrect sign conversions generally lead to undefined behavior, and therefore crashes.\nIf a poor cast lead to a buffer overflow or similar condition, data integrity may be affected.\nImproper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy.",
    "remediation": "Choose a language which is not subject to these casting flaws.\nDesign object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors.\nError check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3375,
  "fields": {
    "name": "Numeric Truncation Error",
    "description": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
    "tag": "CWE-197",
    "cvss": null,
    "risk_rating": "",
    "impact": "The true value of the data is lost and corrupted data is used.",
    "remediation": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3376,
  "fields": {
    "name": "Use of Incorrect Byte Ordering",
    "description": "The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.",
    "tag": "CWE-198",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3377,
  "fields": {
    "name": "Improper Input Validation",
    "description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.",
    "tag": "CWE-20",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU.\nAn attacker could read confidential data if they are able to control resource references.\nAn attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution.",
    "remediation": "Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language.  This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]\nUse an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173).\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\n                  \n\n                  \nWhen your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.\nBe especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow.\nDirectly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\n\n                  \nWhen exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3378,
  "fields": {
    "name": "Exposure of Sensitive Information to an Unauthorized Actor",
    "description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.",
    "tag": "CWE-200",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3379,
  "fields": {
    "name": "Insertion of Sensitive Information Into Sent Data",
    "description": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.",
    "tag": "CWE-201",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sensitive data may be exposed to attackers.",
    "remediation": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data.\nEnsure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent.\nSetup default error messages so that unexpected errors do not disclose sensitive information.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3380,
  "fields": {
    "name": "Exposure of Sensitive Information Through Data Queries",
    "description": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics.",
    "tag": "CWE-202",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sensitive information may possibly be leaked through data queries accidentally.",
    "remediation": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3381,
  "fields": {
    "name": "Observable Discrepancy",
    "description": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
    "tag": "CWE-203",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system.\nWhen cryptographic primitives are vulnerable to side-channel-attacks, this could be used to reveal unencrypted plaintext in the worst case.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3382,
  "fields": {
    "name": "Observable Response Discrepancy",
    "description": "The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.",
    "tag": "CWE-204",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3383,
  "fields": {
    "name": "Observable Behavioral Discrepancy",
    "description": "The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.",
    "tag": "CWE-205",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3384,
  "fields": {
    "name": "Observable Internal Behavioral Discrepancy",
    "description": "The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.",
    "tag": "CWE-206",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3385,
  "fields": {
    "name": "Observable Behavioral Discrepancy With Equivalent Products",
    "description": "The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.",
    "tag": "CWE-207",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3386,
  "fields": {
    "name": "Observable Timing Discrepancy",
    "description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.",
    "tag": "CWE-208",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3387,
  "fields": {
    "name": "Generation of Error Message Containing Sensitive Information",
    "description": "The product generates an error message that includes sensitive information about its environment, users, or associated data.",
    "tag": "CWE-209",
    "cvss": null,
    "risk_rating": "",
    "impact": "Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server.",
    "remediation": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user.\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.\nDebugging information should not make its way into a production release.\nDebugging information should not make its way into a production release.\nWhere available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function.\nCreate default error pages or messages that do not leak any information.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3388,
  "fields": {
    "name": "Self-generated Error Message Containing Sensitive Information",
    "description": "The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.",
    "tag": "CWE-210",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Debugging information should not make its way into a production release.\nDebugging information should not make its way into a production release.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3389,
  "fields": {
    "name": "Externally-Generated Error Message Containing Sensitive Information",
    "description": "The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.",
    "tag": "CWE-211",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors.\nDebugging information should not make its way into a production release.\nDebugging information should not make its way into a production release.\nHandle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary.\nThe best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3390,
  "fields": {
    "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
    "description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.",
    "tag": "CWE-212",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack.",
    "remediation": "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties.\n\n                  \nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.\nAvoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3391,
  "fields": {
    "name": "Exposure of Sensitive Information Due to Incompatible Policies",
    "description": "The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.",
    "tag": "CWE-213",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3392,
  "fields": {
    "name": "Invocation of Process Using Visible Sensitive Information",
    "description": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.",
    "tag": "CWE-214",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3393,
  "fields": {
    "name": "Insertion of Sensitive Information Into Debugging Code",
    "description": "The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.",
    "tag": "CWE-215",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3394,
  "fields": {
    "name": "DEPRECATED: Containment Errors (Container Errors)",
    "description": "This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the \"container\" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.",
    "tag": "CWE-216",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3395,
  "fields": {
    "name": "DEPRECATED: Failure to Protect Stored Data from Modification",
    "description": "This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.",
    "tag": "CWE-217",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3396,
  "fields": {
    "name": "DEPRECATED: Failure to provide confidentiality for stored data",
    "description": "This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.",
    "tag": "CWE-218",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3397,
  "fields": {
    "name": "Storage of File with Sensitive Data Under Web Root",
    "description": "The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.",
    "tag": "CWE-219",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid storing information under the web root directory.\nAccess control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3398,
  "fields": {
    "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.",
    "tag": "CWE-22",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.",
    "remediation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\n                  \n\n                  \n\n                  \n\n                  \nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3399,
  "fields": {
    "name": "Storage of File With Sensitive Data Under FTP Root",
    "description": "The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.",
    "tag": "CWE-220",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid storing information under the FTP root directory.\nAccess control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3400,
  "fields": {
    "name": "Information Loss or Omission",
    "description": "The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.",
    "tag": "CWE-221",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3401,
  "fields": {
    "name": "Truncation of Security-relevant Information",
    "description": "The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.",
    "tag": "CWE-222",
    "cvss": null,
    "risk_rating": "",
    "impact": "The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3402,
  "fields": {
    "name": "Omission of Security-relevant Information",
    "description": "The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.",
    "tag": "CWE-223",
    "cvss": null,
    "risk_rating": "",
    "impact": "The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3403,
  "fields": {
    "name": "Obscured Security-relevant Information by Alternate Name",
    "description": "The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.",
    "tag": "CWE-224",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3404,
  "fields": {
    "name": "DEPRECATED: General Information Management Problems",
    "description": "This weakness can be found at CWE-199.",
    "tag": "CWE-225",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3405,
  "fields": {
    "name": "Sensitive Information in Resource Not Removed Before Reuse",
    "description": "The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.",
    "tag": "CWE-226",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.\nWhen releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though \"logical\" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3406,
  "fields": {
    "name": "Improper Handling of Syntactically Invalid Structure",
    "description": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.",
    "tag": "CWE-228",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3407,
  "fields": {
    "name": "Improper Handling of Values",
    "description": "The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.",
    "tag": "CWE-229",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3408,
  "fields": {
    "name": "Relative Path Traversal",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.",
    "tag": "CWE-23",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3409,
  "fields": {
    "name": "Improper Handling of Missing Values",
    "description": "The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.",
    "tag": "CWE-230",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3410,
  "fields": {
    "name": "Improper Handling of Extra Values",
    "description": "The product does not handle or incorrectly handles when more values are provided than expected.",
    "tag": "CWE-231",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3411,
  "fields": {
    "name": "Improper Handling of Undefined Values",
    "description": "The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.",
    "tag": "CWE-232",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3412,
  "fields": {
    "name": "Improper Handling of Parameters",
    "description": "The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.",
    "tag": "CWE-233",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3413,
  "fields": {
    "name": "Failure to Handle Missing Parameter",
    "description": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.",
    "tag": "CWE-234",
    "cvss": null,
    "risk_rating": "",
    "impact": "There is the potential for arbitrary code execution with privileges of the vulnerable program if function parameter list is exhausted.\nPotentially a program could fail if it needs more arguments then are available.",
    "remediation": "This issue can be simply combated with the use of proper build process.\nForward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3414,
  "fields": {
    "name": "Improper Handling of Extra Parameters",
    "description": "The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.",
    "tag": "CWE-235",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3415,
  "fields": {
    "name": "Improper Handling of Undefined Parameters",
    "description": "The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.",
    "tag": "CWE-236",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3416,
  "fields": {
    "name": "Improper Handling of Structural Elements",
    "description": "The product does not handle or incorrectly handles inputs that are related to complex structures.",
    "tag": "CWE-237",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3417,
  "fields": {
    "name": "Improper Handling of Incomplete Structural Elements",
    "description": "The product does not handle or incorrectly handles when a particular structural element is not completely specified.",
    "tag": "CWE-238",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3418,
  "fields": {
    "name": "Failure to Handle Incomplete Element",
    "description": "The product does not properly handle when a particular element is not completely specified.",
    "tag": "CWE-239",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3419,
  "fields": {
    "name": "Path Traversal: '../filedir'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-24",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3420,
  "fields": {
    "name": "Improper Handling of Inconsistent Structural Elements",
    "description": "The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.",
    "tag": "CWE-240",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3421,
  "fields": {
    "name": "Improper Handling of Unexpected Data Type",
    "description": "The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).",
    "tag": "CWE-241",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3422,
  "fields": {
    "name": "Use of Inherently Dangerous Function",
    "description": "The product calls a function that can never be guaranteed to work safely.",
    "tag": "CWE-242",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ban the use of dangerous functions. Use their safe equivalent.\nUse grep or static analysis tools to spot usage of dangerous functions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3423,
  "fields": {
    "name": "Creation of chroot Jail Without Changing Working Directory",
    "description": "The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.",
    "tag": "CWE-243",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3424,
  "fields": {
    "name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
    "description": "Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.",
    "tag": "CWE-244",
    "cvss": null,
    "risk_rating": "",
    "impact": "Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3425,
  "fields": {
    "name": "J2EE Bad Practices: Direct Management of Connections",
    "description": "The J2EE application directly manages connections, instead of using the container's connection management facilities.",
    "tag": "CWE-245",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3426,
  "fields": {
    "name": "J2EE Bad Practices: Direct Use of Sockets",
    "description": "The J2EE application directly uses sockets instead of using framework method calls.",
    "tag": "CWE-246",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use framework method calls instead of using sockets directly.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3427,
  "fields": {
    "name": "DEPRECATED: Reliance on DNS Lookups in a Security Decision",
    "description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.",
    "tag": "CWE-247",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3428,
  "fields": {
    "name": "Uncaught Exception",
    "description": "An exception is thrown from a function, but it is not caught.",
    "tag": "CWE-248",
    "cvss": null,
    "risk_rating": "",
    "impact": "An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3429,
  "fields": {
    "name": "DEPRECATED: Often Misused: Path Manipulation",
    "description": "This entry has been deprecated because of name\n\tconfusion and an accidental combination of multiple\n\tweaknesses. Most of its content has been transferred to\n\tCWE-785.",
    "tag": "CWE-249",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3430,
  "fields": {
    "name": "Path Traversal: '/../filedir'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-25",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3431,
  "fields": {
    "name": "Execution with Unnecessary Privileges",
    "description": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
    "tag": "CWE-250",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data.",
    "remediation": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nIdentify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.\nIdentify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators.\nPerform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements.\nWhen dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed.\nIf circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place.\nEnsure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3432,
  "fields": {
    "name": "Unchecked Return Value",
    "description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
    "tag": "CWE-252",
    "cvss": null,
    "risk_rating": "",
    "impact": "An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.",
    "remediation": "Check the results of all functions that return a value and verify that the value is expected.\nEnsure that you account for all possible return values from the function.\nWhen designing a function, make sure you return a value or throw an exception in case of an error.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3433,
  "fields": {
    "name": "Incorrect Check of Function Return Value",
    "description": "The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.",
    "tag": "CWE-253",
    "cvss": null,
    "risk_rating": "",
    "impact": "An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors.",
    "remediation": "Use a language or compiler that uses exceptions and requires the catching of those exceptions.\nProperly check all functions which return a value.\nWhen designing any function make sure you return a value or throw an exception in case of an error.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3434,
  "fields": {
    "name": "Plaintext Storage of a Password",
    "description": "Storing a password in plaintext may result in a system compromise.",
    "tag": "CWE-256",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid storing passwords in easily accessible locations.\nConsider storing cryptographic hashes of passwords as an alternative to storing in plaintext.\nA programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3435,
  "fields": {
    "name": "Storing Passwords in a Recoverable Format",
    "description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.",
    "tag": "CWE-257",
    "cvss": null,
    "risk_rating": "",
    "impact": "User's passwords may be revealed.\nRevealed passwords may be reused elsewhere to impersonate the users in question.",
    "remediation": "Use strong, non-reversible encryption to protect stored passwords.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3436,
  "fields": {
    "name": "Empty Password in Configuration File",
    "description": "Using an empty string as a password is insecure.",
    "tag": "CWE-258",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3437,
  "fields": {
    "name": "Use of Hard-coded Password",
    "description": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.",
    "tag": "CWE-259",
    "cvss": null,
    "risk_rating": "",
    "impact": "If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question.",
    "remediation": "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible.\nFor inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password.\nPerform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3438,
  "fields": {
    "name": "Path Traversal: '/dir/../filename'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/dir/../filename\" sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-26",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3439,
  "fields": {
    "name": "Password in Configuration File",
    "description": "The product stores a password in a configuration file that might be accessible to actors who do not know the password.",
    "tag": "CWE-260",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid storing passwords in easily accessible locations.\nConsider storing cryptographic hashes of passwords as an alternative to storing in plaintext.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3440,
  "fields": {
    "name": "Weak Encoding for Password",
    "description": "Obscuring a password with a trivial encoding does not protect the password.",
    "tag": "CWE-261",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3441,
  "fields": {
    "name": "Not Using Password Aging",
    "description": "The product does not have a mechanism in place for managing password aging.",
    "tag": "CWE-262",
    "cvss": null,
    "risk_rating": "",
    "impact": "As passwords age, the probability that they are compromised grows.",
    "remediation": "As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords.\nDevelopers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3442,
  "fields": {
    "name": "Password Aging with Long Expiration",
    "description": "The product supports password aging, but the expiration period is too long.",
    "tag": "CWE-263",
    "cvss": null,
    "risk_rating": "",
    "impact": "As passwords age, the probability that they are compromised grows.",
    "remediation": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords.\nEnsure that the user is notified several times leading up to the password expiration.\nCreate mechanisms to prevent users from reusing passwords or creating similar passwords.\nDevelopers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3443,
  "fields": {
    "name": "Incorrect Privilege Assignment",
    "description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.",
    "tag": "CWE-266",
    "cvss": null,
    "risk_rating": "",
    "impact": "A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.",
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3444,
  "fields": {
    "name": "Privilege Defined With Unsafe Actions",
    "description": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity.",
    "tag": "CWE-267",
    "cvss": null,
    "risk_rating": "",
    "impact": "A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts.",
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3445,
  "fields": {
    "name": "Privilege Chaining",
    "description": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination.",
    "tag": "CWE-268",
    "cvss": null,
    "risk_rating": "",
    "impact": "A user can be given or gain access rights of another user. This can give the user unauthorized access to sensitive information including the access information of another user.",
    "remediation": "Consider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.\nVery carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3446,
  "fields": {
    "name": "Improper Privilege Management",
    "description": "The product does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
    "tag": "CWE-269",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nFollow the principle of least privilege when assigning access rights to entities in a software system.\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3448,
  "fields": {
    "name": "Privilege Context Switching Error",
    "description": "The product does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control.",
    "tag": "CWE-270",
    "cvss": null,
    "risk_rating": "",
    "impact": "A user can assume the identity of another user with separate privileges in another context. This will give the user unauthorized access that may allow them to acquire the access information of other users.",
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3449,
  "fields": {
    "name": "Privilege Dropping / Lowering Errors",
    "description": "The product does not drop privileges before passing control of a resource to an actor that does not have those privileges.",
    "tag": "CWE-271",
    "cvss": null,
    "risk_rating": "",
    "impact": "If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.\nIf privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.",
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3450,
  "fields": {
    "name": "Least Privilege Violation",
    "description": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.",
    "tag": "CWE-272",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to access resources with the elevated privilege that could not be accessed with the attacker's original privileges. This is particularly likely in conjunction with another flaw, such as a buffer overflow.",
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nFollow the principle of least privilege when assigning access rights to entities in a software system.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3451,
  "fields": {
    "name": "Improper Check for Dropped Privileges",
    "description": "The product attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded.",
    "tag": "CWE-273",
    "cvss": null,
    "risk_rating": "",
    "impact": "If privileges are not dropped, neither are access rights of the user. Often these rights can be prevented from being dropped.\nIf privileges are not dropped, in some cases the system may record actions as the user which is being impersonated rather than the impersonator.",
    "remediation": "Check the results of all functions that return a value and verify that the value is expected.\nIn Windows, make sure that the process token has the SeImpersonatePrivilege(Microsoft Server 2003). Code that relies on impersonation for security must ensure that the impersonation succeeded, i.e., that a proper privilege demotion happened.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3452,
  "fields": {
    "name": "Improper Handling of Insufficient Privileges",
    "description": "The product does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses.",
    "tag": "CWE-274",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3453,
  "fields": {
    "name": "Incorrect Default Permissions",
    "description": "During installation, installed file permissions are set to allow anyone to modify those files.",
    "tag": "CWE-276",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The architecture needs to access and modification attributes for files to only those users who actually require those actions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3454,
  "fields": {
    "name": "Insecure Inherited Permissions",
    "description": "A product defines a set of insecure permissions that are inherited by objects that are created by the program.",
    "tag": "CWE-277",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3455,
  "fields": {
    "name": "Insecure Preserved Inherited Permissions",
    "description": "A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement.",
    "tag": "CWE-278",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3456,
  "fields": {
    "name": "Incorrect Execution-Assigned Permissions",
    "description": "While it is executing, the product sets the permissions of an object in a way that violates the intended permissions that have been specified by the user.",
    "tag": "CWE-279",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3457,
  "fields": {
    "name": "Path Traversal: '..\\filedir'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"..\\\" sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-28",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3458,
  "fields": {
    "name": "Improper Handling of Insufficient Permissions or Privileges ",
    "description": "The product does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the product in an invalid state.",
    "tag": "CWE-280",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always check to see if you have successfully accessed a resource or system functionality, and use proper error handling if it is unsuccessful. Do this even when you are operating in a highly privileged mode, because errors or environmental conditions might still cause a failure. For example, environments with highly granular permissions/privilege models, such as Windows or Linux capabilities, can cause unexpected failures.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3459,
  "fields": {
    "name": "Improper Preservation of Permissions",
    "description": "The product does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended.",
    "tag": "CWE-281",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3460,
  "fields": {
    "name": "Improper Ownership Management",
    "description": "The product assigns the wrong ownership, or does not properly verify the ownership, of an object or resource.",
    "tag": "CWE-282",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3461,
  "fields": {
    "name": "Unverified Ownership",
    "description": "The product does not properly verify that a critical resource is owned by the proper entity.",
    "tag": "CWE-283",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain unauthorized access to system resources.",
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.\nConsider following the principle of separation of privilege. Require multiple conditions to be met before permitting access to a system resource.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3462,
  "fields": {
    "name": "Improper Access Control",
    "description": "The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.",
    "tag": "CWE-284",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3463,
  "fields": {
    "name": "Improper Authorization",
    "description": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action.",
    "tag": "CWE-285",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could read sensitive data, either by reading the data directly from a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.\nAn attacker could modify sensitive data, either by writing the data directly to a data store that is not properly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.\nAn attacker could gain privileges by modifying or reading critical data directly, or by accessing insufficiently-protected, privileged functionality.",
    "remediation": "Ensure that you perform access control checks related to your business logic. These checks may be different than the access control checks that you apply to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor.\n\n                  \n\n                  \nUse the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3464,
  "fields": {
    "name": "Incorrect User Management",
    "description": "The product does not properly manage a user within its environment.",
    "tag": "CWE-286",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3465,
  "fields": {
    "name": "Improper Authentication",
    "description": "When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.",
    "tag": "CWE-287",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.",
    "remediation": "Use an authentication framework or library such as the OWASP ESAPI Authentication feature.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3466,
  "fields": {
    "name": "Authentication Bypass Using an Alternate Path or Channel",
    "description": "A product requires authentication, but the product has an alternate path or channel that does not require authentication.",
    "tag": "CWE-288",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Funnel all access through a single choke point to simplify how users can access a resource. For every access, perform a check to determine if the user has permissions to access the resource.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3467,
  "fields": {
    "name": "Authentication Bypass by Alternate Name",
    "description": "The product performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor.",
    "tag": "CWE-289",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3468,
  "fields": {
    "name": "Path Traversal: '\\..\\filename'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-29",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3469,
  "fields": {
    "name": "Authentication Bypass by Spoofing",
    "description": "This attack-focused weakness is caused by incorrectly implemented authentication schemes that are subject to spoofing attacks.",
    "tag": "CWE-290",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can allow an attacker to access resources which are not otherwise accessible without proper authentication.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3470,
  "fields": {
    "name": "Reliance on IP Address for Authentication",
    "description": "The product uses an IP address for authentication.",
    "tag": "CWE-291",
    "cvss": null,
    "risk_rating": "",
    "impact": "Malicious users can fake authentication information, impersonating any IP address.",
    "remediation": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3471,
  "fields": {
    "name": "DEPRECATED: Trusting Self-reported DNS Name",
    "description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.",
    "tag": "CWE-292",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3472,
  "fields": {
    "name": "Using Referer Field for Authentication",
    "description": "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking.",
    "tag": "CWE-293",
    "cvss": null,
    "risk_rating": "",
    "impact": "Actions, which may not be authorized otherwise, can be carried out as if they were validated by the server referred to.",
    "remediation": "In order to usefully check if a given action is authorized, some means of strong authentication and method protection must be used. Use other means of authorization that cannot be simply spoofed. Possibilities include a username/password or certificate.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3473,
  "fields": {
    "name": "Authentication Bypass by Capture-replay",
    "description": "A capture-replay flaw exists when the design of the product makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes).",
    "tag": "CWE-294",
    "cvss": null,
    "risk_rating": "",
    "impact": "Messages sent with a capture-relay attack allow access to resources which are not otherwise accessible without proper authentication.",
    "remediation": "Utilize some sequence or time stamping functionality along with a checksum which takes this into account in order to ensure that messages can be parsed only once.\nSince any attacker who can listen to traffic can see sequence numbers, it is necessary to sign messages with some kind of cryptography to ensure that sequence numbers are not simply doctored along with content.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3474,
  "fields": {
    "name": "Improper Certificate Validation",
    "description": "The product does not validate, or incorrectly validates, a certificate.",
    "tag": "CWE-295",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Certificates should be carefully managed and checked to assure that data are encrypted with the intended owner's public key.\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3475,
  "fields": {
    "name": "Improper Following of a Certificate's Chain of Trust",
    "description": "The product does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate.",
    "tag": "CWE-296",
    "cvss": null,
    "risk_rating": "",
    "impact": "Exploitation of this flaw can lead to the trust of data that may have originated with a spoofed source.\nData, requests, or actions taken by the attacking entity can be carried out as a spoofed benign entity.",
    "remediation": "Ensure that proper certificate checking is included in the system design.\nUnderstand, and properly implement all checks necessary to ensure the integrity of certificate trust integrity.\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the full chain of trust.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3476,
  "fields": {
    "name": "Improper Validation of Certificate with Host Mismatch",
    "description": "The product communicates with a host that provides a certificate, but the product does not properly ensure that the certificate is actually associated with that host.",
    "tag": "CWE-297",
    "cvss": null,
    "risk_rating": "",
    "impact": "The data read from the system vouched for by the certificate may not be from the expected system.\nTrust afforded to the system in question - based on the malicious certificate - may allow for spoofing or redirection attacks.",
    "remediation": "Fully check the hostname of the certificate and provide the user with adequate information about the nature of the problem and how to proceed.\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the hostname.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3477,
  "fields": {
    "name": "Improper Validation of Certificate Expiration",
    "description": "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age.",
    "tag": "CWE-298",
    "cvss": null,
    "risk_rating": "",
    "impact": "The data read from the system vouched for by the expired certificate may be flawed due to malicious spoofing.\nTrust afforded to the system in question - based on the expired certificate - may allow for spoofing attacks.",
    "remediation": "Check for expired certificates and provide the user with adequate information about the nature of the problem and how to proceed.\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the expiration.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3478,
  "fields": {
    "name": "Improper Check for Certificate Revocation",
    "description": "The product does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised.",
    "tag": "CWE-299",
    "cvss": null,
    "risk_rating": "",
    "impact": "Trust may be assigned to an entity who is not who it claims to be.\nData from an untrusted (and possibly malicious) source may be integrated.\nData may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.",
    "remediation": "Ensure that certificates are checked for revoked status.\nIf certificate pinning is being used, ensure that all relevant properties of the certificate are fully validated before the certificate is pinned, including the revoked status.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3479,
  "fields": {
    "name": "Path Traversal: '\\dir\\..\\filename'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '\\dir\\..\\filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-30",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3480,
  "fields": {
    "name": "Channel Accessible by Non-Endpoint",
    "description": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint.",
    "tag": "CWE-300",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could pose as one of the entities and read or possibly modify the communication.",
    "remediation": "Always fully authenticate both ends of any communications channel.\nAdhere to the principle of complete mediation.\nA certificate binds an identity to a cryptographic key to authenticate a communicating party. Often, the certificate takes the encrypted form of the hash of the identity of the subject, the public key, and information such as time of issue or expiration using the issuer's private key. The certificate can be validated by deciphering the certificate with the issuer's public key. See also X.509 certificate signature chains and the PGP certification structure.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3481,
  "fields": {
    "name": "Reflection Attack in an Authentication Protocol",
    "description": "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user.",
    "tag": "CWE-301",
    "cvss": null,
    "risk_rating": "",
    "impact": "The primary result of reflection attacks is successful authentication with a target machine -- as an impersonated user.",
    "remediation": "Use different keys for the initiator and responder or of a different type of challenge for the initiator and responder.\nLet the initiator prove its identity before proceeding.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3482,
  "fields": {
    "name": "Authentication Bypass by Assumed-Immutable Data",
    "description": "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker.",
    "tag": "CWE-302",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implement proper protection for immutable data (e.g. environment variable, hidden form fields, etc.)",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3483,
  "fields": {
    "name": "Incorrect Implementation of Authentication Algorithm",
    "description": "The requirements for the product dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect.",
    "tag": "CWE-303",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3484,
  "fields": {
    "name": "Missing Critical Step in Authentication",
    "description": "The product implements an authentication technique, but it skips a step that weakens the technique.",
    "tag": "CWE-304",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or allowing attackers to execute arbitrary code.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3485,
  "fields": {
    "name": "Authentication Bypass by Primary Weakness",
    "description": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error.",
    "tag": "CWE-305",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3486,
  "fields": {
    "name": "Missing Authentication for Critical Function",
    "description": "The product does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources.",
    "tag": "CWE-306",
    "cvss": null,
    "risk_rating": "",
    "impact": "Exposing critical functionality essentially provides an attacker with the privilege level of that functionality. The consequences will depend on the associated functionality, but they can range from reading or modifying sensitive data, access to administrative or other privileged functionality, or possibly even execution of arbitrary code.",
    "remediation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \n\n                  \nWhen storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to require strong authentication for users who should be allowed to access the data [REF-1297] [REF-1298] [REF-1302].",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3487,
  "fields": {
    "name": "Improper Restriction of Excessive Authentication Attempts",
    "description": "The product does not implement sufficient measures to prevent multiple failed authentication attempts within a short time frame, making it more susceptible to brute force attacks.",
    "tag": "CWE-307",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could perform an arbitrary number of authentication attempts using different passwords, and eventually gain access to the targeted account.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3488,
  "fields": {
    "name": "Use of Single-factor Authentication",
    "description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme.",
    "tag": "CWE-308",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the secret in a single-factor authentication scheme gets compromised, full authentication is possible.",
    "remediation": "Use multiple independent authentication schemes, which ensures that -- if one of the methods is compromised -- the system itself is still likely safe from compromise.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3489,
  "fields": {
    "name": "Use of Password System for Primary Authentication",
    "description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.",
    "tag": "CWE-309",
    "cvss": null,
    "risk_rating": "",
    "impact": "A password authentication mechanism error will almost always result in attackers being authorized as valid users.",
    "remediation": "Use a zero-knowledge password protocol, such as SRP.\nEnsure that passwords are stored safely and are not reversible.\nImplement password aging functionality that requires passwords be changed after a certain point.\nUse a mechanism for determining the strength of a password and notify the user of weak password use.\nInform the user of why password protections are in place, how they work to protect data integrity, and why it is important to heed their warnings.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3490,
  "fields": {
    "name": "Path Traversal: 'dir\\..\\..\\filename'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir\\..\\..\\filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-31",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3491,
  "fields": {
    "name": "Missing Encryption of Sensitive Data",
    "description": "The product does not encrypt sensitive or critical information before storage or transmission.",
    "tag": "CWE-311",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the application does not use a secure channel, such as SSL, to exchange sensitive information, it is possible for an attacker with access to the network traffic to sniff packets from the connection and uncover the data. This attack is not technically difficult, but does require physical access to some portion of the network over which the sensitive data travels. This access is usually somewhere near where the user is connected to the network (such as a colleague on the company network) but can be anywhere along the path from the user to the end server.\nOmitting the use of encryption in any program which transfers data over a network of any kind should be considered on par with delivering the data sent to each user on the local networks of both the sender and receiver. Worse, this omission allows for the injection of data into a stream of communication between two parties -- with no means for the victims to separate valid data from invalid. In this day of widespread network attacks and password collection sniffers, it is an unnecessary risk to omit encryption from the design of any system which might benefit from it.",
    "remediation": "Clearly specify which data or resources are valuable enough that they should be protected by encryption. Require that any transmission or storage of this data/resource should use well-vetted encryption algorithms.\n\n                  \n\n                  \n\n                  \nWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.\nUse naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3492,
  "fields": {
    "name": "Cleartext Storage of Sensitive Information",
    "description": "The product stores sensitive information in cleartext within a resource that might be accessible to another control sphere.",
    "tag": "CWE-312",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker with access to the system could read sensitive information stored in cleartext.",
    "remediation": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to encrypt the data at rest. [REF-1297] [REF-1299] [REF-1301]",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3493,
  "fields": {
    "name": "Cleartext Storage in a File or on Disk",
    "description": "The product stores sensitive information in cleartext in a file, or on disk.",
    "tag": "CWE-313",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3494,
  "fields": {
    "name": "Cleartext Storage in the Registry",
    "description": "The product stores sensitive information in cleartext in the registry.",
    "tag": "CWE-314",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3495,
  "fields": {
    "name": "Cleartext Storage of Sensitive Information in a Cookie",
    "description": "The product stores sensitive information in cleartext in a cookie.",
    "tag": "CWE-315",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3496,
  "fields": {
    "name": "Cleartext Storage of Sensitive Information in Memory",
    "description": "The product stores sensitive information in cleartext in memory.",
    "tag": "CWE-316",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3497,
  "fields": {
    "name": "Cleartext Storage of Sensitive Information in GUI",
    "description": "The product stores sensitive information in cleartext within the GUI.",
    "tag": "CWE-317",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3498,
  "fields": {
    "name": "Cleartext Storage of Sensitive Information in Executable",
    "description": "The product stores sensitive information in cleartext in an executable.",
    "tag": "CWE-318",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3499,
  "fields": {
    "name": "Cleartext Transmission of Sensitive Information",
    "description": "The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.",
    "tag": "CWE-319",
    "cvss": null,
    "risk_rating": "",
    "impact": "Anyone can read the information by gaining access to the channel being used for communication.",
    "remediation": "Before transmitting, encrypt the data using reliable, confidentiality-protecting cryptographic protocols.\nWhen using web applications with SSL, use SSL for the entire session from login to logout, not just for the initial login page.\nWhen designing hardware platforms, ensure that approved encryption algorithms (such as those recommended by NIST) protect paths from security critical data to trusted user applications.\nUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.\nConfigure servers to use encrypted channels for communication, which may include SSL or other secure protocols.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3500,
  "fields": {
    "name": "Path Traversal: '...' (Triple Dot)",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-32",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3501,
  "fields": {
    "name": "Use of Hard-coded Cryptographic Key",
    "description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered.",
    "tag": "CWE-321",
    "cvss": null,
    "risk_rating": "",
    "impact": "If hard-coded cryptographic keys are used, it is almost certain that malicious users will gain access through the account in question.",
    "remediation": "Prevention schemes mirror that of hard-coded password storage.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3502,
  "fields": {
    "name": "Key Exchange without Entity Authentication",
    "description": "The product performs a key exchange with an actor without verifying the identity of that actor.",
    "tag": "CWE-322",
    "cvss": null,
    "risk_rating": "",
    "impact": "No authentication takes place in this process, bypassing an assumed protection of encryption.\nThe encrypted communication between a user and a trusted host may be subject to sniffing by any actor in the communication path.",
    "remediation": "Ensure that proper authentication is included in the system design.\nUnderstand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3503,
  "fields": {
    "name": "Reusing a Nonce, Key Pair in Encryption",
    "description": "Nonces should be used for the present occasion and only once.",
    "tag": "CWE-323",
    "cvss": null,
    "risk_rating": "",
    "impact": "Potentially a replay attack, in which an attacker could send the same data twice, could be crafted if nonces are allowed to be reused. This could allow a user to send a message which masquerades as a valid message from a valid user.",
    "remediation": "Refuse to reuse nonce values.\nUse techniques such as requiring incrementing, time based and/or challenge response to assure uniqueness of nonces.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3504,
  "fields": {
    "name": "Use of a Key Past its Expiration Date",
    "description": "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key.",
    "tag": "CWE-324",
    "cvss": null,
    "risk_rating": "",
    "impact": "The cryptographic key in question may be compromised, providing a malicious user with a method for authenticating as the victim.",
    "remediation": "Adequate consideration should be put in to the user interface in order to notify users previous to the key's expiration, to explain the importance of new key generation and to walk users through the process as painlessly as possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3505,
  "fields": {
    "name": "Missing Cryptographic Step",
    "description": "The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm.",
    "tag": "CWE-325",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3506,
  "fields": {
    "name": "Inadequate Encryption Strength",
    "description": "The product stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required.",
    "tag": "CWE-326",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to decrypt the data using brute force attacks.",
    "remediation": "Use an encryption scheme that is currently considered to be strong by experts in the field.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3507,
  "fields": {
    "name": "Use of a Broken or Risky Cryptographic Algorithm",
    "description": "The product uses a broken or risky cryptographic algorithm or protocol.",
    "tag": "CWE-327",
    "cvss": null,
    "risk_rating": "",
    "impact": "The confidentiality of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.\nThe integrity of sensitive data may be compromised by the use of a broken or risky cryptographic algorithm.\nIf the cryptographic algorithm is used to ensure the identity of the source of the data (such as digital signatures), then a broken algorithm will compromise this scheme and the source of the data cannot be proven.",
    "remediation": "Ensure that the design allows one cryptographic algorithm to be replaced with another in the next generation or version. Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. With hardware, design the product at the Intellectual Property (IP) level so that one cryptographic algorithm can be replaced with another in the next generation of the hardware product.\nCarefully manage and protect cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography itself is irrelevant.\n\n                  \nWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3508,
  "fields": {
    "name": "Use of Weak Hash",
    "description": "The product uses an algorithm that produces a digest (output value) that does not meet security expectations for a hash function that allows an adversary to reasonably determine the original input (preimage attack), find another input that can produce the same hash (2nd preimage attack), or find multiple inputs that evaluate to the same hash (birthday attack).",
    "tag": "CWE-328",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3509,
  "fields": {
    "name": "Generation of Predictable IV with CBC Mode",
    "description": "The product generates and uses a predictable initialization Vector (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible to dictionary attacks when they are encrypted under the same key.",
    "tag": "CWE-329",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the IV is not properly initialized, data that is encrypted can be compromised and leak information.",
    "remediation": "NIST recommends two methods of generating unpredictable IVs for CBC mode [REF-1172]. The first is to generate the IV randomly. The second method is to encrypt a nonce with the same key and cipher to be used to encrypt the plaintext. In this case the nonce must be unique but can be predictable, since the block cipher will act as a pseudo random permutation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3510,
  "fields": {
    "name": "Path Traversal: '....' (Multiple Dot)",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-33",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3511,
  "fields": {
    "name": "Use of Insufficiently Random Values",
    "description": "The product uses insufficiently random numbers or values in a security context that depends on unpredictable numbers.",
    "tag": "CWE-330",
    "cvss": null,
    "risk_rating": "",
    "impact": "When a protection mechanism relies on random values to restrict access to a sensitive resource, such as a session ID or a seed for generating a cryptographic key, then the resource being protected could be accessed by guessing the ID or key.\nIf product relies on unique, unguessable IDs to identify a resource, an attacker might be able to guess an ID for a resource that is owned by another user. The attacker could then read the resource, or pre-create a resource with the same ID to prevent the legitimate program from properly sending the resource to the intended user. For example, a product might maintain session information in a file whose name is based on a username. An attacker could pre-create this file for a victim user, then set the permissions so that the application cannot generate the session for the victim, preventing the victim from using the application.\nWhen an authorization or authentication mechanism relies on random values to restrict access to restricted functionality, such as a session ID or a seed for generating a cryptographic key, then an attacker may access the restricted functionality by guessing the ID or key.",
    "remediation": "Consider a PRNG that re-seeds itself as needed from high quality pseudo-random output sources, such as hardware devices.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3512,
  "fields": {
    "name": "Insufficient Entropy",
    "description": "The product uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others.",
    "tag": "CWE-331",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could guess the random numbers generated and could gain unauthorized access to a system if the random numbers are used for authentication and authorization.",
    "remediation": "Determine the necessary entropy to adequately provide for randomness and predictability. This can be achieved by increasing the number of bits of objects such as keys and seeds.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3513,
  "fields": {
    "name": "Insufficient Entropy in PRNG",
    "description": "The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat.",
    "tag": "CWE-332",
    "cvss": null,
    "risk_rating": "",
    "impact": "If a pseudo-random number generator is using a limited entropy source which runs out (if the generator fails closed), the program may pause or crash.\nIf a PRNG is using a limited entropy source which runs out, and the generator fails open, the generator could produce predictable random numbers. Potentially a weak source of random numbers could weaken the encryption method used for authentication of users.",
    "remediation": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nConsider a PRNG that re-seeds itself as needed from high-quality pseudo-random output, such as hardware devices.\nWhen deciding which PRNG to use, look at its sources of entropy. Depending on what your security needs are, you may need to use a random number generator that always uses strong random data -- i.e., a random number generator that attempts to be strong but will fail in a weak way or will always provide some middle ground of protection through techniques like re-seeding. Generally, something that always provides a predictable amount of strength is preferable.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3514,
  "fields": {
    "name": "Improper Handling of Insufficient Entropy in TRNG",
    "description": "True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block.",
    "tag": "CWE-333",
    "cvss": null,
    "risk_rating": "",
    "impact": "A program may crash or block if it runs out of random numbers.",
    "remediation": "Rather than failing on a lack of random numbers, it is often preferable to wait for more numbers to be created.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3515,
  "fields": {
    "name": "Small Space of Random Values",
    "description": "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks.",
    "tag": "CWE-334",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could easily guess the values used. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.",
    "remediation": "Use products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3516,
  "fields": {
    "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
    "description": "The product uses a Pseudo-Random Number Generator (PRNG) but does not correctly manage seeds.",
    "tag": "CWE-335",
    "cvss": null,
    "risk_rating": "",
    "impact": "If a PRNG is used incorrectly, such as using the same seed for each initialization or using a predictable seed, then an attacker may be able to easily guess the seed and thus the random numbers. This could lead to unauthorized access to a system if the seed is used for authentication and authorization.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3517,
  "fields": {
    "name": "Same Seed in Pseudo-Random Number Generator (PRNG)",
    "description": "A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized.",
    "tag": "CWE-336",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not reuse PRNG seeds. Consider a PRNG that periodically re-seeds itself as needed from a high quality pseudo-random output, such as hardware devices.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3518,
  "fields": {
    "name": "Predictable Seed in Pseudo-Random Number Generator (PRNG)",
    "description": "A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time.",
    "tag": "CWE-337",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use non-predictable inputs for seed generation.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.\nUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3519,
  "fields": {
    "name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
    "description": "The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong.",
    "tag": "CWE-338",
    "cvss": null,
    "risk_rating": "",
    "impact": "If a PRNG is used for authentication and authorization, such as a session ID or a seed for generating a cryptographic key, then an attacker may be able to easily guess the ID or cryptographic key and gain access to restricted functionality.",
    "remediation": "Use functions or hardware which use a hardware-based random number generation for all crypto. This is the recommended solution. Use CyptGenRandom on Windows, or hw_rand() on Linux.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3520,
  "fields": {
    "name": "Small Seed Space in PRNG",
    "description": "A Pseudo-Random Number Generator (PRNG) uses a relatively small seed space, which makes it more susceptible to brute force attacks.",
    "tag": "CWE-339",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use well vetted pseudo-random number generating algorithms with adequate length seeds. Pseudo-random number generators can produce predictable numbers if the generator is known and the seed can be guessed. A 256-bit seed is a good starting point for producing a \"random enough\" number.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems, or use the more recent FIPS 140-3 [REF-1192] if possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3521,
  "fields": {
    "name": "Path Traversal: '....//'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-34",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3522,
  "fields": {
    "name": "Generation of Predictable Numbers or Identifiers",
    "description": "The product uses a scheme that generates numbers or identifiers that are more predictable than required.",
    "tag": "CWE-340",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3523,
  "fields": {
    "name": "Predictable from Observable State",
    "description": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc.",
    "tag": "CWE-341",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness could be exploited by an attacker in a number ways depending on the context. If a predictable number is used to generate IDs or keys that are used within protection mechanisms, then an attacker could gain unauthorized access to the system. If predictable filenames are used for storing sensitive information, then an attacker might gain access to the system and may be able to gain access to the information in the file.",
    "remediation": "Increase the entropy used to seed a PRNG.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3524,
  "fields": {
    "name": "Predictable Exact Value from Previous Values",
    "description": "An exact value or random number can be precisely predicted by observing previous values.",
    "tag": "CWE-342",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Increase the entropy used to seed a PRNG.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3525,
  "fields": {
    "name": "Predictable Value Range from Previous Values",
    "description": "The product's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated.",
    "tag": "CWE-343",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Increase the entropy used to seed a PRNG.\nUse products or modules that conform to FIPS 140-2 [REF-267] to avoid obvious entropy problems. Consult FIPS 140-2 Annex C (\"Approved Random Number Generators\").\nUse a PRNG that periodically re-seeds itself using input from high-quality sources, such as hardware devices with high entropy. However, do not re-seed too frequently, or else the entropy source might block.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3526,
  "fields": {
    "name": "Use of Invariant Value in Dynamically Changing Context",
    "description": "The product uses a constant value, name, or reference, but this value can (or should) vary across different environments.",
    "tag": "CWE-344",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3527,
  "fields": {
    "name": "Insufficient Verification of Data Authenticity",
    "description": "The product does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.",
    "tag": "CWE-345",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3528,
  "fields": {
    "name": "Origin Validation Error",
    "description": "The product does not properly verify that the source of data or communication is valid.",
    "tag": "CWE-346",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker can access any functionality that is inadvertently accessible to the source.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3529,
  "fields": {
    "name": "Improper Verification of Cryptographic Signature",
    "description": "The product does not verify, or incorrectly verifies, the cryptographic signature for data.",
    "tag": "CWE-347",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain access to sensitive data and possibly execute unauthorized code.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3530,
  "fields": {
    "name": "Use of Less Trusted Source",
    "description": "The product has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack.",
    "tag": "CWE-348",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could utilize the untrusted data source to bypass protection mechanisms and gain access to sensitive data.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3531,
  "fields": {
    "name": "Acceptance of Extraneous Untrusted Data With Trusted Data",
    "description": "The product, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted.",
    "tag": "CWE-349",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could package untrusted data with trusted data to bypass protection mechanisms to gain access to and possibly modify sensitive data.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3532,
  "fields": {
    "name": "Path Traversal: '.../...//'",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory.",
    "tag": "CWE-35",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3533,
  "fields": {
    "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
    "description": "The product performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname.",
    "tag": "CWE-350",
    "cvss": null,
    "risk_rating": "",
    "impact": "Malicious users can fake authentication information by providing false DNS information.",
    "remediation": "Use other means of identity verification that cannot be simply spoofed. Possibilities include a username/password or certificate.\nPerform proper forward and reverse DNS lookups to detect DNS spoofing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3534,
  "fields": {
    "name": "Insufficient Type Distinction",
    "description": "The product does not properly distinguish between different types of elements in a way that leads to insecure behavior.",
    "tag": "CWE-351",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3535,
  "fields": {
    "name": "Cross-Site Request Forgery (CSRF)",
    "description": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request.",
    "tag": "CWE-352",
    "cvss": null,
    "risk_rating": "",
    "impact": "The consequences will vary depending on the nature of the functionality that is vulnerable to CSRF. An attacker could effectively perform any operations as the victim. If the victim is an administrator or privileged user, the consequences may include obtaining complete control over the web application - deleting or stealing data, uninstalling the product, or using it to launch other attacks against all of the product's users. Because the attacker has the identity of the victim, the scope of CSRF is limited only by the victim's privileges.",
    "remediation": "Ensure that the application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330). [REF-332]\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\n\n                  \nDo not use the GET method for any request that triggers a state change.\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3536,
  "fields": {
    "name": "Missing Support for Integrity Check",
    "description": "The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.",
    "tag": "CWE-353",
    "cvss": null,
    "risk_rating": "",
    "impact": "Data that is parsed and used may be corrupted.\nWithout a checksum it is impossible to determine if any changes have been made to the data after it was sent.",
    "remediation": "Add an appropriately sized checksum to the protocol, ensuring that data received may be simply validated before it is parsed and used.\nEnsure that the checksums present in the protocol design are properly implemented and added to each message before it is sent.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3537,
  "fields": {
    "name": "Improper Validation of Integrity Check Value",
    "description": "The product does not validate or incorrectly validates the integrity check values or \"checksums\" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.",
    "tag": "CWE-354",
    "cvss": null,
    "risk_rating": "",
    "impact": "Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.\nData that is parsed and used may be corrupted.\nWithout a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.",
    "remediation": "Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3538,
  "fields": {
    "name": "Product UI does not Warn User of Unsafe Actions",
    "description": "The product's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system.",
    "tag": "CWE-356",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3539,
  "fields": {
    "name": "Insufficient UI Warning of Dangerous Operations",
    "description": "The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention.",
    "tag": "CWE-357",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3540,
  "fields": {
    "name": "Improperly Implemented Security Check for Standard",
    "description": "The product does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique.",
    "tag": "CWE-358",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3541,
  "fields": {
    "name": "Exposure of Private Personal Information to an Unauthorized Actor",
    "description": "The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.",
    "tag": "CWE-359",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3542,
  "fields": {
    "name": "Absolute Path Traversal",
    "description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as \"/abs/path\" that can resolve to a location that is outside of that directory.",
    "tag": "CWE-36",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3543,
  "fields": {
    "name": "Trust of System Event Data",
    "description": "Security based on event locations are insecure and can be spoofed.",
    "tag": "CWE-360",
    "cvss": null,
    "risk_rating": "",
    "impact": "If one trusts the system-event information and executes commands based on it, one could potentially take actions based on a spoofed identity.",
    "remediation": "Never trust or rely any of the information in an Event for security.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3544,
  "fields": {
    "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
    "description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
    "tag": "CWE-362",
    "cvss": null,
    "risk_rating": "",
    "impact": "When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400).\nWhen a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash.\nWhen a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59).",
    "remediation": "In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance.\nUse thread-safe capabilities such as the data access abstraction in Spring.\n\n                  \nWhen using multithreading and operating on shared variables, only use thread-safe functions.\nUse atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write.\nUse a mutex if available, but be sure to avoid related weaknesses such as CWE-412.\nAvoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization.\nDisable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop.\nUse the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3545,
  "fields": {
    "name": "Race Condition Enabling Link Following",
    "description": "The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.",
    "tag": "CWE-363",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3546,
  "fields": {
    "name": "Signal Handler Race Condition",
    "description": "The product uses a signal handler that introduces a race condition.",
    "tag": "CWE-364",
    "cvss": null,
    "risk_rating": "",
    "impact": "It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data.\nIf a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe.",
    "remediation": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nDesign signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop.\nOnly use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3547,
  "fields": {
    "name": "DEPRECATED: Race Condition in Switch",
    "description": "This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.",
    "tag": "CWE-365",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3548,
  "fields": {
    "name": "Race Condition within a Thread",
    "description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.",
    "tag": "CWE-366",
    "cvss": null,
    "risk_rating": "",
    "impact": "The main problem is that -- if a lock is overcome -- data could be altered in a bad state.",
    "remediation": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment.\nCreate resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3549,
  "fields": {
    "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
    "description": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.",
    "tag": "CWE-367",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker can gain access to otherwise unauthorized resources.\nRace conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question.\nThe resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user.\nIf a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur.\nIn some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files.",
    "remediation": "The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check.\nWhen the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement.\nLimit the interleaving of operations on files from multiple processes.\nIf you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed.\nRecheck the resource after the use call to verify that the action was taken appropriately.\nEnsure that some environmental locking mechanism can be used to protect resources effectively.\nEnsure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3550,
  "fields": {
    "name": "Context Switching Race Condition",
    "description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.",
    "tag": "CWE-368",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3551,
  "fields": {
    "name": "Divide By Zero",
    "description": "The product divides a value by zero.",
    "tag": "CWE-369",
    "cvss": null,
    "risk_rating": "",
    "impact": "A Divide by Zero results in a crash.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3552,
  "fields": {
    "name": "Path Traversal: '/absolute/pathname/here'",
    "description": "The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-37",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3553,
  "fields": {
    "name": "Missing Check for Certificate Revocation after Initial Check",
    "description": "The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.",
    "tag": "CWE-370",
    "cvss": null,
    "risk_rating": "",
    "impact": "Trust may be assigned to an entity who is not who it claims to be.\nData from an untrusted (and possibly malicious) source may be integrated.\nData may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure.",
    "remediation": "Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3554,
  "fields": {
    "name": "Incomplete Internal State Distinction",
    "description": "The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.",
    "tag": "CWE-372",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3555,
  "fields": {
    "name": "DEPRECATED: State Synchronization Error",
    "description": "This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).",
    "tag": "CWE-373",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3556,
  "fields": {
    "name": "Passing Mutable Objects to an Untrusted Method",
    "description": "The product sends non-cloned mutable data as an argument to a method or function.",
    "tag": "CWE-374",
    "cvss": null,
    "risk_rating": "",
    "impact": "Potentially data could be tampered with by another function which should not have been tampered with.",
    "remediation": "Pass in data which should not be altered as constant or immutable.\nClone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3557,
  "fields": {
    "name": "Returning a Mutable Object to an Untrusted Caller",
    "description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.",
    "tag": "CWE-375",
    "cvss": null,
    "risk_rating": "",
    "impact": "Potentially data could be tampered with by another function which should not have been tampered with.",
    "remediation": "Declare returned data which should not be altered as constant or immutable.\nClone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3558,
  "fields": {
    "name": "Insecure Temporary File",
    "description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.",
    "tag": "CWE-377",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3559,
  "fields": {
    "name": "Creation of Temporary File With Insecure Permissions",
    "description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.",
    "tag": "CWE-378",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed.\nIf that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges.\nDepending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership.",
    "remediation": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nEnsure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file.\nRandomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3560,
  "fields": {
    "name": "Creation of Temporary File in Directory with Insecure Permissions",
    "description": "The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.",
    "tag": "CWE-379",
    "cvss": null,
    "risk_rating": "",
    "impact": "Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time.",
    "remediation": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible.\nTry to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories.\nAvoid using vulnerable temp file functions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3561,
  "fields": {
    "name": "Path Traversal: '\\absolute\\pathname\\here'",
    "description": "The product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-38",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3562,
  "fields": {
    "name": "J2EE Bad Practices: Use of System.exit()",
    "description": "A J2EE application uses System.exit(), which also shuts down its container.",
    "tag": "CWE-382",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The shutdown function should be a privileged function available only to a properly authorized administrative user\nWeb applications should not call methods that cause the virtual machine to exit, such as System.exit()\nWeb applications should also not throw any Throwables to the application server as this may adversely affect the container.\nNon-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3563,
  "fields": {
    "name": "J2EE Bad Practices: Direct Use of Threads",
    "description": "Thread management in a Web application is forbidden in some circumstances and is always highly error prone.",
    "tag": "CWE-383",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "For EJB, use framework approaches for parallel execution, instead of using threads.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3564,
  "fields": {
    "name": "Session Fixation",
    "description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.",
    "tag": "CWE-384",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Invalidate any existing session identifiers prior to authorizing a new user session.\nFor platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3565,
  "fields": {
    "name": "Covert Timing Channel",
    "description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.",
    "tag": "CWE-385",
    "cvss": null,
    "risk_rating": "",
    "impact": "Information exposure.",
    "remediation": "Whenever possible, specify implementation strategies that do not introduce time variances in operations.\nOften one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker.\nIt is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3566,
  "fields": {
    "name": "Symbolic Name not Mapping to Correct Object",
    "description": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.",
    "tag": "CWE-386",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker can gain access to otherwise unauthorized resources.\nRace conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question.\nThe resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user.\nIf a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur.\nIn some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3567,
  "fields": {
    "name": "Path Traversal: 'C:dirname'",
    "description": "The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.",
    "tag": "CWE-39",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.\nThe attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.\nThe attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.\nThe attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.",
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3568,
  "fields": {
    "name": "Detection of Error Condition Without Action",
    "description": "The product detects a specific error, but takes no actions to handle the error.",
    "tag": "CWE-390",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior.",
    "remediation": "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.\nIf a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program.\nSubject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3569,
  "fields": {
    "name": "Unchecked Error Condition",
    "description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",
    "tag": "CWE-391",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem.\nA language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added.\nCatch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3570,
  "fields": {
    "name": "Missing Report of Error Condition",
    "description": "The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.",
    "tag": "CWE-392",
    "cvss": null,
    "risk_rating": "",
    "impact": "Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3571,
  "fields": {
    "name": "Return of Wrong Status Code",
    "description": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.",
    "tag": "CWE-393",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3572,
  "fields": {
    "name": "Unexpected Status Code or Return Value",
    "description": "The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.",
    "tag": "CWE-394",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3573,
  "fields": {
    "name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
    "description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.",
    "tag": "CWE-395",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3574,
  "fields": {
    "name": "Declaration of Catch for Generic Exception",
    "description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
    "tag": "CWE-396",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3575,
  "fields": {
    "name": "Declaration of Throws for Generic Exception",
    "description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.",
    "tag": "CWE-397",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3576,
  "fields": {
    "name": "Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)",
    "description": "The product accepts input that identifies a Windows UNC share ('\\\\UNC\\share\\name') that potentially redirects access to an unintended location or arbitrary file.",
    "tag": "CWE-40",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3577,
  "fields": {
    "name": "Uncontrolled Resource Consumption",
    "description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.",
    "tag": "CWE-400",
    "cvss": null,
    "risk_rating": "",
    "impact": "The most common result of resource exhaustion is denial of service. The product may slow down, crash due to unhandled errors, or lock out legitimate users.\nIn some cases it may be possible to force the product to \"fail open\" in the event of resource exhaustion. The state of the product -- and possibly the security functionality - may then be compromised.",
    "remediation": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\n\n                  \nEnsure that protocols have specific limits of scale placed on them.\nEnsure that all failures in resource allocation place the system into a safe posture.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3578,
  "fields": {
    "name": "Missing Release of Memory after Effective Lifetime",
    "description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
    "tag": "CWE-401",
    "cvss": null,
    "risk_rating": "",
    "impact": "Most memory leaks result in general product reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition.",
    "remediation": "Use an abstraction library to abstract away risky APIs. Not a complete solution.\nThe Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3579,
  "fields": {
    "name": "Transmission of Private Resources into a New Sphere ('Resource Leak')",
    "description": "The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.",
    "tag": "CWE-402",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3580,
  "fields": {
    "name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
    "description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.",
    "tag": "CWE-403",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3581,
  "fields": {
    "name": "Improper Resource Shutdown or Release",
    "description": "The product does not release or incorrectly releases a resource before it is made available for re-use.",
    "tag": "CWE-404",
    "cvss": null,
    "risk_rating": "",
    "impact": "Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool.\nWhen a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation.",
    "remediation": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions.\nMemory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[].\nWhen releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3582,
  "fields": {
    "name": "Asymmetric Resource Consumption (Amplification)",
    "description": "The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is \"asymmetric.\"",
    "tag": "CWE-405",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sometimes this is a factor in \"flood\" attacks, but other types of amplification exist.",
    "remediation": "An application must make resources available to a client commensurate with the client's access level.\nAn application must, at all times, keep track of allocated resources and meter their usage appropriately.\nConsider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3583,
  "fields": {
    "name": "Insufficient Control of Network Message Volume (Network Amplification)",
    "description": "The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.",
    "tag": "CWE-406",
    "cvss": null,
    "risk_rating": "",
    "impact": "System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance.",
    "remediation": "An application must make network resources available to a client commensurate with the client's access level.\nDefine a clear policy for network resource allocation and consumption.\nAn application must, at all times, keep track of network resources and meter their usage appropriately.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3584,
  "fields": {
    "name": "Inefficient Algorithmic Complexity",
    "description": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.",
    "tag": "CWE-407",
    "cvss": null,
    "risk_rating": "",
    "impact": "The typical consequence is CPU consumption, but memory consumption and consumption of other resources can also occur.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3585,
  "fields": {
    "name": "Incorrect Behavior Order: Early Amplification",
    "description": "The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.",
    "tag": "CWE-408",
    "cvss": null,
    "risk_rating": "",
    "impact": "System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3586,
  "fields": {
    "name": "Improper Handling of Highly Compressed Data (Data Amplification)",
    "description": "The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.",
    "tag": "CWE-409",
    "cvss": null,
    "risk_rating": "",
    "impact": "System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3587,
  "fields": {
    "name": "Improper Resolution of Path Equivalence",
    "description": "The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.",
    "tag": "CWE-41",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism.",
    "remediation": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3588,
  "fields": {
    "name": "Insufficient Resource Pool",
    "description": "The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.",
    "tag": "CWE-410",
    "cvss": null,
    "risk_rating": "",
    "impact": "Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool.",
    "remediation": "Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests.\nConsider implementing a velocity check mechanism which would detect abusive behavior.\nConsider load balancing as an option to handle heavy loads.\nMake sure that resource handles are properly closed when no longer needed.\nIdentify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3589,
  "fields": {
    "name": "Unrestricted Externally Accessible Lock",
    "description": "The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.",
    "tag": "CWE-412",
    "cvss": null,
    "risk_rating": "",
    "impact": "When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock.",
    "remediation": "Use any access control that is offered by the functionality that is offering the lock.\nUse unpredictable names or identifiers for the locks. This might not always be possible or feasible.\nConsider modifying your code to use non-blocking synchronization methods.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3590,
  "fields": {
    "name": "Improper Resource Locking",
    "description": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.",
    "tag": "CWE-413",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use a non-conflicting privilege scheme.\nUse synchronization when locking a resource.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3591,
  "fields": {
    "name": "Missing Lock Check",
    "description": "A product does not check to see if a lock is present before performing sensitive operations on a resource.",
    "tag": "CWE-414",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implement a reliable lock mechanism.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3592,
  "fields": {
    "name": "Double Free",
    "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
    "tag": "CWE-415",
    "cvss": null,
    "risk_rating": "",
    "impact": "Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code.",
    "remediation": "Choose a language that provides automatic memory management.\nEnsure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once.\nUse a static analysis tool to find double free instances.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3593,
  "fields": {
    "name": "Use After Free",
    "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
    "tag": "CWE-416",
    "cvss": null,
    "risk_rating": "",
    "impact": "The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere.\nIf chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information.\nIf malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code.",
    "remediation": "Choose a language that provides automatic memory management.\nWhen freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3594,
  "fields": {
    "name": "Unprotected Primary Channel",
    "description": "The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.",
    "tag": "CWE-419",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not expose administrative functionnality on the user UI.\nProtect the administrative/restricted functionality with a strong authentication mechanism.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3595,
  "fields": {
    "name": "Path Equivalence: 'filename.' (Trailing Dot)",
    "description": "The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-42",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3596,
  "fields": {
    "name": "Unprotected Alternate Channel",
    "description": "The product protects a primary channel, but it does not use the same level of protection for an alternate channel.",
    "tag": "CWE-420",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3597,
  "fields": {
    "name": "Race Condition During Access to Alternate Channel",
    "description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.",
    "tag": "CWE-421",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3598,
  "fields": {
    "name": "Unprotected Windows Messaging Channel ('Shatter')",
    "description": "The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.",
    "tag": "CWE-422",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always verify and authenticate the source of the message.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3599,
  "fields": {
    "name": "DEPRECATED: Proxied Trusted Channel",
    "description": "This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.",
    "tag": "CWE-423",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3600,
  "fields": {
    "name": "Improper Protection of Alternate Path",
    "description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.",
    "tag": "CWE-424",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Deploy different layers of protection to implement security in depth.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3601,
  "fields": {
    "name": "Direct Request ('Forced Browsing')",
    "description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.",
    "tag": "CWE-425",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.\nConsider using MVC based frameworks such as Struts.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3602,
  "fields": {
    "name": "Untrusted Search Path",
    "description": "The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.",
    "tag": "CWE-426",
    "cvss": null,
    "risk_rating": "",
    "impact": "There is the potential for arbitrary code execution with privileges of the vulnerable program.\nThe program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format.\nThe program could send the output of unauthorized files to the attacker.",
    "remediation": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.\nWhen invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.\nRemove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nCheck your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory.\nUse other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3603,
  "fields": {
    "name": "Uncontrolled Search Path Element",
    "description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.",
    "tag": "CWE-427",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428.\nWhen invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths.\nRemove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths.\nCheck your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution.\nUse other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3604,
  "fields": {
    "name": "Unquoted Search Path or Element",
    "description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.",
    "tag": "CWE-428",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Properly quote the full search path before executing a program on the system.\n\n                  \nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3605,
  "fields": {
    "name": "Path Equivalence: 'filename....' (Multiple Trailing Dot)",
    "description": "The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-43",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3606,
  "fields": {
    "name": "Deployment of Wrong Handler",
    "description": "The wrong \"handler\" is assigned to process an object.",
    "tag": "CWE-430",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Perform a type check before interpreting an object.\nReject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3607,
  "fields": {
    "name": "Missing Handler",
    "description": "A handler is not available or implemented.",
    "tag": "CWE-431",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Handle all possible situations (e.g. error condition).\nIf an operation can throw an Exception, implement a handler for that specific exception.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3608,
  "fields": {
    "name": "Dangerous Signal Handler not Disabled During Sensitive Operations",
    "description": "The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.",
    "tag": "CWE-432",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Turn off dangerous handlers when performing sensitive operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3609,
  "fields": {
    "name": "Unparsed Raw Web Content Delivery",
    "description": "The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.",
    "tag": "CWE-433",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Perform a type check before interpreting files.\nDo not store sensitive information in files which may be misinterpreted.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3610,
  "fields": {
    "name": "Unrestricted Upload of File with Dangerous Type",
    "description": "The product allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment.",
    "tag": "CWE-434",
    "cvss": null,
    "risk_rating": "",
    "impact": "Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for .asp and .php extensions uploaded to web servers because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system.",
    "remediation": "Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nConsider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]\n\n                  \nDefine a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types.\nEnsure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter.[REF-422] [REF-423]\nWhen running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided.\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nDo not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field.\nDo not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3611,
  "fields": {
    "name": "Improper Interaction Between Multiple Correctly-Behaving Entities",
    "description": "An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.",
    "tag": "CWE-435",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3612,
  "fields": {
    "name": "Interpretation Conflict",
    "description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.",
    "tag": "CWE-436",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3613,
  "fields": {
    "name": "Incomplete Model of Endpoint Features",
    "description": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.",
    "tag": "CWE-437",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3614,
  "fields": {
    "name": "Behavioral Change in New Version or Environment",
    "description": "A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.",
    "tag": "CWE-439",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3615,
  "fields": {
    "name": "Path Equivalence: 'file.name' (Internal Dot)",
    "description": "The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-44",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3616,
  "fields": {
    "name": "Expected Behavior Violation",
    "description": "A feature, API, or function does not perform according to its specification.",
    "tag": "CWE-440",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3617,
  "fields": {
    "name": "Unintended Proxy or Intermediary ('Confused Deputy')",
    "description": "The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.",
    "tag": "CWE-441",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Enforce the use of strong mutual authentication mechanism between the two parties.\nWhenever a product is an intermediary or proxy for\n                   transactions between two other components, the proxy core\n                   should not drop the identity of the initiator of the\n                   transaction. The immutability of the identity of the\n                   initiator must be maintained and should be forwarded all the\n                   way to the target.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3618,
  "fields": {
    "name": "DEPRECATED: HTTP response splitting",
    "description": "This weakness can be found at CWE-113.",
    "tag": "CWE-443",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3619,
  "fields": {
    "name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')",
    "description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.",
    "tag": "CWE-444",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack).",
    "remediation": "Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433].\nUse only SSL communication.\nTerminate the client session after each request.\nTurn all pages to non-cacheable.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3620,
  "fields": {
    "name": "UI Discrepancy for Security Feature",
    "description": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.",
    "tag": "CWE-446",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3621,
  "fields": {
    "name": "Unimplemented or Unsupported Feature in UI",
    "description": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.",
    "tag": "CWE-447",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Perform functionality testing before deploying the application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3622,
  "fields": {
    "name": "Obsolete Feature in UI",
    "description": "A UI function is obsolete and the product does not warn the user.",
    "tag": "CWE-448",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3623,
  "fields": {
    "name": "The UI Performs the Wrong Action",
    "description": "The UI performs the wrong action with respect to the user's request.",
    "tag": "CWE-449",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Perform extensive functionality testing of the UI. The UI should behave as specified.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3624,
  "fields": {
    "name": "Path Equivalence: 'file...name' (Multiple Internal Dot)",
    "description": "The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-45",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3625,
  "fields": {
    "name": "Multiple Interpretations of UI Input",
    "description": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.",
    "tag": "CWE-450",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3626,
  "fields": {
    "name": "User Interface (UI) Misrepresentation of Critical Information",
    "description": "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.",
    "tag": "CWE-451",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Perform data validation (e.g. syntax, length, etc.) before interpreting the data.\nCreate a strategy for presenting information, and plan for how to display unusual characters.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3627,
  "fields": {
    "name": "Insecure Default Variable Initialization",
    "description": "The product, by default, initializes an internal variable with an insecure or less secure value than is possible.",
    "tag": "CWE-453",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain access to and modify sensitive data or system information.",
    "remediation": "Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3628,
  "fields": {
    "name": "External Initialization of Trusted Variables or Data Stores",
    "description": "The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.",
    "tag": "CWE-454",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain access to and modify sensitive data or system information.",
    "remediation": "A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary.\nAvoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3629,
  "fields": {
    "name": "Non-exit on Failed Initialization",
    "description": "The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.",
    "tag": "CWE-455",
    "cvss": null,
    "risk_rating": "",
    "impact": "The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed.",
    "remediation": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3630,
  "fields": {
    "name": "Missing Initialization of a Variable",
    "description": "The product does not initialize critical variables, which causes the execution environment to use unexpected values.",
    "tag": "CWE-456",
    "cvss": null,
    "risk_rating": "",
    "impact": "The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem.",
    "remediation": "Check that critical variables are initialized.\nUse a static analysis tool to spot non-initialized variables.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3631,
  "fields": {
    "name": "Use of Uninitialized Variable",
    "description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",
    "tag": "CWE-457",
    "cvss": null,
    "risk_rating": "",
    "impact": "Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can \"pre-initialize\" the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not.\nStrings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string.",
    "remediation": "Assign all variables to an initial value.\nMost compilers will complain about the use of uninitialized variables if warnings are turned on.\nWhen using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name.\nThe choice could be made to use a language that is not susceptible to these issues.\nMitigating technologies such as safe string libraries and container abstractions could be introduced.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3632,
  "fields": {
    "name": "DEPRECATED: Incorrect Initialization",
    "description": "This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.",
    "tag": "CWE-458",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3633,
  "fields": {
    "name": "Incomplete Cleanup",
    "description": "The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used.",
    "tag": "CWE-459",
    "cvss": null,
    "risk_rating": "",
    "impact": "It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem.",
    "remediation": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3634,
  "fields": {
    "name": "Path Equivalence: 'filename ' (Trailing Space)",
    "description": "The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-46",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3635,
  "fields": {
    "name": "Improper Cleanup on Thrown Exception",
    "description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.",
    "tag": "CWE-460",
    "cvss": null,
    "risk_rating": "",
    "impact": "The code could be left in a bad state.",
    "remediation": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3636,
  "fields": {
    "name": "Duplicate Key in Associative List (Alist)",
    "description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.",
    "tag": "CWE-462",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use a hash table instead of an alist.\nUse an alist which checks the uniqueness of hash keys with each entry before inserting the entry.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3637,
  "fields": {
    "name": "Deletion of Data Structure Sentinel",
    "description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems.",
    "tag": "CWE-463",
    "cvss": null,
    "risk_rating": "",
    "impact": "Generally this error will cause the data structure to not work properly.\nIf a control character, such as NULL is removed, one may cause resource access control problems.",
    "remediation": "Use an abstraction library to abstract away risky APIs. Not a complete solution.\n\n                  \nUse OS-level preventative functionality. Not a complete solution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3638,
  "fields": {
    "name": "Addition of Data Structure Sentinel",
    "description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems.",
    "tag": "CWE-464",
    "cvss": null,
    "risk_rating": "",
    "impact": "Generally this error will cause the data structure to not work properly by truncating the data.",
    "remediation": "Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present.\nProper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel.\nUse an abstraction library to abstract away risky APIs. This is not a complete solution.\nUse OS-level preventative functionality. This is not a complete solution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3639,
  "fields": {
    "name": "Return of Pointer Value Outside of Expected Range",
    "description": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.",
    "tag": "CWE-466",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3640,
  "fields": {
    "name": "Use of sizeof() on a Pointer Type",
    "description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",
    "tag": "CWE-467",
    "cvss": null,
    "risk_rating": "",
    "impact": "This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows.",
    "remediation": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3641,
  "fields": {
    "name": "Incorrect Pointer Scaling",
    "description": "In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.",
    "tag": "CWE-468",
    "cvss": null,
    "risk_rating": "",
    "impact": "Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read.",
    "remediation": "Use a platform with high-level memory abstractions.\nAlways use array indexing instead of direct pointer manipulation.\nUse technologies for preventing buffer overflows.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3642,
  "fields": {
    "name": "Use of Pointer Subtraction to Determine Size",
    "description": "The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.",
    "tag": "CWE-469",
    "cvss": null,
    "risk_rating": "",
    "impact": "There is the potential for arbitrary code execution with privileges of the vulnerable program.",
    "remediation": "Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3643,
  "fields": {
    "name": "Path Equivalence: ' filename' (Leading Space)",
    "description": "The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-47",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3644,
  "fields": {
    "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
    "description": "The product uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code.",
    "tag": "CWE-470",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker might be able to execute code that is not directly accessible to the attacker. Alternately, the attacker could call unexpected code in the wrong place or the wrong time, possibly modifying critical system state.\nThe attacker might be able to use reflection to call the wrong code, possibly with unexpected arguments that violate the API (CWE-227). This could cause the product to exit or hang.\nBy causing the wrong code to be invoked, the attacker might be able to trigger a runtime error that leaks sensitive information in the error message, such as CWE-536.",
    "remediation": "Refactor your code to avoid using reflection.\nDo not use user-controlled inputs to select and load classes or code.\nApply strict input validation by using allowlists or indirect selection to ensure that the user is only selecting allowable classes or code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3645,
  "fields": {
    "name": "Modification of Assumed-Immutable Data (MAID)",
    "description": "The product does not properly protect an assumed-immutable element from being modified by an attacker.",
    "tag": "CWE-471",
    "cvss": null,
    "risk_rating": "",
    "impact": "Common data types that are attacked are environment variables, web application parameters, and HTTP headers.",
    "remediation": "When the data is stored or transmitted through untrusted sources that could modify the data, implement integrity checks to detect unauthorized modification, or store/transmit the data in a trusted location that is free from external influence.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3646,
  "fields": {
    "name": "External Control of Assumed-Immutable Web Parameter",
    "description": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields.",
    "tag": "CWE-472",
    "cvss": null,
    "risk_rating": "",
    "impact": "Without appropriate protection mechanisms, the client can easily tamper with cookies and similar web data. Reliance on the cookies without detailed validation can lead to problems such as SQL injection. If you use cookie values for security related decisions on the server side, manipulating the cookies might lead to violations of security policies such as authentication bypassing, user impersonation and privilege escalation. In addition, storing sensitive data in the cookie without appropriate protection can also lead to disclosure of sensitive user data, especially data stored in persistent cookies.",
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3647,
  "fields": {
    "name": "PHP External Variable Modification",
    "description": "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise.",
    "tag": "CWE-473",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Carefully identify which variables can be controlled or influenced by an external user, and consider adopting a naming convention to emphasize when externally modifiable variables are being used. An application should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary. Do not allow your application to run with register_globals enabled. If you implement a register_globals emulator, be extremely careful of variable extraction, dynamic evaluation, and similar issues, since weaknesses in your emulation could allow external variable modification to take place even without register_globals.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3648,
  "fields": {
    "name": "Use of Function with Inconsistent Implementations",
    "description": "The code uses a function that has inconsistent implementations across operating systems and versions.",
    "tag": "CWE-474",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not accept inconsistent behavior from the API specifications when the deviant behavior increase the risk level.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3649,
  "fields": {
    "name": "Undefined Behavior for Input to API",
    "description": "The behavior of this function is undefined unless its control parameter is set to a specific value.",
    "tag": "CWE-475",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3650,
  "fields": {
    "name": "NULL Pointer Dereference",
    "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
    "tag": "CWE-476",
    "cvss": null,
    "risk_rating": "",
    "impact": "NULL pointer dereferences usually result in the failure of the process unless exception handling (on some platforms) is available and implemented. Even when exception handling is being used, it can still be very difficult to return the software to a safe state of operation.\nIn rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.",
    "remediation": "If all pointers that could have been modified are sanity-checked previous to use, nearly all NULL pointer dereferences can be prevented.\nThe choice could be made to use a language that is not susceptible to these issues.\nCheck the results of all functions that return a value and verify that the value is non-null before acting upon it.\nIdentify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\nExplicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3651,
  "fields": {
    "name": "Use of Obsolete Function",
    "description": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",
    "tag": "CWE-477",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Refer to the documentation for the obsolete function in order to determine why it is deprecated or obsolete and to learn about alternative ways to achieve the same functionality.\nConsider seriously the security implications of using an obsolete function. Consider using alternate functions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3652,
  "fields": {
    "name": "Missing Default Case in Multiple Condition Expression",
    "description": "The code does not have a default case in an expression with multiple conditions, such as a switch statement.",
    "tag": "CWE-478",
    "cvss": null,
    "risk_rating": "",
    "impact": "Depending on the logical circumstances involved, any consequences may result: e.g., issues of confidentiality, authentication, authorization, availability, integrity, accountability, or non-repudiation.",
    "remediation": "Ensure that there are no cases unaccounted for when adjusting program flow or values based on the value of a given variable. In the case of switch style statements, the very simple act of creating a default case can, if done correctly, mitigate this situation. Often however, the default case is used simply to represent an assumed option, as opposed to working as a check for invalid input. This is poor practice and in some cases is as bad as omitting a default case entirely.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3653,
  "fields": {
    "name": "Signal Handler Use of a Non-reentrant Function",
    "description": "The product defines a signal handler that calls a non-reentrant function.",
    "tag": "CWE-479",
    "cvss": null,
    "risk_rating": "",
    "impact": "It may be possible to execute arbitrary code through the use of a write-what-where condition.\nSignal race conditions often result in data corruption.",
    "remediation": "Require languages or libraries that provide reentrant functionality, or otherwise make it easier to avoid this weakness.\nDesign signal handlers to only set flags rather than perform complex functionality.\nEnsure that non-reentrant functions are not found in signal handlers.\nUse sanity checks to reduce the timing window for exploitation of race conditions. This is only a partial solution, since many attacks might fail, but other attacks still might work within the narrower window, even accidentally.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3654,
  "fields": {
    "name": "Path Equivalence: 'file name' (Internal Whitespace)",
    "description": "The product accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-48",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3655,
  "fields": {
    "name": "Use of Incorrect Operator",
    "description": "The product accidentally uses the wrong operator, which changes the logic in security-relevant ways.",
    "tag": "CWE-480",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can cause unintended logic to be executed and other unexpected application behavior.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3656,
  "fields": {
    "name": "Assigning instead of Comparing",
    "description": "The code uses an operator for assignment when the intention was to perform a comparison.",
    "tag": "CWE-481",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Many IDEs and static analysis products will detect this problem.\nPlace constants on the left. If one attempts to assign a constant with a variable, the compiler will produce an error.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3657,
  "fields": {
    "name": "Comparing instead of Assigning",
    "description": "The code uses an operator for comparison when the intention was to perform an assignment.",
    "tag": "CWE-482",
    "cvss": null,
    "risk_rating": "",
    "impact": "The assignment will not take place, which should cause obvious program execution problems.",
    "remediation": "Many IDEs and static analysis products will detect this problem.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3658,
  "fields": {
    "name": "Incorrect Block Delimitation",
    "description": "The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error.",
    "tag": "CWE-483",
    "cvss": null,
    "risk_rating": "",
    "impact": "This is a general logic error which will often lead to obviously-incorrect behaviors that are quickly noticed and fixed. In lightly tested or untested code, this error may be introduced it into a production environment and provide additional attack vectors by creating a control flow path leading to an unexpected state in the application. The consequences will depend on the types of behaviors that are being incorrectly executed.",
    "remediation": "Always use explicit block delimitation and use static-analysis technologies to enforce this practice.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3659,
  "fields": {
    "name": "Omitted Break Statement in Switch",
    "description": "The product omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition.",
    "tag": "CWE-484",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can cause unintended logic to be executed and other unexpected application behavior.",
    "remediation": "Omitting a break statement so that one may fall through is often indistinguishable from an error, and therefore should be avoided. If you need to use fall-through capabilities, make sure that you have clearly documented this within the switch statement, and ensure that you have examined all the logical possibilities.\nThe functionality of omitting a break statement could be clarified with an if statement. This method is much safer.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3660,
  "fields": {
    "name": "Comparison of Classes by Name",
    "description": "The product compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name.",
    "tag": "CWE-486",
    "cvss": null,
    "risk_rating": "",
    "impact": "If a product relies solely on the name of an object to determine identity, it may execute the incorrect or unintended code.",
    "remediation": "Use class equivalency to determine type. Rather than use the class name to determine if an object is of a given type, use the getClass() method, and == operator.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3661,
  "fields": {
    "name": "Reliance on Package-level Scope",
    "description": "Java packages are not inherently closed; therefore, relying on them for code security is not a good practice.",
    "tag": "CWE-487",
    "cvss": null,
    "risk_rating": "",
    "impact": "Any data in a Java package can be accessed outside of the Java framework if the package is distributed.\nThe data in a Java class can be modified by anyone outside of the Java framework if the packages is distributed.",
    "remediation": "Data should be private static and final whenever possible. This will assure that your code is protected by instantiating early, preventing access and tampering.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3662,
  "fields": {
    "name": "Exposure of Data Element to Wrong Session",
    "description": "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.",
    "tag": "CWE-488",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Protect the application's sessions from information leakage. Make sure that a session's data is not used or visible by other sessions.\nUse a static analysis tool to scan the code for information leakage vulnerabilities (e.g. Singleton Member Field).\nIn a multithreading environment, storing user data in Servlet member fields introduces a data access race condition. Do not use member fields to store information in the Servlet.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3663,
  "fields": {
    "name": "Active Debug Code",
    "description": "The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.",
    "tag": "CWE-489",
    "cvss": null,
    "risk_rating": "",
    "impact": "The severity of the exposed debug application will depend on the particular instance. At the least, it will give an attacker sensitive information about the settings and mechanics of web applications on the server. At worst, as is often the case, the debug application will allow an attacker complete control over the web application and server, as well as confidential information that either of these access.",
    "remediation": "Remove debug code before deploying the application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3664,
  "fields": {
    "name": "Path Equivalence: 'filename/' (Trailing Slash)",
    "description": "The product accepts path input in the form of trailing slash ('filedir/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-49",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3665,
  "fields": {
    "name": "Public cloneable() Method Without Final ('Object Hijack')",
    "description": "A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state.",
    "tag": "CWE-491",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Make the cloneable() method final.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3666,
  "fields": {
    "name": "Use of Inner Class Containing Sensitive Data",
    "description": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers.",
    "tag": "CWE-492",
    "cvss": null,
    "risk_rating": "",
    "impact": "\"Inner Classes\" data confidentiality aspects can often be overcome.",
    "remediation": "Using sealed classes protects object-oriented encapsulation paradigms and therefore protects code from being extended in unforeseen ways.\nInner Classes do not provide security. Warning: Never reduce the security of the object from an outer class, going to an inner class. If an outer class is final or private, ensure that its inner class is private as well.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3667,
  "fields": {
    "name": "Critical Public Variable Without Final Modifier",
    "description": "The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values.",
    "tag": "CWE-493",
    "cvss": null,
    "risk_rating": "",
    "impact": "The object could potentially be tampered with.\nThe object could potentially allow the object to be read.",
    "remediation": "Declare all public fields as final when possible, especially if it is used to maintain internal state of an Applet or of classes used by an Applet. If a field must be public, then perform all appropriate sanity checks before accessing the field from your code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3668,
  "fields": {
    "name": "Download of Code Without Integrity Check",
    "description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code.",
    "tag": "CWE-494",
    "cvss": null,
    "risk_rating": "",
    "impact": "Executing untrusted code could compromise the control flow of the program. The untrusted code could execute attacker-controlled commands, read or modify sensitive resources, or prevent the software from functioning correctly for legitimate users.",
    "remediation": "Perform proper forward and reverse DNS lookups to detect DNS spoofing.\n\n                  \n\n                  \nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3669,
  "fields": {
    "name": "Private Data Structure Returned From A Public Method",
    "description": "The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways.",
    "tag": "CWE-495",
    "cvss": null,
    "risk_rating": "",
    "impact": "The contents of the data structure can be modified from outside the intended scope.",
    "remediation": "Declare the method private.\nClone the member data and keep an unmodified version of the data private to the object.\nUse public setter methods that govern how a private member can be modified.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3670,
  "fields": {
    "name": "Public Data Assigned to Private Array-Typed Field",
    "description": "Assigning public data to a private array is equivalent to giving public access to the array.",
    "tag": "CWE-496",
    "cvss": null,
    "risk_rating": "",
    "impact": "The contents of the array can be modified from outside the intended scope.",
    "remediation": "Do not allow objects to modify private members of a class.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3671,
  "fields": {
    "name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere",
    "description": "The product does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the product does.",
    "tag": "CWE-497",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Production applications should never use methods that generate internal details such as stack traces and error messages unless that information is directly committed to a log that is not viewable by the end user. All error message text should be HTML entity encoded before being written to the log file to protect against potential cross-site scripting attacks against the viewer of the logs",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3672,
  "fields": {
    "name": "Cloneable Class Containing Sensitive Information",
    "description": "The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class.",
    "tag": "CWE-498",
    "cvss": null,
    "risk_rating": "",
    "impact": "A class that can be cloned can be produced without executing the constructor. This is dangerous since the constructor may perform security-related checks. By allowing the object to be cloned, those checks may be bypassed.",
    "remediation": "If you do make your classes clonable, ensure that your clone method is final and throw super.clone().",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3673,
  "fields": {
    "name": "Serializable Class Containing Sensitive Data",
    "description": "The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class.",
    "tag": "CWE-499",
    "cvss": null,
    "risk_rating": "",
    "impact": "an attacker can write out the class to a byte stream, then extract the important data from it.",
    "remediation": "In Java, explicitly define final writeObject() to prevent serialization. This is the recommended solution. Define the writeObject() function to throw an exception explicitly denying serialization.\nMake sure to prevent serialization of your objects.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3674,
  "fields": {
    "name": "J2EE Misconfiguration: Data Transmission Without Encryption",
    "description": "Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted.",
    "tag": "CWE-5",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The product configuration should ensure that SSL or an encryption mechanism of equivalent strength and vetted reputation is used for all access-controlled pages.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3675,
  "fields": {
    "name": "Path Equivalence: '//multiple/leading/slash'",
    "description": "The product accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-50",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3676,
  "fields": {
    "name": "Public Static Field Not Marked Final",
    "description": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways.",
    "tag": "CWE-500",
    "cvss": null,
    "risk_rating": "",
    "impact": "The object could potentially be tampered with.\nThe object could potentially allow the object to be read.",
    "remediation": "Clearly identify the scope for all critical data elements, including whether they should be regarded as static.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3677,
  "fields": {
    "name": "Trust Boundary Violation",
    "description": "The product mixes trusted and untrusted data in the same data structure or structured message.",
    "tag": "CWE-501",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3678,
  "fields": {
    "name": "Deserialization of Untrusted Data",
    "description": "The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.",
    "tag": "CWE-502",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can modify unexpected objects or data that was assumed to be safe from modification.\nIf a function is making an assumption on when to terminate, based on a sentry in a string, it could easily never terminate.\nThe consequences can vary widely, because it depends on which objects or methods are being deserialized, and how they are used. Making an assumption that the code in the deserialized object is valid is dangerous and can enable exploitation.",
    "remediation": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nWhen deserializing data, populate a new object rather than just deserializing. The result is that the data flows through safe input validation and that the functions are safe.\nExplicitly define a final object() to prevent deserialization.\n\n                  \nAvoid having unnecessary types or gadgets available that can be leveraged for malicious ends. This limits the potential for unintended or unauthorized types and gadgets to be leveraged by the attacker. Add only acceptable classes to an allowlist. Note: new gadgets are constantly being discovered, so this alone is not a sufficient mitigation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3679,
  "fields": {
    "name": "Embedded Malicious Code",
    "description": "The product contains code that appears to be malicious in nature.",
    "tag": "CWE-506",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove the malicious code and start an effort to ensure that no more malicious code exists. This may require a detailed review of all code, as it is possible to hide a serious attack in only one or two lines of code. These lines may be located almost anywhere in an application and may have been intentionally obfuscated by the attacker.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3680,
  "fields": {
    "name": "Trojan Horse",
    "description": "The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.",
    "tag": "CWE-507",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Most antivirus software scans for Trojan Horses.\nVerify the integrity of the product that is being installed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3681,
  "fields": {
    "name": "Non-Replicating Malicious Code",
    "description": "Non-replicating malicious code only resides on the target system or product that is attacked; it does not attempt to spread to other systems.",
    "tag": "CWE-508",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Antivirus software can help mitigate known malicious code.\nVerify the integrity of the software that is being installed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3682,
  "fields": {
    "name": "Replicating Malicious Code (Virus or Worm)",
    "description": "Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or the product.",
    "tag": "CWE-509",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Antivirus software scans for viruses or worms.\nAlways verify the integrity of the software that is being installed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3683,
  "fields": {
    "name": "Path Equivalence: '/multiple//internal/slash'",
    "description": "The product accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-51",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3684,
  "fields": {
    "name": "Trapdoor",
    "description": "A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism.",
    "tag": "CWE-510",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always verify the integrity of the software that is being installed.\nIdentify and closely inspect the conditions for entering privileged areas of the code, especially those related to authentication, process invocation, and network communications.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3685,
  "fields": {
    "name": "Logic/Time Bomb",
    "description": "The product contains code that is designed to disrupt the legitimate operation of the product (or its environment) when a certain time passes, or when a certain logical condition is met.",
    "tag": "CWE-511",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always verify the integrity of the product that is being installed.\nConduct a code coverage analysis using live testing, then closely inspect any code that is not covered.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3686,
  "fields": {
    "name": "Spyware",
    "description": "The product collects personally identifiable information about a human user or the user's activities, but the product accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the product.",
    "tag": "CWE-512",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use spyware detection and removal software.\nAlways verify the integrity of the product that is being installed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3687,
  "fields": {
    "name": "Covert Channel",
    "description": "A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.",
    "tag": "CWE-514",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3688,
  "fields": {
    "name": "Covert Storage Channel",
    "description": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information.",
    "tag": "CWE-515",
    "cvss": null,
    "risk_rating": "",
    "impact": "Covert storage channels may provide attackers with important information about the system in question.\nIf these messages or packets are sent with unnecessary data contained within, it may tip off malicious listeners as to the process that created the message. With this information, attackers may learn any number of things, including the hardware platform, operating system, or algorithms used by the sender. This information can be of significant value to the user in launching further attacks.",
    "remediation": "Ensure that all reserved fields are set to zero before messages are sent and that no unnecessary information is included.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3689,
  "fields": {
    "name": "DEPRECATED: Covert Timing Channel",
    "description": "This weakness can be found at CWE-385.",
    "tag": "CWE-516",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3690,
  "fields": {
    "name": "Path Equivalence: '/multiple/trailing/slash//'",
    "description": "The product accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-52",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3691,
  "fields": {
    "name": ".NET Misconfiguration: Use of Impersonation",
    "description": "Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks.",
    "tag": "CWE-520",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Run the application with limited privilege to the underlying operating and file system.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3692,
  "fields": {
    "name": "Weak Password Requirements",
    "description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts.",
    "tag": "CWE-521",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could easily guess user passwords and gain access user accounts.",
    "remediation": "Consider a second\n                 authentication factor beyond the password, which prevents the\n                 password from being a single point of failure. See CWE-308 for\n                 further information.\nConsider implementing a password complexity meter to inform users when a chosen password meets the required attributes.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3693,
  "fields": {
    "name": "Insufficiently Protected Credentials",
    "description": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval.",
    "tag": "CWE-522",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain access to user accounts and access sensitive data used by the user accounts.",
    "remediation": "Use an appropriate security mechanism to protect the credentials.\nMake appropriate use of cryptography to protect the credentials.\nUse industry standards to protect the credentials (e.g. LDAP, keystore, etc.).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3694,
  "fields": {
    "name": "Unprotected Transport of Credentials",
    "description": "Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.",
    "tag": "CWE-523",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Enforce SSL use for the login page or any page used to transmit user credentials or other sensitive information. Even if the entire site does not use SSL, it MUST use SSL for login. Additionally, to help prevent phishing attacks, make sure that SSL serves the login page. SSL allows the user to verify the identity of the server to which they are connecting. If the SSL serves login page, the user can be certain they are talking to the proper end system. A phishing attack would typically redirect a user to a site that does not have a valid trusted server certificate issued from an authorized supplier.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3695,
  "fields": {
    "name": "Use of Cache Containing Sensitive Information",
    "description": "The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.",
    "tag": "CWE-524",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Protect information stored in cache.\nDo not store unnecessarily sensitive information in the cache.\nConsider using encryption in the cache.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3696,
  "fields": {
    "name": "Use of Web Browser Cache Containing Sensitive Information",
    "description": "The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.",
    "tag": "CWE-525",
    "cvss": null,
    "risk_rating": "",
    "impact": "Browsers often store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers. The locations at most risk include public terminals, such as those in libraries and Internet cafes.",
    "remediation": "Protect information stored in cache.\nUse a restrictive caching policy for forms and web pages that potentially contain sensitive information.\nDo not store unnecessarily sensitive information in the cache.\nConsider using encryption in the cache.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3697,
  "fields": {
    "name": "Cleartext Storage of Sensitive Information in an Environment Variable",
    "description": "The product uses an environment variable to store unencrypted sensitive information.",
    "tag": "CWE-526",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Encrypt information stored in the environment variable to protect it from being exposed to an unauthorized user. If encryption is not feasible or is considered too expensive for the business use of the application, then consider using a properly protected configuration file instead of an environment variable. It should be understood that unencrypted information in a config file is also not guaranteed to be protected, but it is still a better choice, because it reduces attack surface related to weaknesses such as CWE-214. In some settings, vaults might be a feasible option for safer data transfer. Users should be notified of the business choice made to not protect the sensitive information through encryption.\nIf the environment variable is not necessary for the desired behavior, then remove it entirely, or clear it to an empty value.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3698,
  "fields": {
    "name": "Exposure of Version-Control Repository to an Unauthorized Control Sphere",
    "description": "The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
    "tag": "CWE-527",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Recommendations include removing any CVS directories and repositories from the production server, disabling the use of remote CVS repositories, and ensuring that the latest CVS patches and version updates have been performed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3699,
  "fields": {
    "name": "Exposure of Core Dump File to an Unauthorized Control Sphere",
    "description": "The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors.",
    "tag": "CWE-528",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Protect the core dump files from unauthorized access.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3700,
  "fields": {
    "name": "Exposure of Access Control List Files to an Unauthorized Control Sphere",
    "description": "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere.",
    "tag": "CWE-529",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Protect access control list files.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3701,
  "fields": {
    "name": "Path Equivalence: '\\multiple\\\\internal\\backslash'",
    "description": "The product accepts path input in the form of multiple internal backslash ('\\multiple\\trailing\\\\slash') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-53",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3702,
  "fields": {
    "name": "Exposure of Backup File to an Unauthorized Control Sphere",
    "description": "A backup file is stored in a directory or archive that is made accessible to unauthorized actors.",
    "tag": "CWE-530",
    "cvss": null,
    "risk_rating": "",
    "impact": "At a minimum, an attacker who retrieves this file would have all the information contained in it, whether that be database calls, the format of parameters accepted by the application, or simply information regarding the architectural structure of your site.",
    "remediation": "Recommendations include implementing a security policy within your organization that prohibits backing up web application source code in the webroot.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3703,
  "fields": {
    "name": "Inclusion of Sensitive Information in Test Code",
    "description": "Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions.",
    "tag": "CWE-531",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove test code before deploying the application into production.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3704,
  "fields": {
    "name": "Insertion of Sensitive Information into Log File",
    "description": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information.",
    "tag": "CWE-532",
    "cvss": null,
    "risk_rating": "",
    "impact": "Logging sensitive user data often provides attackers with an additional, less-protected path to acquiring the information.",
    "remediation": "Consider seriously the sensitivity of the information written into log files. Do not write secrets into the log files.\nRemove debug log files before deploying the application into production.\nProtect log files against unauthorized read/write.\nAdjust configurations appropriately when software is transitioned from a debug state to production.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3705,
  "fields": {
    "name": "DEPRECATED: Information Exposure Through Server Log Files",
    "description": "This entry has been deprecated because its abstraction was too low-level.  See CWE-532.",
    "tag": "CWE-533",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3706,
  "fields": {
    "name": "DEPRECATED: Information Exposure Through Debug Log Files",
    "description": "This entry has been deprecated because its abstraction was too low-level.  See CWE-532.",
    "tag": "CWE-534",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3707,
  "fields": {
    "name": "Exposure of Information Through Shell Error Message",
    "description": "A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system.",
    "tag": "CWE-535",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3708,
  "fields": {
    "name": "Servlet Runtime Error Message Containing Sensitive Information",
    "description": "A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker.",
    "tag": "CWE-536",
    "cvss": null,
    "risk_rating": "",
    "impact": "The error message may contain the location of the file in which the offending function is located. This may disclose the web root's absolute path as well as give the attacker the location of application files or configuration information. It may even disclose the portion of code that failed. In many cases, an attacker can use the data to launch further attacks against the system.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3709,
  "fields": {
    "name": "Java Runtime Error Message Containing Sensitive Information",
    "description": "In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system.",
    "tag": "CWE-537",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not expose sensitive error information to the user.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3710,
  "fields": {
    "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
    "description": "The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information.",
    "tag": "CWE-538",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not expose file and directory information to the user.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3711,
  "fields": {
    "name": "Use of Persistent Cookies Containing Sensitive Information",
    "description": "The web application uses persistent cookies, but the cookies contain sensitive information.",
    "tag": "CWE-539",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not store sensitive information in persistent cookies.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3712,
  "fields": {
    "name": "Path Equivalence: 'filedir\\' (Trailing Backslash)",
    "description": "The product accepts path input in the form of trailing backslash ('filedir\\') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-54",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3713,
  "fields": {
    "name": "Inclusion of Sensitive Information in Source Code",
    "description": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users.",
    "tag": "CWE-540",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Recommendations include removing this script from the web server and moving it to a location not accessible from the Internet.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3714,
  "fields": {
    "name": "Inclusion of Sensitive Information in an Include File",
    "description": "If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system.",
    "tag": "CWE-541",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not store sensitive information in include files.\nProtect include files from being exposed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3715,
  "fields": {
    "name": "DEPRECATED: Information Exposure Through Cleanup Log Files",
    "description": "This entry has been deprecated because its abstraction was too low-level.  See CWE-532.",
    "tag": "CWE-542",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3716,
  "fields": {
    "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
    "description": "The product uses the singleton pattern when creating a resource within a multithreaded environment.",
    "tag": "CWE-543",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use the Thread-Specific Storage Pattern. See References.\nDo not use member fields to store information in the Servlet. In multithreading environments, storing user data in Servlet member fields introduces a data access race condition.\nAvoid using the double-checked locking pattern in language versions that cannot guarantee thread safety. This pattern may be used to avoid the overhead of a synchronized call, but in certain versions of Java (for example), this has been shown to be unsafe because it still introduces a race condition (CWE-209).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3717,
  "fields": {
    "name": "Missing Standardized Error Handling Mechanism",
    "description": "The product does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses.",
    "tag": "CWE-544",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "define a strategy for handling errors of different severities, such as fatal errors versus basic log events. Use or create built-in language features, or an external package, that provides an easy-to-use API and define coding standards for the detection and handling of errors.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3718,
  "fields": {
    "name": "DEPRECATED: Use of Dynamic Class Loading",
    "description": "This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries.",
    "tag": "CWE-545",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3719,
  "fields": {
    "name": "Suspicious Comment",
    "description": "The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses.",
    "tag": "CWE-546",
    "cvss": null,
    "risk_rating": "",
    "impact": "Suspicious comments could be an indication that there are problems in the source code that may need to be fixed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.",
    "remediation": "Remove comments that suggest the presence of bugs, incomplete functionality, or weaknesses, before deploying the application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3720,
  "fields": {
    "name": "Use of Hard-coded, Security-relevant Constants",
    "description": "The product uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change.",
    "tag": "CWE-547",
    "cvss": null,
    "risk_rating": "",
    "impact": "The existence of hardcoded constants could cause unexpected behavior and the introduction of weaknesses during code maintenance or when making changes to the code if all occurrences are not modified. The use of hardcoded constants is an indication of poor quality.",
    "remediation": "Avoid using hard-coded constants. Configuration files offer a more flexible solution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3721,
  "fields": {
    "name": "Exposure of Information Through Directory Listing",
    "description": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers.",
    "tag": "CWE-548",
    "cvss": null,
    "risk_rating": "",
    "impact": "Exposing the contents of a directory can lead to an attacker gaining access to source code or providing useful information for the attacker to devise exploits, such as creation times of files or any information that may be encoded in file names. The directory listing may also compromise private or confidential data.",
    "remediation": "Recommendations include restricting access to important directories or files by adopting a need to know requirement for both the document and server root, and turning off features such as Automatic Directory Listings that could expose private files and provide information that could be utilized by an attacker when formulating or conducting an attack.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3722,
  "fields": {
    "name": "Missing Password Field Masking",
    "description": "The product does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords.",
    "tag": "CWE-549",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Recommendations include requiring all password fields in your web application be masked to prevent other users from seeing this information.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3723,
  "fields": {
    "name": "Path Equivalence: '/./' (Single Dot Directory)",
    "description": "The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-55",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3724,
  "fields": {
    "name": "Server-generated Error Message Containing Sensitive Information",
    "description": "Certain conditions, such as network failure, will cause a server error message to be displayed.",
    "tag": "CWE-550",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Recommendations include designing and adding consistent error handling mechanisms which are capable of handling any user input to your web application, providing meaningful detail to end-users, and preventing error messages that might provide information useful to an attacker from being displayed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3725,
  "fields": {
    "name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",
    "description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.",
    "tag": "CWE-551",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "URL Inputs should be decoded and canonicalized to the application's current internal representation before being validated and processed for authorization. Make sure that your application does not decode the same input twice. Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3726,
  "fields": {
    "name": "Files or Directories Accessible to External Parties",
    "description": "The product makes files or directories accessible to unauthorized actors, even though they should not be.",
    "tag": "CWE-552",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When storing data in the cloud (e.g., S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to disable public access.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3727,
  "fields": {
    "name": "Command Shell in Externally Accessible Directory",
    "description": "A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.",
    "tag": "CWE-553",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove any Shells accessible under the web root folder and children directories.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3728,
  "fields": {
    "name": "ASP.NET Misconfiguration: Not Using Input Validation Framework",
    "description": "The ASP.NET application does not use an input validation framework.",
    "tag": "CWE-554",
    "cvss": null,
    "risk_rating": "",
    "impact": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3729,
  "fields": {
    "name": "J2EE Misconfiguration: Plaintext Password in Configuration File",
    "description": "The J2EE application stores a plaintext password in a configuration file.",
    "tag": "CWE-555",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not hardwire passwords into your software.\nUse industry standard libraries to encrypt passwords before storage in configuration files.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3730,
  "fields": {
    "name": "ASP.NET Misconfiguration: Use of Identity Impersonation",
    "description": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.",
    "tag": "CWE-556",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use the least privilege principle.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3731,
  "fields": {
    "name": "Use of getlogin() in Multithreaded Application",
    "description": "The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.",
    "tag": "CWE-558",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Using names for security purposes is not advised. Names are easy to forge and can have overlapping user IDs, potentially causing confusion or impersonation.\nUse getlogin_r() instead, which is reentrant, meaning that other processes are locked out from changing the username.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3732,
  "fields": {
    "name": "Path Equivalence: 'filedir*' (Wildcard)",
    "description": "The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.",
    "tag": "CWE-56",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3733,
  "fields": {
    "name": "Use of umask() with chmod-style Argument",
    "description": "The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().",
    "tag": "CWE-560",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use umask() with the correct argument.\nIf you suspect misuse of umask(), you can use grep to spot call instances of umask().",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3734,
  "fields": {
    "name": "Dead Code",
    "description": "The product contains dead code, which can never be executed.",
    "tag": "CWE-561",
    "cvss": null,
    "risk_rating": "",
    "impact": "Dead code that results from code that can never be executed is an indication of problems with the source code that needs to be fixed and is an indication of poor quality.",
    "remediation": "Remove dead code before deploying the application.\nUse a static analysis tool to spot dead code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3735,
  "fields": {
    "name": "Return of Stack Variable Address",
    "description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",
    "tag": "CWE-562",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the returned stack buffer address is dereferenced after the return, then an attacker may be able to modify or read memory, depending on how the address is used.  If the address is used for reading, then the address itself may be exposed, or the contents that the address points to.  If the address is used for writing, this can lead to a crash and possibly code execution.",
    "remediation": "Use static analysis tools to spot return of the address of a stack variable.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3736,
  "fields": {
    "name": "Assignment to Variable without Use",
    "description": "The variable's value is assigned but never used, making it a dead store.",
    "tag": "CWE-563",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness could be an indication of a bug in the program or a deprecated variable that was not removed and is an indication of poor quality. This could lead to further bugs and the introduction of weaknesses.",
    "remediation": "Remove unused variables from the code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3737,
  "fields": {
    "name": "SQL Injection: Hibernate",
    "description": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.",
    "tag": "CWE-564",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "A non-SQL style database which is not subject to this flaw may be chosen.\nFollow the principle of least privilege when creating user accounts to a SQL database. Users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data.\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nImplement SQL strings using prepared statements that bind variables. Prepared statements that do not bind variables can be vulnerable to attack.\nUse vigorous allowlist style checking on any user input that may be used in a SQL command. Rather than escape meta-characters, it is safest to disallow them entirely. Reason: Later use of data that have been entered in the database may neglect to escape meta-characters before use. Narrowly define the set of safe characters based on the expected value of the parameter in the request.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3738,
  "fields": {
    "name": "Reliance on Cookies without Validation and Integrity Checking",
    "description": "The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.",
    "tag": "CWE-565",
    "cvss": null,
    "risk_rating": "",
    "impact": "It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to escalate an attacker's privileges to an administrative level.",
    "remediation": "Avoid using cookie data for a security-related decision.\nPerform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nAdd integrity checks to detect tampering.\nProtect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3739,
  "fields": {
    "name": "Authorization Bypass Through User-Controlled SQL Primary Key",
    "description": "The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.",
    "tag": "CWE-566",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Assume all input is malicious. Use a standard input validation mechanism to validate all input for length, type, syntax, and business rules before accepting the data. Use an \"accept known good\" validation strategy.\nUse a parameterized query AND make sure that the accepted values conform to the business rules. Construct your SQL statement accordingly.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3740,
  "fields": {
    "name": "Unsynchronized Access to Shared Data in a Multithreaded Context",
    "description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.",
    "tag": "CWE-567",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the shared variable contains sensitive data, it may be manipulated or displayed in another user session. If this data is used to control the application, its value can be manipulated to cause the application to crash or perform poorly.",
    "remediation": "Remove the use of static variables used between servlets. If this cannot be avoided, use synchronized access for these variables.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3741,
  "fields": {
    "name": "finalize() Method Without super.finalize()",
    "description": "The product contains a finalize() method that does not call super.finalize().",
    "tag": "CWE-568",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Call the super.finalize() method.\nUse static analysis tools to spot such issues in your code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3742,
  "fields": {
    "name": "Path Equivalence: 'fakedir/../realdir/filename'",
    "description": "The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.",
    "tag": "CWE-57",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3743,
  "fields": {
    "name": "Expression is Always False",
    "description": "The product contains an expression that will always evaluate to false.",
    "tag": "CWE-570",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use Static Analysis tools to spot such conditions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3744,
  "fields": {
    "name": "Expression is Always True",
    "description": "The product contains an expression that will always evaluate to true.",
    "tag": "CWE-571",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use Static Analysis tools to spot such conditions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3745,
  "fields": {
    "name": "Call to Thread run() instead of start()",
    "description": "The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.",
    "tag": "CWE-572",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use the start() method instead of the run() method.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3746,
  "fields": {
    "name": "Improper Following of Specification by Caller",
    "description": "The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.",
    "tag": "CWE-573",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3747,
  "fields": {
    "name": "EJB Bad Practices: Use of Synchronization Primitives",
    "description": "The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.",
    "tag": "CWE-574",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use Synchronization Primitives when writing EJBs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3748,
  "fields": {
    "name": "EJB Bad Practices: Use of AWT Swing",
    "description": "The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.",
    "tag": "CWE-575",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use AWT/Swing when writing EJBs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3749,
  "fields": {
    "name": "EJB Bad Practices: Use of Java I/O",
    "description": "The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.",
    "tag": "CWE-576",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use Java I/O when writing EJBs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3750,
  "fields": {
    "name": "EJB Bad Practices: Use of Sockets",
    "description": "The product violates the Enterprise JavaBeans (EJB) specification by using sockets.",
    "tag": "CWE-577",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use Sockets when writing EJBs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3751,
  "fields": {
    "name": "EJB Bad Practices: Use of Class Loader",
    "description": "The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.",
    "tag": "CWE-578",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use the Class Loader when writing EJBs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3752,
  "fields": {
    "name": "J2EE Bad Practices: Non-serializable Object Stored in Session",
    "description": "The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.",
    "tag": "CWE-579",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3753,
  "fields": {
    "name": "Path Equivalence: Windows 8.3 Filename",
    "description": "The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short \"8.3\" filename.",
    "tag": "CWE-58",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3754,
  "fields": {
    "name": "clone() Method Without super.clone()",
    "description": "The product contains a clone() method that does not call super.clone() to obtain the new object.",
    "tag": "CWE-580",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Call super.clone() within your clone() method, when obtaining a new object.\nIn some cases, you can eliminate the clone method altogether and use copy constructors.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3755,
  "fields": {
    "name": "Object Model Violation: Just One of Equals and Hashcode Defined",
    "description": "The product does not maintain equal hashcodes for equal objects.",
    "tag": "CWE-581",
    "cvss": null,
    "risk_rating": "",
    "impact": "If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes.",
    "remediation": "Both Equals() and Hashcode() should be defined.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3756,
  "fields": {
    "name": "Array Declared Public, Final, and Static",
    "description": "The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.",
    "tag": "CWE-582",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "In most situations the array should be made private.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3757,
  "fields": {
    "name": "finalize() Method Declared Public",
    "description": "The product violates secure coding principles for mobile code by declaring a finalize() method public.",
    "tag": "CWE-583",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3758,
  "fields": {
    "name": "Return Inside Finally Block",
    "description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.",
    "tag": "CWE-584",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3759,
  "fields": {
    "name": "Empty Synchronized Block",
    "description": "The product contains an empty synchronized block.",
    "tag": "CWE-585",
    "cvss": null,
    "risk_rating": "",
    "impact": "An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code.",
    "remediation": "When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3760,
  "fields": {
    "name": "Explicit Call to Finalize()",
    "description": "The product makes an explicit call to the finalize() method from outside the finalizer.",
    "tag": "CWE-586",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not make explicit calls to finalize(). Use static analysis tools to spot such instances.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3761,
  "fields": {
    "name": "Assignment of a Fixed Address to a Pointer",
    "description": "The product sets a pointer to a specific address other than NULL or 0.",
    "tag": "CWE-587",
    "cvss": null,
    "risk_rating": "",
    "impact": "If one executes code at a known location, an attacker might be able to inject code there beforehand.\nIf the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash.\nThe data at a known pointer location can be easily read or influenced by an attacker.",
    "remediation": "Never set a pointer to a fixed address.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3762,
  "fields": {
    "name": "Attempt to Access Child of a Non-structure Pointer",
    "description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.",
    "tag": "CWE-588",
    "cvss": null,
    "risk_rating": "",
    "impact": "Adjacent variables in memory may be corrupted by assignments performed on fields after the cast.\nExecution may end due to a memory access error.",
    "remediation": "The choice could be made to use a language that is not susceptible to these issues.\nReview of type casting operations can identify locations where incompatible types are cast.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3763,
  "fields": {
    "name": "Call to Non-ubiquitous API",
    "description": "The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.",
    "tag": "CWE-589",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always test your code on any platform on which it is targeted to run on.\nTest your code on the newest and oldest platform on which it is targeted to run on.\nDevelop a system to test for API functions that are not portable.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3764,
  "fields": {
    "name": "Improper Link Resolution Before File Access ('Link Following')",
    "description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.",
    "tag": "CWE-59",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism.\nWindows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a \".LNK\" file can be uploaded like a normal file. This can enable remote execution.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3765,
  "fields": {
    "name": "Free of Memory not on the Heap",
    "description": "The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",
    "tag": "CWE-590",
    "cvss": null,
    "risk_rating": "",
    "impact": "There is the potential for arbitrary code execution with privileges of the vulnerable program via a \"write, what where\" primitive. If pointers to memory which hold user information are freed, a malicious user will be able to write 4 bytes anywhere in memory.",
    "remediation": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once.\nBefore freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program.\n\n                  \nUse a language that provides abstractions for memory allocation and deallocation.\nUse a tool that dynamically detects memory management problems, such as valgrind.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3766,
  "fields": {
    "name": "Sensitive Data Storage in Improperly Locked Memory",
    "description": "The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.",
    "tag": "CWE-591",
    "cvss": null,
    "risk_rating": "",
    "impact": "Sensitive data that is written to a swap file may be exposed.",
    "remediation": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms.\nCheck return values to ensure locking operations are successful.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3767,
  "fields": {
    "name": "DEPRECATED: Authentication Bypass Issues",
    "description": "This weakness has been deprecated because it covered redundant concepts already described in CWE-287.",
    "tag": "CWE-592",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3768,
  "fields": {
    "name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created",
    "description": "The product modifies the SSL context after connection creation has begun.",
    "tag": "CWE-593",
    "cvss": null,
    "risk_rating": "",
    "impact": "No authentication takes place in this process, bypassing an assumed protection of encryption.\nThe encrypted communication between a user and a trusted host may be subject to a sniffing attack.",
    "remediation": "Use a language or a library that provides a cryptography framework at a higher level of abstraction.\nMost SSL_CTX functions have SSL counterparts that act on SSL-type objects.\nApplications should set up an SSL_CTX completely, before creating SSL objects from it.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3769,
  "fields": {
    "name": "J2EE Framework: Saving Unserializable Objects to Disk",
    "description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.",
    "tag": "CWE-594",
    "cvss": null,
    "risk_rating": "",
    "impact": "Data represented by unserializable objects can be corrupted.\nNon-serializability of objects can lead to system crash.",
    "remediation": "All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3770,
  "fields": {
    "name": "Comparison of Object References Instead of Object Contents",
    "description": "The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",
    "tag": "CWE-595",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can lead to erroneous results that can cause unexpected application behaviors.",
    "remediation": "In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3771,
  "fields": {
    "name": "DEPRECATED: Incorrect Semantic Object Comparison",
    "description": "This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.",
    "tag": "CWE-596",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3772,
  "fields": {
    "name": "Use of Wrong Operator in String Comparison",
    "description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.",
    "tag": "CWE-597",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Within Java, use .equals() to compare string values.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3773,
  "fields": {
    "name": "Use of GET Request Method With Sensitive Query Strings",
    "description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.",
    "tag": "CWE-598",
    "cvss": null,
    "risk_rating": "",
    "impact": "At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers.",
    "remediation": "When sensitive information is sent, use the POST method (e.g. registration form).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3774,
  "fields": {
    "name": "Missing Validation of OpenSSL Certificate",
    "description": "The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.",
    "tag": "CWE-599",
    "cvss": null,
    "risk_rating": "",
    "impact": "The data read may not be properly secured, it might be viewed by an attacker.\nTrust afforded to the system in question may allow for spoofing or redirection attacks.\nIf the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access.",
    "remediation": "Ensure that proper authentication is included in the system design.\nUnderstand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3775,
  "fields": {
    "name": "J2EE Misconfiguration: Insufficient Session-ID Length",
    "description": "The J2EE application is configured to use an insufficient session ID length.",
    "tag": "CWE-6",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attacker can guess an authenticated user's session identifier, they can take over the user's session.",
    "remediation": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks.\nA lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3776,
  "fields": {
    "name": "Uncaught Exception in Servlet ",
    "description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information.",
    "tag": "CWE-600",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Implement Exception blocks to handle all types of Exceptions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3777,
  "fields": {
    "name": "URL Redirection to Untrusted Site ('Open Redirect')",
    "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.",
    "tag": "CWE-601",
    "cvss": null,
    "risk_rating": "",
    "impact": "The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data.\nThe user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site.",
    "remediation": "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page.\n\n                  \nEnsure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).\n\n                  \nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3778,
  "fields": {
    "name": "Client-Side Enforcement of Server-Side Security",
    "description": "The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.",
    "tag": "CWE-602",
    "cvss": null,
    "risk_rating": "",
    "impact": "Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash.\nClient-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions.",
    "remediation": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path.\nUse dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3779,
  "fields": {
    "name": "Use of Client-Side Authentication",
    "description": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.",
    "tag": "CWE-603",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not rely on client side data. Always perform server side authentication.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3780,
  "fields": {
    "name": "Multiple Binds to the Same Port",
    "description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.",
    "tag": "CWE-605",
    "cvss": null,
    "risk_rating": "",
    "impact": "Packets from a variety of network services may be stolen or the services spoofed.",
    "remediation": "Restrict server socket address to known local addresses.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3781,
  "fields": {
    "name": "Unchecked Input for Loop Condition",
    "description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.",
    "tag": "CWE-606",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not use user-controlled data for loop conditions.\nPerform input validation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3782,
  "fields": {
    "name": "Public Static Final Field References Mutable Object",
    "description": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.",
    "tag": "CWE-607",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Protect mutable objects by making them private. Restrict access to the getter and setter as well.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3783,
  "fields": {
    "name": "Struts: Non-private Field in ActionForm Class",
    "description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.",
    "tag": "CWE-608",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3784,
  "fields": {
    "name": "Double-Checked Locking",
    "description": "The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.",
    "tag": "CWE-609",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3785,
  "fields": {
    "name": "UNIX Symbolic Link (Symlink) Following",
    "description": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "tag": "CWE-61",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3786,
  "fields": {
    "name": "Externally Controlled Reference to a Resource in Another Sphere",
    "description": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.",
    "tag": "CWE-610",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3787,
  "fields": {
    "name": "Improper Restriction of XML External Entity Reference",
    "description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.",
    "tag": "CWE-611",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.\nThe DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.\nThe product could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing.",
    "remediation": "Many XML parsers and validators can be configured to disable external entity expansion.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3788,
  "fields": {
    "name": "Improper Authorization of Index Containing Sensitive Information",
    "description": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.",
    "tag": "CWE-612",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3789,
  "fields": {
    "name": "Insufficient Session Expiration",
    "description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"",
    "tag": "CWE-613",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Set sessions/credentials expiration date.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3790,
  "fields": {
    "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
    "description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.",
    "tag": "CWE-614",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always set the secure attribute when the cookie should sent via HTTPS only.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3791,
  "fields": {
    "name": "Inclusion of Sensitive Information in Source Code Comments",
    "description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.",
    "tag": "CWE-615",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3792,
  "fields": {
    "name": "Incomplete Identification of Uploaded File Variables (PHP)",
    "description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.",
    "tag": "CWE-616",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use PHP 4 or later.\nIf you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))\nFor later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3793,
  "fields": {
    "name": "Reachable Assertion",
    "description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.",
    "tag": "CWE-617",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session.",
    "remediation": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)\nPerform input validation on user data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3794,
  "fields": {
    "name": "Exposed Unsafe ActiveX Method",
    "description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).",
    "tag": "CWE-618",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities.\nUse code signing, although this does not protect against any weaknesses that are already in the control.\nWhere possible, avoid marking the control as safe for scripting.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3795,
  "fields": {
    "name": "Dangling Database Cursor ('Cursor Injection')",
    "description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\"",
    "tag": "CWE-619",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3796,
  "fields": {
    "name": "UNIX Hard Link",
    "description": "The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "tag": "CWE-62",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3797,
  "fields": {
    "name": "Unverified Password Change",
    "description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.",
    "tag": "CWE-620",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When prompting for a password change, force the user to provide the original password in addition to the new password.\nDo not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3798,
  "fields": {
    "name": "Variable Extraction Error",
    "description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.",
    "tag": "CWE-621",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could modify sensitive data or program variables.",
    "remediation": "Use allowlists of variable names that can be extracted.\nConsider refactoring your code to avoid extraction routines altogether.\nIn PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3799,
  "fields": {
    "name": "Improper Validation of Function Hook Arguments",
    "description": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.",
    "tag": "CWE-622",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that all arguments are verified, as defined by the API you are protecting.\nDrop privileges before invoking such functions, if possible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3800,
  "fields": {
    "name": "Unsafe ActiveX Control Marked Safe For Scripting",
    "description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.",
    "tag": "CWE-623",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "During development, do not mark it as safe for scripting.\nAfter distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3801,
  "fields": {
    "name": "Executable Regular Expression Error",
    "description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.",
    "tag": "CWE-624",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3802,
  "fields": {
    "name": "Permissive Regular Expression",
    "description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values.",
    "tag": "CWE-625",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3803,
  "fields": {
    "name": "Null Byte Interaction Error (Poison Null Byte)",
    "description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components.",
    "tag": "CWE-626",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Remove null bytes from all incoming strings.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3804,
  "fields": {
    "name": "Dynamic Variable Evaluation",
    "description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.",
    "tag": "CWE-627",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain unauthorized access to internal program variables and execute arbitrary code.",
    "remediation": "Refactor the code to avoid dynamic variable evaluation whenever possible.\nUse only allowlists of acceptable variable or function names.\nFor function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3805,
  "fields": {
    "name": "Function Call with Incorrectly Specified Arguments",
    "description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",
    "tag": "CWE-628",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources.",
    "remediation": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA.\nMake sure your API's are stable before you use them in production code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3806,
  "fields": {
    "name": "Not Failing Securely ('Failing Open')",
    "description": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.",
    "tag": "CWE-636",
    "cvss": null,
    "risk_rating": "",
    "impact": "Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects.",
    "remediation": "Subdivide and allocate resources and components so that a failure in one part does not affect the entire product.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3807,
  "fields": {
    "name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')",
    "description": "The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.",
    "tag": "CWE-637",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3808,
  "fields": {
    "name": "Not Using Complete Mediation",
    "description": "The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.",
    "tag": "CWE-638",
    "cvss": null,
    "risk_rating": "",
    "impact": "A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource.",
    "remediation": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible.\nIdentify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3809,
  "fields": {
    "name": "Authorization Bypass Through User-Controlled Key",
    "description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.",
    "tag": "CWE-639",
    "cvss": null,
    "risk_rating": "",
    "impact": "Access control checks for specific user data or functionality can be bypassed.\nHorizontal escalation of privilege is possible (one user can view/modify information of another user).\nVertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access.",
    "remediation": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested.\nMake sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected.\nUse encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3810,
  "fields": {
    "name": "Windows Shortcut Following (.LNK)",
    "description": "The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "tag": "CWE-64",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3811,
  "fields": {
    "name": "Weak Password Recovery Mechanism for Forgotten Password",
    "description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.",
    "tag": "CWE-640",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials.\nAn attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users.\nThe system's security functionality is turned against the system by the attacker.",
    "remediation": "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated.\nDo not use standard weak security questions and use several security questions.\nMake sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses.\nRequire that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record.\nNever allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism.\nAssign a new temporary password rather than revealing the original password.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3812,
  "fields": {
    "name": "Improper Restriction of Names for Files and Other Resources",
    "description": "The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.",
    "tag": "CWE-641",
    "cvss": null,
    "risk_rating": "",
    "impact": "Execution of arbitrary code in the context of usage of the resources with dangerous names.\nCrash of the consumer code of these resources resulting in information leakage or denial of service.",
    "remediation": "Do not allow users to control names of resources used on the server side.\nPerform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them.\nMake sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3813,
  "fields": {
    "name": "External Control of Critical State Data",
    "description": "The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.",
    "tag": "CWE-642",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges.\nThe state variables may contain sensitive information that should not be known by the client.\nBy modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition.",
    "remediation": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked.\n\n                  \nStore state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.\n\n                  \nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3814,
  "fields": {
    "name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
    "description": "The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
    "tag": "CWE-643",
    "cvss": null,
    "risk_rating": "",
    "impact": "Controlling application flow (e.g. bypassing authentication).\nThe attacker could read restricted XML content.",
    "remediation": "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane.\nProperly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3815,
  "fields": {
    "name": "Improper Neutralization of HTTP Headers for Scripting Syntax",
    "description": "The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.",
    "tag": "CWE-644",
    "cvss": null,
    "risk_rating": "",
    "impact": "Run arbitrary code.\nAttackers may be able to obtain sensitive information.",
    "remediation": "Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header.\nDisable script execution functionality in the clients' browser.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3816,
  "fields": {
    "name": "Overly Restrictive Account Lockout Mechanism",
    "description": "The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.",
    "tag": "CWE-645",
    "cvss": null,
    "risk_rating": "",
    "impact": "Users could be locked out of accounts.",
    "remediation": "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.\nImplement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout.\nConsider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3817,
  "fields": {
    "name": "Reliance on File Name or Extension of Externally-Supplied File",
    "description": "The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.",
    "tag": "CWE-646",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to read sensitive data.\nAn attacker may be able to cause a denial of service.\nAn attacker may be able to gain privileges.",
    "remediation": "Make decisions on the server side based on file content and not on file name or extension.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3818,
  "fields": {
    "name": "Use of Non-Canonical URL Paths for Authorization Decisions",
    "description": "The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.",
    "tag": "CWE-647",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL.\nIf a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program).",
    "remediation": "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form.\nReject all alternate path encodings that are not in the expected canonical form.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3819,
  "fields": {
    "name": "Incorrect Use of Privileged APIs",
    "description": "The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.",
    "tag": "CWE-648",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to elevate privileges.\nAn attacker may be able to obtain sensitive information.\nAn attacker may be able to execute code.",
    "remediation": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call.\nKnow architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely.\nIf privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call.\nIf privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes.\nOnly call privileged APIs from safe, consistent and expected state.\nEnsure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3820,
  "fields": {
    "name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking",
    "description": "The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.",
    "tag": "CWE-649",
    "cvss": null,
    "risk_rating": "",
    "impact": "The inputs could be modified without detection, causing the product to have unexpected system state or make incorrect security decisions.",
    "remediation": "Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side.\nRepeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout.\nClient side tokens/parameters should not be such that it would be easy/predictable to guess another valid state.\nObfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3821,
  "fields": {
    "name": "Windows Hard Link",
    "description": "The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.",
    "tag": "CWE-65",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3822,
  "fields": {
    "name": "Trusting HTTP Permission Methods on the Server Side",
    "description": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.",
    "tag": "CWE-650",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could escalate privileges.\nAn attacker could modify resources.\nAn attacker could obtain sensitive information.",
    "remediation": "Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3823,
  "fields": {
    "name": "Exposure of WSDL File Containing Sensitive Information",
    "description": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).",
    "tag": "CWE-651",
    "cvss": null,
    "risk_rating": "",
    "impact": "The attacker may find sensitive information located in the WSDL file.",
    "remediation": "Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly.\nMake sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls.\nDo not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3824,
  "fields": {
    "name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')",
    "description": "The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.",
    "tag": "CWE-652",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker might be able to read sensitive information from the XML database.",
    "remediation": "Use parameterized queries. This will help ensure separation between data plane and control plane.\nProperly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3825,
  "fields": {
    "name": "Improper Isolation or Compartmentalization",
    "description": "The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.",
    "tag": "CWE-653",
    "cvss": null,
    "risk_rating": "",
    "impact": "The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles.",
    "remediation": "Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3826,
  "fields": {
    "name": "Reliance on a Single Factor in a Security Decision",
    "description": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.",
    "tag": "CWE-654",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor.\nIt can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker.",
    "remediation": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security).\nUse redundant access rules on different choke points (e.g., firewalls).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3827,
  "fields": {
    "name": "Insufficient Psychological Acceptability",
    "description": "The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.",
    "tag": "CWE-655",
    "cvss": null,
    "risk_rating": "",
    "impact": "By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise.",
    "remediation": "Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why.\nMake the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3828,
  "fields": {
    "name": "Reliance on Security Through Obscurity",
    "description": "The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.",
    "tag": "CWE-656",
    "cvss": null,
    "risk_rating": "",
    "impact": "The security mechanism can be bypassed easily.",
    "remediation": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others.\nWhen available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3829,
  "fields": {
    "name": "Violation of Secure Design Principles",
    "description": "The product violates well-established principles for secure design.",
    "tag": "CWE-657",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3830,
  "fields": {
    "name": "Improper Handling of File Names that Identify Virtual Resources",
    "description": "The product does not handle or incorrectly handles a file name that identifies a \"virtual\" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.",
    "tag": "CWE-66",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3831,
  "fields": {
    "name": "Improper Synchronization",
    "description": "The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.",
    "tag": "CWE-662",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use industry standard APIs to synchronize your code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3832,
  "fields": {
    "name": "Use of a Non-reentrant Function in a Concurrent Context",
    "description": "The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.",
    "tag": "CWE-663",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use reentrant functions if available.\nAdd synchronization to your non-reentrant function.\nIn Java, use the ReentrantLock Class.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3833,
  "fields": {
    "name": "Improper Control of a Resource Through its Lifetime",
    "description": "The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",
    "tag": "CWE-664",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use Static analysis tools to check for unreleased resources.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3834,
  "fields": {
    "name": "Improper Initialization",
    "description": "The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.",
    "tag": "CWE-665",
    "cvss": null,
    "risk_rating": "",
    "impact": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.\nIf security-critical decisions rely on a variable having a \"0\" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur.\nThe uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments.",
    "remediation": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values.\nExplicitly initialize all your variables and other data stores, either during declaration or just before the first usage.\nPay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization.\nAvoid race conditions (CWE-362) during initialization routines.\nRun or compile your product with settings that generate warnings about uninitialized variables or data.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3835,
  "fields": {
    "name": "Operation on Resource in Wrong Phase of Lifetime",
    "description": "The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.",
    "tag": "CWE-666",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Follow the resource's lifecycle from creation to release.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3836,
  "fields": {
    "name": "Improper Locking",
    "description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
    "tag": "CWE-667",
    "cvss": null,
    "risk_rating": "",
    "impact": "Inconsistent locking discipline can lead to deadlock.",
    "remediation": "Use industry standard APIs to implement locking mechanism.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3837,
  "fields": {
    "name": "Exposure of Resource to Wrong Sphere",
    "description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
    "tag": "CWE-668",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3838,
  "fields": {
    "name": "Incorrect Resource Transfer Between Spheres",
    "description": "The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.",
    "tag": "CWE-669",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3839,
  "fields": {
    "name": "Improper Handling of Windows Device Names",
    "description": "The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.",
    "tag": "CWE-67",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Be familiar with the device names in the operating system where your system is deployed. Check input for these device names.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3840,
  "fields": {
    "name": "Always-Incorrect Control Flow Implementation",
    "description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
    "tag": "CWE-670",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3841,
  "fields": {
    "name": "Lack of Administrator Control over Security",
    "description": "The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.",
    "tag": "CWE-671",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3842,
  "fields": {
    "name": "Operation on a Resource after Expiration or Release",
    "description": "The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",
    "tag": "CWE-672",
    "cvss": null,
    "risk_rating": "",
    "impact": "If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity.\nWhen a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3843,
  "fields": {
    "name": "External Influence of Sphere Definition",
    "description": "The product does not prevent the definition of control spheres from external actors.",
    "tag": "CWE-673",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3844,
  "fields": {
    "name": "Uncontrolled Recursion",
    "description": "The product does not properly control the amount of recursion that takes place,  consuming excessive resources, such as allocated memory or the program stack.",
    "tag": "CWE-674",
    "cvss": null,
    "risk_rating": "",
    "impact": "Resources including CPU, memory, and stack memory could be rapidly consumed or exhausted, eventually leading to an exit or crash.\nIn some cases, an application's interpreter might kill a process or thread that appears to be consuming too much resources, such as with PHP's memory_limit setting. When the interpreter kills the process/thread, it might report an error containing detailed information such as the application's installation path.",
    "remediation": "Ensure an end condition will be reached under all logic conditions.  The end condition may include testing against the depth of recursion and exiting with an error if the recursion goes too deep. The complexity of the end condition contributes to the effectiveness of this action.\nIncrease the stack size.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3845,
  "fields": {
    "name": "Multiple Operations on Resource in Single-Operation Context",
    "description": "The product performs the same operation on a resource two or more times, when the operation should only be applied once.",
    "tag": "CWE-675",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3846,
  "fields": {
    "name": "Use of Potentially Dangerous Function",
    "description": "The product invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",
    "tag": "CWE-676",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the function is used incorrectly, then it could result in security problems.",
    "remediation": "Identify a list of prohibited API functions and prohibit developers from using these functions, providing safer alternatives. In some cases, automatic code analysis tools or the compiler can be instructed to spot use of prohibited functions, such as the \"banned.h\" include file from Microsoft's SDL. [REF-554] [REF-7]",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3847,
  "fields": {
    "name": "Integer Overflow to Buffer Overflow",
    "description": "The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow.",
    "tag": "CWE-680",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3848,
  "fields": {
    "name": "Incorrect Conversion between Numeric Types",
    "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur.",
    "tag": "CWE-681",
    "cvss": null,
    "risk_rating": "",
    "impact": "The program could wind up using the wrong number and generate incorrect results. If the number is used to allocate resources or make a security decision, then this could introduce a vulnerability.",
    "remediation": "Avoid making conversion between numeric types. Always check for the allowed ranges.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3849,
  "fields": {
    "name": "Incorrect Calculation",
    "description": "The product performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
    "tag": "CWE-682",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the incorrect calculation causes the program to move into an unexpected state, it may lead to a crash or impairment of service.\nIf the incorrect calculation is used in the context of resource allocation, it could lead to an out-of-bounds operation (CWE-119) leading to a crash or even arbitrary code execution. Alternatively, it may result in an integer overflow (CWE-190) and / or a resource consumption problem (CWE-400).\nIn the context of privilege or permissions assignment, an incorrect calculation can provide an attacker with access to sensitive resources.\nIf the incorrect calculation leads to an insufficient comparison (CWE-697), it may compromise a protection mechanism such as a validation routine and allow an attacker to bypass the security-critical code.",
    "remediation": "Understand your programming language's underlying representation and how it interacts with numeric calculation. Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how your language handles numbers that are too large or too small for its underlying representation.\nPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\nUse the appropriate type for the desired action. For example, in C/C++, only use unsigned types for values that could never be negative, such as height, width, or other numbers related to quantity.\n\n                  \n\n                  \nExamine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3850,
  "fields": {
    "name": "Function Call With Incorrect Order of Arguments",
    "description": "The product calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses.",
    "tag": "CWE-683",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use the function, procedure, or routine as specified.\nBecause this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3851,
  "fields": {
    "name": "Incorrect Provision of Specified Functionality",
    "description": "The code does not function according to its published specifications, potentially leading to incorrect usage.",
    "tag": "CWE-684",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Ensure that your code strictly conforms to specifications.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3852,
  "fields": {
    "name": "Function Call With Incorrect Number of Arguments",
    "description": "The product calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",
    "tag": "CWE-685",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3853,
  "fields": {
    "name": "Function Call With Incorrect Argument Type",
    "description": "The product calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",
    "tag": "CWE-686",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3854,
  "fields": {
    "name": "Function Call With Incorrectly Specified Argument Value",
    "description": "The product calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",
    "tag": "CWE-687",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3855,
  "fields": {
    "name": "Function Call With Incorrect Variable or Reference as Argument",
    "description": "The product calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",
    "tag": "CWE-688",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Because this function call often produces incorrect behavior it will usually be detected during testing or normal operation of the product. During testing exercise all possible control paths will typically expose this weakness except in rare cases when the incorrect function call accidentally produces the correct results or if the provided argument type is very similar to the expected argument type.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3856,
  "fields": {
    "name": "Permission Race Condition During Resource Copy",
    "description": "The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place.",
    "tag": "CWE-689",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3857,
  "fields": {
    "name": "Improper Handling of Windows ::DATA Alternate Data Stream",
    "description": "The product does not properly prevent access to, or detect usage of, alternate data streams (ADS).",
    "tag": "CWE-69",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Software tools are capable of finding ADSs on your system.\nEnsure that the source code correctly parses the filename to read or write to the correct stream.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3858,
  "fields": {
    "name": "Unchecked Return Value to NULL Pointer Dereference",
    "description": "The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference.",
    "tag": "CWE-690",
    "cvss": null,
    "risk_rating": "",
    "impact": "In rare circumstances, when NULL is equivalent to the 0x0 memory address and privileged code can access it, then writing or reading memory is possible, which may lead to code execution.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3859,
  "fields": {
    "name": "Insufficient Control Flow Management",
    "description": "The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",
    "tag": "CWE-691",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3860,
  "fields": {
    "name": "Incomplete Denylist to Cross-Site Scripting",
    "description": "The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed.",
    "tag": "CWE-692",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3861,
  "fields": {
    "name": "Protection Mechanism Failure",
    "description": "The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.",
    "tag": "CWE-693",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3862,
  "fields": {
    "name": "Use of Multiple Resources with Duplicate Identifier",
    "description": "The product uses multiple resources that can have the same identifier, in a context in which unique identifiers are required.",
    "tag": "CWE-694",
    "cvss": null,
    "risk_rating": "",
    "impact": "If unique identifiers are assumed when protecting sensitive resources, then duplicate identifiers might allow attackers to bypass the protection.",
    "remediation": "Where possible, use unique identifiers. If non-unique identifiers are detected, then do not operate any resource with a non-unique identifier and report the error appropriately.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3863,
  "fields": {
    "name": "Use of Low-Level Functionality",
    "description": "The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.",
    "tag": "CWE-695",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3864,
  "fields": {
    "name": "Incorrect Behavior Order",
    "description": "The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses.",
    "tag": "CWE-696",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3865,
  "fields": {
    "name": "Incorrect Comparison",
    "description": "The product compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
    "tag": "CWE-697",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3866,
  "fields": {
    "name": "Execution After Redirect (EAR)",
    "description": "The web application sends a redirect to another location, but instead of exiting, it executes additional code.",
    "tag": "CWE-698",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness could affect the control flow of the application and allow execution of untrusted code.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3867,
  "fields": {
    "name": "J2EE Misconfiguration: Missing Custom Error Page",
    "description": "The default error page of a web application should not display sensitive information about the product.",
    "tag": "CWE-7",
    "cvss": null,
    "risk_rating": "",
    "impact": "A stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.",
    "remediation": "Handle exceptions appropriately in source code.\nAlways define appropriate error pages. The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.\nDo not attempt to process an error or attempt to mask it.\nVerify return values are correct and do not supply sensitive information about the system.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3868,
  "fields": {
    "name": "Improper Check or Handling of Exceptional Conditions",
    "description": "The product does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the product.",
    "tag": "CWE-703",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3869,
  "fields": {
    "name": "Incorrect Type Conversion or Cast",
    "description": "The product does not correctly convert an object, resource, or structure from one type to a different type.",
    "tag": "CWE-704",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3870,
  "fields": {
    "name": "Incorrect Control Flow Scoping",
    "description": "The product does not properly return control flow to the proper location after it has completed a task or detected an unusual condition.",
    "tag": "CWE-705",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3871,
  "fields": {
    "name": "Use of Incorrectly-Resolved Name or Reference",
    "description": "The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.",
    "tag": "CWE-706",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3872,
  "fields": {
    "name": "Improper Neutralization",
    "description": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.",
    "tag": "CWE-707",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3873,
  "fields": {
    "name": "Incorrect Ownership Assignment",
    "description": "The product assigns an owner to a resource, but the owner is outside of the intended control sphere.",
    "tag": "CWE-708",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could read and modify data for which they do not have permissions to access directly.",
    "remediation": "Periodically review the privileges and their owners.\nUse automated tools to check for privilege settings.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3874,
  "fields": {
    "name": "DEPRECATED: Apple '.DS_Store'",
    "description": "This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62.",
    "tag": "CWE-71",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3875,
  "fields": {
    "name": "Improper Adherence to Coding Standards",
    "description": "The product does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities.",
    "tag": "CWE-710",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Document and closely follow coding standards.\nWhere possible, use automated tools to enforce the standards.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3876,
  "fields": {
    "name": "Improper Handling of Apple HFS+ Alternate Data Stream Path",
    "description": "The product does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system.",
    "tag": "CWE-72",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3877,
  "fields": {
    "name": "External Control of File Name or Path",
    "description": "The product allows user input to control or influence paths or file names that are used in filesystem operations.",
    "tag": "CWE-73",
    "cvss": null,
    "risk_rating": "",
    "impact": "The application can operate on unexpected files. Confidentiality is violated when the targeted filename is not directly readable by the attacker.\nThe application can operate on unexpected files. This may violate integrity if the filename is written to, or if the filename is for a program or other form of executable code.\nThe application can operate on unexpected files. Availability can be violated if the attacker specifies an unexpected file that the application modifies. Availability can also be affected if the attacker specifies a filename for a large file, or points to a special device or a file that does not have the format that the application expects.",
    "remediation": "When the set of filenames is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames, and reject all other inputs. For example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap provide this capability.\n\n                  \nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59).\nUse OS-level permissions and run as a low-privileged user to limit the scope of any successful attack.\nIf you are using PHP, configure your application so that it does not use register_globals. During implementation, develop your application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nUse tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3878,
  "fields": {
    "name": "Incorrect Permission Assignment for Critical Resource",
    "description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
    "tag": "CWE-732",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to read sensitive information from the associated resource, such as credentials or configuration information stored in a file.\nAn attacker may be able to modify critical properties of the associated resource to gain privileges, such as replacing a world-writable executable with a Trojan horse.\nAn attacker may be able to destroy or corrupt critical data in the associated resource, such as deletion of records from a database.",
    "remediation": "When using a critical resource such as a configuration file, check to see if the resource has insecure permissions (such as being modifiable by any regular user) [REF-62], and generate an error or even exit the software if there is a possibility that the resource could have been modified by an unauthorized party.\nDivide the software into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully defining distinct user groups, privileges, and/or roles. Map these against data, functionality, and the related resources. Then set the permissions accordingly. This will allow you to maintain more fine-grained control over your resources. [REF-207]\n\n                  \nDuring program startup, explicitly set the default permissions or umask to the most restrictive setting possible. Also set the appropriate permissions during program installation. This will prevent you from inheriting insecure permissions from any user who installs or runs the program.\nFor all configuration files, executables, and libraries, make sure that they are only readable and writable by the software's administrator.\nDo not suggest insecure configuration changes in documentation, especially if those configurations can extend to resources and other programs that are outside the scope of the application.\nDo not assume that a system administrator will manually change the configuration to the settings that are recommended in the software's manual.\nEnsure that the software runs properly under the Federal Desktop Core Configuration (FDCC) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3879,
  "fields": {
    "name": "Compiler Optimization Removal or Modification of Security-critical Code",
    "description": "The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified.",
    "tag": "CWE-733",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3880,
  "fields": {
    "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
    "description": "The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.",
    "tag": "CWE-74",
    "cvss": null,
    "risk_rating": "",
    "impact": "Many injection attacks involve the disclosure of important information -- in terms of both data sensitivity and usefulness in further exploitation.\nIn some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjection attacks are characterized by the ability to significantly change the flow of a given process, and in some cases, to the execution of arbitrary code.\nData injection attacks lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing.\nOften the actions performed by injected control code are unlogged.",
    "remediation": "Programming languages and supporting technologies might be chosen which are not subject to these issues.\nUtilize an appropriate mix of allowlist and denylist parsing to filter control-plane syntax from all input.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3881,
  "fields": {
    "name": "Exposed Dangerous Method or Function",
    "description": "The product provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted.",
    "tag": "CWE-749",
    "cvss": null,
    "risk_rating": "",
    "impact": "Exposing critical functionality essentially provides an attacker with the privilege level of the exposed functionality. This could result in the modification or exposure of sensitive data or possibly even execution of arbitrary code.",
    "remediation": "If you must expose a method, make sure to perform input validation on all arguments, limit access to authorized parties, and protect against all possible vulnerabilities.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3882,
  "fields": {
    "name": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
    "description": "The product does not adequately filter user-controlled input for special elements with control implications.",
    "tag": "CWE-75",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Programming languages and supporting technologies might be chosen which are not subject to these issues.\nUtilize an appropriate mix of allowlist and denylist parsing to filter special element syntax from all input.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3883,
  "fields": {
    "name": "Improper Check for Unusual or Exceptional Conditions",
    "description": "The product does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the product.",
    "tag": "CWE-754",
    "cvss": null,
    "risk_rating": "",
    "impact": "The data which were produced as a result of a function call could be in a bad state upon return. If the return value is not checked, then this bad data may be used in operations, possibly leading to a crash or other unintended behaviors.",
    "remediation": "Check the results of all functions that return a value and verify that the value is expected.\nIf using exception handling, catch and throw specific exceptions instead of overly-general exceptions (CWE-396, CWE-397). Catch and handle exceptions as locally as possible so that exceptions do not propagate too far up the call stack (CWE-705). Avoid unchecked or uncaught exceptions where feasible (CWE-248).\n\n                  \n\n                  \nIf the program must fail, ensure that it fails gracefully (fails closed). There may be a temptation to simply let the program fail poorly in cases such as low memory conditions, but an attacker may be able to assert control before the software has fully exited. Alternately, an uncontrolled failure could cause cascading problems with other downstream components; for example, the program could send a signal to a downstream process so the process immediately knows that a problem has occurred and has a better chance of recovery.\nUse system limits, which should help to prevent resource exhaustion. However, the product should still handle low resource conditions since they may still occur.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3884,
  "fields": {
    "name": "Improper Handling of Exceptional Conditions",
    "description": "The product does not handle or incorrectly handles an exceptional condition.",
    "tag": "CWE-755",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3885,
  "fields": {
    "name": "Missing Custom Error Page",
    "description": "The product does not return custom error pages to the user, possibly exposing sensitive information.",
    "tag": "CWE-756",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3886,
  "fields": {
    "name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
    "description": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties.",
    "tag": "CWE-757",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3887,
  "fields": {
    "name": "Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",
    "description": "The product uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",
    "tag": "CWE-758",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3888,
  "fields": {
    "name": "Use of a One-Way Hash without a Salt",
    "description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product does not also use a salt as part of the input.",
    "tag": "CWE-759",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attacker can gain access to the hashes, then the lack of a salt makes it easier to conduct brute force attacks using techniques such as rainbow tables.",
    "remediation": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.\nWhen using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3889,
  "fields": {
    "name": "Improper Neutralization of Equivalent Special Elements",
    "description": "The product correctly neutralizes certain special elements, but it improperly neutralizes equivalent special elements.",
    "tag": "CWE-76",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Programming languages and supporting technologies might be chosen which are not subject to these issues.\nUtilize an appropriate mix of allowlist and denylist parsing to filter equivalent special element syntax from all input.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3890,
  "fields": {
    "name": "Use of a One-Way Hash with a Predictable Salt",
    "description": "The product uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the product uses a predictable salt as part of the input.",
    "tag": "CWE-760",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "If a technique that requires extra computational effort can not be implemented, then for each password that is processed, generate a new random salt using a strong random number generator with unpredictable seeds. Add the salt to the plaintext password before hashing it. When storing the hash, also store the salt. Do not use the same salt for every password.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3891,
  "fields": {
    "name": "Free of Pointer not at Start of Buffer",
    "description": "The product calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer.",
    "tag": "CWE-761",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When utilizing pointer arithmetic to traverse a buffer, use a separate variable to track progress through memory and preserve the originally allocated address for later freeing.\nWhen programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.\n\n                  \nUse a language that provides abstractions for memory allocation and deallocation.\nUse a tool that dynamically detects memory management problems, such as valgrind.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3892,
  "fields": {
    "name": "Mismatched Memory Management Routines",
    "description": "The product attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",
    "tag": "CWE-762",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\n\n                  \n\n                  \nUse a language that provides abstractions for memory allocation and deallocation.\nUse a tool that dynamically detects memory management problems, such as valgrind.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3893,
  "fields": {
    "name": "Release of Invalid Pointer or Reference",
    "description": "The product attempts to return a memory resource to the system, but it calls the wrong release function or calls the appropriate release function incorrectly.",
    "tag": "CWE-763",
    "cvss": null,
    "risk_rating": "",
    "impact": "This weakness may result in the corruption of memory, and perhaps instructions, possibly leading to a crash. If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code.",
    "remediation": "Only call matching memory management functions. Do not mix and match routines. For example, when you allocate a buffer with malloc(), dispose of the original pointer with free().\nWhen programming in C++, consider using smart pointers provided by the boost library to help correctly and consistently manage memory.\n\n                  \nUse a language that provides abstractions for memory allocation and deallocation.\nUse a tool that dynamically detects memory management problems, such as valgrind.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3894,
  "fields": {
    "name": "Multiple Locks of a Critical Resource",
    "description": "The product locks a critical resource more times than intended, leading to an unexpected state in the system.",
    "tag": "CWE-764",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the software acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3895,
  "fields": {
    "name": "Multiple Unlocks of a Critical Resource",
    "description": "The product unlocks a critical resource more times than intended, leading to an unexpected state in the system.",
    "tag": "CWE-765",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "When locking and unlocking a resource, try to be sure that all control paths through the code in which the resource is locked one or more times correspond to exactly as many unlocks. If the product acquires a lock and then determines it is not able to perform its intended behavior, be sure to release the lock(s) before waiting for conditions to improve. Reacquire the lock(s) before trying again.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3896,
  "fields": {
    "name": "Critical Data Element Declared Public",
    "description": "The product declares a critical variable, field, or member to be public when intended security policy requires it to be private.",
    "tag": "CWE-766",
    "cvss": null,
    "risk_rating": "",
    "impact": "Making a critical variable public allows anyone with access to the object in which the variable is contained to alter or read the value.",
    "remediation": "Data should be private, static, and final whenever possible. This will assure that your code is protected by instantiating early, preventing access, and preventing tampering.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3897,
  "fields": {
    "name": "Access to Critical Private Variable via Public Method",
    "description": "The product defines a public method that reads or modifies a private variable.",
    "tag": "CWE-767",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use class accessor and mutator methods appropriately. Perform validation when accepting data from a public method that is intended to modify a critical private variable. Also be sure that appropriate access controls are being applied when a public method interfaces with critical data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3898,
  "fields": {
    "name": "Incorrect Short Circuit Evaluation",
    "description": "The product contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",
    "tag": "CWE-768",
    "cvss": null,
    "risk_rating": "",
    "impact": "Widely varied consequences are possible if an attacker is aware of an unexpected state in the product after a conditional. It may lead to information exposure, a system crash, or even complete attacker control of the system.",
    "remediation": "Minimizing the number of statements in a conditional that produce side effects will help to prevent the likelihood of short circuit evaluation to alter control flow in an unexpected way.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3899,
  "fields": {
    "name": "DEPRECATED: Uncontrolled File Descriptor Consumption",
    "description": "This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774.",
    "tag": "CWE-769",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3900,
  "fields": {
    "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
    "description": "The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
    "tag": "CWE-77",
    "cvss": null,
    "risk_rating": "",
    "impact": "If a malicious user injects a character (such as a semi-colon) that delimits the end of one command and the beginning of another, it may be possible to then insert an entirely new and unrelated command that was not intended to be executed.",
    "remediation": "If at all possible, use library calls rather than external processes to recreate the desired functionality.\nIf possible, ensure that all external commands called from the program are statically created.\n\n                  \nRun time: Run time policy enforcement may be used in an allowlist fashion to prevent use of any non-sanctioned commands.\nAssign permissions that prevent the user from accessing/opening privileged files.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3901,
  "fields": {
    "name": "Allocation of Resources Without Limits or Throttling",
    "description": "The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.",
    "tag": "CWE-770",
    "cvss": null,
    "risk_rating": "",
    "impact": "When allocating resources without limits, an attacker could prevent other systems, applications, or processes from accessing the same type of resource.",
    "remediation": "Clearly specify the minimum and maximum expectations for capabilities, and dictate which behaviors are acceptable when resource allocation reaches limits.\nLimit the amount of resources that are accessible to unprivileged users. Set per-user limits for resources. Allow the system administrator to define these limits. Be careful to avoid CWE-410.\nDesign throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place, and it will help the administrator to identify who is committing the abuse. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold.\n\n                  \nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \nEnsure that protocols have specific limits of scale placed on them.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3902,
  "fields": {
    "name": "Missing Reference to Active Allocated Resource",
    "description": "The product does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",
    "tag": "CWE-771",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3903,
  "fields": {
    "name": "Missing Release of Resource after Effective Lifetime",
    "description": "The product does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",
    "tag": "CWE-772",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.",
    "remediation": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free resources in a function. If you allocate resources that you intend to free upon completion of the function, you must be sure to free the resources at all exit points for that function including error conditions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3904,
  "fields": {
    "name": "Missing Reference to Active File Descriptor or Handle",
    "description": "The product does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed.",
    "tag": "CWE-773",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker that can influence the allocation of resources that are not properly maintained could deplete the available resource pool and prevent all other processes from accessing the same type of resource.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3905,
  "fields": {
    "name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
    "description": "The product allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor.",
    "tag": "CWE-774",
    "cvss": null,
    "risk_rating": "",
    "impact": "When allocating resources without limits, an attacker could prevent all other processes from accessing the same type of resource.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3906,
  "fields": {
    "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
    "description": "The product does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.",
    "tag": "CWE-775",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker that can influence the allocation of resources that are not properly released could deplete the available resource pool and prevent all other processes from accessing the same type of resource.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3907,
  "fields": {
    "name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
    "description": "The product uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities.",
    "tag": "CWE-776",
    "cvss": null,
    "risk_rating": "",
    "impact": "If parsed, recursive entity references allow the attacker to expand data exponentially, quickly consuming all system resources.",
    "remediation": "If possible, prohibit the use of DTDs or use an XML parser that limits the expansion of recursive DTD entities.\nBefore parsing XML files with associated DTDs, scan for recursive entity declarations and do not continue parsing potentially explosive content.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3908,
  "fields": {
    "name": "Regular Expression without Anchors",
    "description": "The product uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through.",
    "tag": "CWE-777",
    "cvss": null,
    "risk_rating": "",
    "impact": "An unanchored regular expression in the context of an allowlist will possibly result in a protection mechanism failure, allowing malicious or malformed data to enter trusted regions of the program. The specific consequences will depend on what functionality the allowlist was protecting.",
    "remediation": "Be sure to understand both what will be matched and what will not be matched by a regular expression. Anchoring the ends of the expression will allow the programmer to define an allowlist strictly limited to what is matched by the text in the regular expression. If you are using a package that only matches one line by default, ensure that you can match multi-line inputs if necessary.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3909,
  "fields": {
    "name": "Insufficient Logging",
    "description": "When a security-critical event occurs, the product either does not record the event or omits important details about the event when logging it.",
    "tag": "CWE-778",
    "cvss": null,
    "risk_rating": "",
    "impact": "If security critical information is not recorded, there will be no trail for forensic analysis and discovering the cause of problems or the source of attacks may become more difficult or impossible.",
    "remediation": "Use a centralized logging mechanism that supports multiple levels of detail.\nEnsure that all security-related successes and failures can be logged. When storing data in the cloud (e.g., AWS S3 buckets, Azure blobs, Google Cloud Storage, etc.), use the provider's controls to enable and capture detailed logging information.\nBe sure to set the level of logging appropriately in a production environment. Sufficient data should be logged to enable system administrators to detect attacks, diagnose errors, and recover from attacks. At the same time, logging too much data (CWE-779) can cause the same problems, including unexpected costs when using a cloud environment.\nTo enable storage logging using Azure's Portal, navigate to the name of the Storage Account, locate Monitoring (CLASSIC) section, and select Diagnostic settings (classic). For each of the various properties (blob, file, table, queue), ensure the status is properly set for the desired logging data. If using PowerShell, the Set-AzStorageServiceLoggingProperty command could be called using appropriate -ServiceType, -LoggingOperations, and -RetentionDays arguments.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3910,
  "fields": {
    "name": "Logging of Excessive Data",
    "description": "The product logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack.",
    "tag": "CWE-779",
    "cvss": null,
    "risk_rating": "",
    "impact": "Log files can become so large that they consume excessive resources, such as disk and CPU, which can hinder the performance of the system.\nLogging too much information can make the log files of less use to forensics analysts and developers when trying to diagnose a problem or recover from an attack.\nIf system administrators are unable to effectively process log files, attempted attacks may go undetected, possibly leading to eventual system compromise.",
    "remediation": "Suppress large numbers of duplicate log messages and replace them with periodic summaries. For example, syslog may include an entry that states \"last message repeated X times\" when recording repeated events.\nSupport a maximum size for the log file that can be controlled by the administrator. If the maximum size is reached, the admin should be notified. Also, consider reducing functionality of the product. This may result in a denial-of-service to legitimate product users, but it will prevent the product from adversely impacting the entire system.\nAdjust configurations appropriately when the product is transitioned from a debug state to production.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3911,
  "fields": {
    "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
    "description": "The product constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
    "tag": "CWE-78",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers could execute unauthorized commands, which could then be used to disable the product, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner.",
    "remediation": "If at all possible, use library calls rather than external processes to recreate the desired functionality.\n\n                  \nFor any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field.\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\nIf the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line.\n\n                  \n\n                  \nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\n\n                  \nUse runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this.\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3912,
  "fields": {
    "name": "Use of RSA Algorithm without OAEP",
    "description": "The product uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.",
    "tag": "CWE-780",
    "cvss": null,
    "risk_rating": "",
    "impact": "Without OAEP in RSA encryption, it will take less work for an attacker to decrypt the data or to infer patterns from the ciphertext.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3913,
  "fields": {
    "name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
    "description": "The product defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided.",
    "tag": "CWE-781",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to access memory that belongs to another process or user. If the attacker can control the contents that the IOCTL writes, it may lead to code execution at high privilege levels. At the least, a crash can occur.",
    "remediation": "If METHOD_NEITHER is required for the IOCTL, then ensure that all user-space addresses are properly validated before they are first accessed. The ProbeForRead and ProbeForWrite routines are available for this task. Also properly protect and manage the user-supplied buffers, since the I/O Manager does not do this when METHOD_NEITHER is being used. See References.\nIf possible, avoid using METHOD_NEITHER in the IOCTL and select methods that effectively control the buffer size, such as METHOD_BUFFERED, METHOD_IN_DIRECT, or METHOD_OUT_DIRECT.\nIf the IOCTL is part of a driver that is only intended to be accessed by trusted users, then use proper access control for the associated device or device namespace. See References.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3914,
  "fields": {
    "name": "Exposed IOCTL with Insufficient Access Control",
    "description": "The product implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL.",
    "tag": "CWE-782",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can invoke any functionality that the IOCTL offers. Depending on the functionality, the consequences may include code execution, denial-of-service, and theft of data.",
    "remediation": "In Windows environments, use proper access control for the associated device or device namespace. See References.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3915,
  "fields": {
    "name": "Operator Precedence Logic Error",
    "description": "The product uses an expression in which operator precedence causes incorrect logic to be used.",
    "tag": "CWE-783",
    "cvss": null,
    "risk_rating": "",
    "impact": "The consequences will vary based on the context surrounding the incorrect precedence. In a security decision, integrity or confidentiality are the most likely results. Otherwise, a crash may occur due to the software reaching an unexpected state.",
    "remediation": "Regularly wrap sub-expressions in parentheses, especially in security-critical code.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3916,
  "fields": {
    "name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
    "description": "The product uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user.",
    "tag": "CWE-784",
    "cvss": null,
    "risk_rating": "",
    "impact": "It is dangerous to use cookies to set a user's privileges. The cookie can be manipulated to claim a high level of authorization, or to claim that successful authentication has occurred.",
    "remediation": "Avoid using cookie data for a security-related decision.\nPerform thorough input validation (i.e.: server side validation) on the cookie data if you're going to use it for a security related decision.\nAdd integrity checks to detect tampering.\nProtect critical cookies from replay attacks, since cross-site scripting or other attacks may allow attackers to steal a strongly-encrypted cookie that also passes integrity checks. This mitigation applies to cookies that should only be valid during a single transaction or session. By enforcing timeouts, you may limit the scope of an attack. As part of your integrity check, use an unpredictable, server-side value that is not exposed to the client.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3917,
  "fields": {
    "name": "Use of Path Manipulation Function without Maximum-sized Buffer",
    "description": "The product invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX.",
    "tag": "CWE-785",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always specify output buffers large enough to handle the maximum-size possible result from path manipulation functions.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3918,
  "fields": {
    "name": "Access of Memory Location Before Start of Buffer",
    "description": "The product reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
    "tag": "CWE-786",
    "cvss": null,
    "risk_rating": "",
    "impact": "For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash.\nIf the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3919,
  "fields": {
    "name": "Out-of-bounds Write",
    "description": "The product writes data past the end, or before the beginning, of the intended buffer.",
    "tag": "CWE-787",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Use a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].\nReplace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3920,
  "fields": {
    "name": "Access of Memory Location After End of Buffer",
    "description": "The product reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.",
    "tag": "CWE-788",
    "cvss": null,
    "risk_rating": "",
    "impact": "For an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffers position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences.\nOut of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nIf the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3921,
  "fields": {
    "name": "Memory Allocation with Excessive Size Value",
    "description": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated.",
    "tag": "CWE-789",
    "cvss": null,
    "risk_rating": "",
    "impact": "Not controlling memory allocation can result in a request for too much system memory, possibly leading to a crash of the application due to out-of-memory conditions, or the consumption of a large amount of memory on the system.",
    "remediation": "Perform adequate input validation against any value that influences the amount of memory that is allocated. Define an appropriate strategy for handling requests that exceed the limit, and consider supporting a configuration option so that the administrator can extend the amount of memory to be used if necessary.\nRun your program using system-provided resource limits for memory. This might still cause the program to crash or exit, but the impact to the rest of the system will be minimized.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3922,
  "fields": {
    "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "description": "The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.",
    "tag": "CWE-79",
    "cvss": null,
    "risk_rating": "",
    "impact": "The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. Typically, a malicious user will craft a client-side script, which -- when parsed by a web browser -- performs some activity (such as sending all site cookies to a given E-mail address). This script will be loaded and run by each user visiting the web site. Since the site requesting to run the script has access to the cookies in question, the malicious script does also.\nIn some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws.\nThe consequence of an XSS attack is the same regardless of whether it is stored or reflected. The difference is in how the payload arrives at the server. XSS can cause a variety of problems for the end user that range in severity from an annoyance to complete account compromise. Some cross-site scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running \"Active X\" controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.",
    "remediation": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.\n\n                  \nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3923,
  "fields": {
    "name": "Improper Filtering of Special Elements",
    "description": "The product receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component.",
    "tag": "CWE-790",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3924,
  "fields": {
    "name": "Incomplete Filtering of Special Elements",
    "description": "The product receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component.",
    "tag": "CWE-791",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3925,
  "fields": {
    "name": "Incomplete Filtering of One or More Instances of Special Elements",
    "description": "The product receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component.",
    "tag": "CWE-792",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3926,
  "fields": {
    "name": "Only Filtering One Instance of a Special Element",
    "description": "The product receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component.",
    "tag": "CWE-793",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3927,
  "fields": {
    "name": "Incomplete Filtering of Multiple Instances of Special Elements",
    "description": "The product receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component.",
    "tag": "CWE-794",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3928,
  "fields": {
    "name": "Only Filtering Special Elements at a Specified Location",
    "description": "The product receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component.",
    "tag": "CWE-795",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3929,
  "fields": {
    "name": "Only Filtering Special Elements Relative to a Marker",
    "description": "The product receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. \"at the beginning/end of a string; the second argument\"), thereby missing remaining special elements that may exist before sending it to a downstream component.",
    "tag": "CWE-796",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3930,
  "fields": {
    "name": "Only Filtering Special Elements at an Absolute Position",
    "description": "The product receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. \"byte number 10\"), thereby missing remaining special elements that may exist before sending it to a downstream component.",
    "tag": "CWE-797",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3931,
  "fields": {
    "name": "Use of Hard-coded Credentials",
    "description": "The product contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data.",
    "tag": "CWE-798",
    "cvss": null,
    "risk_rating": "",
    "impact": "If hard-coded passwords are used, it is almost certain that malicious users will gain access to the account in question.\nThis weakness can lead to the exposure of resources or functionality to unintended actors, possibly providing attackers with sensitive information or even execute arbitrary code.",
    "remediation": "For inbound authentication: Rather than hard-code a default username and password, key, or other authentication credentials for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password or key.\nIf the product must contain hard-coded credentials or they cannot be removed, perform access control checks and limit which entities can access the feature that requires the hard-coded credentials. For example, a feature might only be enabled through the system console instead of through a network connection.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3932,
  "fields": {
    "name": "Improper Control of Interaction Frequency",
    "description": "The product does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests.",
    "tag": "CWE-799",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3933,
  "fields": {
    "name": "J2EE Misconfiguration: Entity Bean Declared Remote",
    "description": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities.",
    "tag": "CWE-8",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Declare Java beans \"local\" when possible. When a bean must be remotely accessible, make sure that sensitive information is not exposed, and ensure that the application logic performs appropriate validation of any data that might be modified by an attacker.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3934,
  "fields": {
    "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as \"<\", \">\", and \"&\" that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages.",
    "tag": "CWE-80",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3935,
  "fields": {
    "name": "Guessable CAPTCHA",
    "description": "The product uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor.",
    "tag": "CWE-804",
    "cvss": null,
    "risk_rating": "",
    "impact": "When authorization, authentication, or another protection mechanism relies on CAPTCHA entities to ensure that only human actors can access certain functionality, then an automated attacker such as a bot may access the restricted functionality by guessing the CAPTCHA.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3936,
  "fields": {
    "name": "Buffer Access with Incorrect Length Value",
    "description": "The product uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer.",
    "tag": "CWE-805",
    "cvss": null,
    "risk_rating": "",
    "impact": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. This can often be used to subvert any other security service.\nBuffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.",
    "remediation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the product or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3937,
  "fields": {
    "name": "Buffer Access Using Size of Source Buffer",
    "description": "The product uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer.",
    "tag": "CWE-806",
    "cvss": null,
    "risk_rating": "",
    "impact": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop.\nBuffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy.\nWhen the consequence is arbitrary code execution, this can often be used to subvert any other security service.",
    "remediation": "Use an abstraction library to abstract away risky APIs. Examples include the Safe C String Library (SafeStr) by Viega, and the Strsafe.h library from Microsoft. This is not a complete solution, since many buffer overflows are not related to strings.\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. This is not necessarily a complete solution, since these canary-based mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application.\nProgrammers should adhere to the following rules when allocating and managing their applications memory: Double check that your buffer is as large as you specify. When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string. Check buffer boundaries if calling this function in a loop and make sure there is no danger of writing past the allocated space. Truncate all input strings to a reasonable length before passing them to the copy and concatenation functions\n\n                  \nUse a CPU and operating system that offers Data Execution Protection (NX) or its equivalent [REF-60] [REF-61].\nMost mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3938,
  "fields": {
    "name": "Reliance on Untrusted Inputs in a Security Decision",
    "description": "The product uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",
    "tag": "CWE-807",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can bypass the security decision to access whatever is being protected. The consequences will depend on the associated functionality, but they can range from granting additional privileges to untrusted users to bypassing important security checks. Ultimately, this weakness may lead to exposure or modification of sensitive data, system crash, or execution of arbitrary code.",
    "remediation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3939,
  "fields": {
    "name": "Improper Neutralization of Script in an Error Message Web Page",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page.",
    "tag": "CWE-81",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Do not write user-controlled input to error pages.\nCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3940,
  "fields": {
    "name": "Improper Neutralization of Script in Attributes of IMG Tags in a Web Page",
    "description": "The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute.",
    "tag": "CWE-82",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3941,
  "fields": {
    "name": "Missing Synchronization",
    "description": "The product utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource.",
    "tag": "CWE-820",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3942,
  "fields": {
    "name": "Incorrect Synchronization",
    "description": "The product utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource.",
    "tag": "CWE-821",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3943,
  "fields": {
    "name": "Untrusted Pointer Dereference",
    "description": "The product obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer.",
    "tag": "CWE-822",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.\nIf the untrusted pointer references a memory location that is not accessible to the product, or points to a location that is \"malformed\" or larger than expected by a read or write operation, the application may terminate unexpectedly.\nIf the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3944,
  "fields": {
    "name": "Use of Out-of-range Pointer Offset",
    "description": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.",
    "tag": "CWE-823",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.\nIf the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" or larger than expected by a read or write operation, the application may terminate unexpectedly.\nIf the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3945,
  "fields": {
    "name": "Access of Uninitialized Pointer",
    "description": "The product accesses or uses a pointer that has not been initialized.",
    "tag": "CWE-824",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory.\nIf the uninitialized pointer references a memory location that is not accessible to the product, or points to a location that is \"malformed\" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.\nIf the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3946,
  "fields": {
    "name": "Expired Pointer Dereference",
    "description": "The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.",
    "tag": "CWE-825",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application.\nIf the expired pointer references a memory location that is not accessible to the product, or points to a location that is \"malformed\" (such as NULL) or larger than expected by a read or write operation, then a crash may occur.\nIf the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible.",
    "remediation": "Choose a language that provides automatic memory management.\nWhen freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3947,
  "fields": {
    "name": "Premature Release of Resource During Expected Lifetime",
    "description": "The product releases a resource that is still intended to be used by itself or another actor.",
    "tag": "CWE-826",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity.\nWhen the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash.\nWhen the resource is released, the software might modify some of its structure. This might affect logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3948,
  "fields": {
    "name": "Improper Control of Document Type Definition",
    "description": "The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.",
    "tag": "CWE-827",
    "cvss": null,
    "risk_rating": "",
    "impact": "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system.\nThe DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776).\nThe DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3949,
  "fields": {
    "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
    "description": "The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.",
    "tag": "CWE-828",
    "cvss": null,
    "risk_rating": "",
    "impact": "The most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.",
    "remediation": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3950,
  "fields": {
    "name": "Inclusion of Functionality from Untrusted Control Sphere",
    "description": "The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
    "tag": "CWE-829",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site.",
    "remediation": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n                  \nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\n                  \n\n                  \n\n                  \nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3951,
  "fields": {
    "name": "Improper Neutralization of Script in Attributes in a Web Page",
    "description": "The product does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.",
    "tag": "CWE-83",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3952,
  "fields": {
    "name": "Inclusion of Web Functionality from an Untrusted Source",
    "description": "The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.",
    "tag": "CWE-830",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3953,
  "fields": {
    "name": "Signal Handler Function Associated with Multiple Signals",
    "description": "The product defines a function that is used as a handler for more than one signal.",
    "tag": "CWE-831",
    "cvss": null,
    "risk_rating": "",
    "impact": "The most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3954,
  "fields": {
    "name": "Unlock of a Resource that is not Locked",
    "description": "The product attempts to unlock a resource that is not locked.",
    "tag": "CWE-832",
    "cvss": null,
    "risk_rating": "",
    "impact": "Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3955,
  "fields": {
    "name": "Deadlock",
    "description": "The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",
    "tag": "CWE-833",
    "cvss": null,
    "risk_rating": "",
    "impact": "Each thread of execution will \"hang\" and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3956,
  "fields": {
    "name": "Excessive Iteration",
    "description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.",
    "tag": "CWE-834",
    "cvss": null,
    "risk_rating": "",
    "impact": "Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The product's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3957,
  "fields": {
    "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
    "description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.",
    "tag": "CWE-835",
    "cvss": null,
    "risk_rating": "",
    "impact": "An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3958,
  "fields": {
    "name": "Use of Password Hash Instead of Password for Authentication",
    "description": "The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.",
    "tag": "CWE-836",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could bypass the authentication routine without knowing the original password.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3959,
  "fields": {
    "name": "Improper Enforcement of a Single, Unique Action",
    "description": "The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.",
    "tag": "CWE-837",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the product.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3960,
  "fields": {
    "name": "Inappropriate Encoding for Output Context",
    "description": "The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.",
    "tag": "CWE-838",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.",
    "remediation": "Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component.\nWhere possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3961,
  "fields": {
    "name": "Numeric Range Comparison Without Minimum Check",
    "description": "The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.",
    "tag": "CWE-839",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands.\nin some contexts, a negative value could lead to resource consumption.\nIf a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer.",
    "remediation": "If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t.\nIf the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3962,
  "fields": {
    "name": "Improper Neutralization of Encoded URI Schemes in a Web Page",
    "description": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.",
    "tag": "CWE-84",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Resolve all URIs to absolute or canonical representations before processing.\nCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3963,
  "fields": {
    "name": "Improper Enforcement of Behavioral Workflow",
    "description": "The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.",
    "tag": "CWE-841",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could cause the product to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3964,
  "fields": {
    "name": "Placement of User into Incorrect Group",
    "description": "The product or the administrator places a user into an incorrect group.",
    "tag": "CWE-842",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3965,
  "fields": {
    "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
    "description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.",
    "tag": "CWE-843",
    "cvss": null,
    "risk_rating": "",
    "impact": "When a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3966,
  "fields": {
    "name": "Doubled Character XSS Manipulations",
    "description": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.",
    "tag": "CWE-85",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Resolve all filtered input to absolute or canonical representations before processing.\nCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3967,
  "fields": {
    "name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
    "description": "The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.",
    "tag": "CWE-86",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3968,
  "fields": {
    "name": "Missing Authorization",
    "description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.",
    "tag": "CWE-862",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data.\nAn attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data.\nAn attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.",
    "remediation": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\n                  \n\n                  \nUse the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3969,
  "fields": {
    "name": "Incorrect Authorization",
    "description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.",
    "tag": "CWE-863",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data.\nAn attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data.\nAn attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality.",
    "remediation": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7].\n\n                  \n\n                  \nUse the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3970,
  "fields": {
    "name": "Improper Neutralization of Alternate XSS Syntax",
    "description": "The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.",
    "tag": "CWE-87",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Resolve all input to absolute or canonical representations before processing.\nCarefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.\n\n                  \nWith Struts, write all data from form beans with the bean's filter attribute set to true.\nTo help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3971,
  "fields": {
    "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
    "description": "The product constructs a string for a command to executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.",
    "tag": "CWE-88",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior.",
    "remediation": "Where possible, avoid building a single string that contains the command and its arguments.  Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command.  For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments.  In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.\nUnderstand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces.\n\n                  \nDirectly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained.\n\n                  \nWhen exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so.\nWhen your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined.\nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3972,
  "fields": {
    "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
    "description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.",
    "tag": "CWE-89",
    "cvss": null,
    "risk_rating": "",
    "impact": "Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities.\nIf poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password.\nIf authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability.\nJust as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with a SQL injection attack.",
    "remediation": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n                  \n\n                  \nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n                  \nUse an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3973,
  "fields": {
    "name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods",
    "description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.",
    "tag": "CWE-9",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3974,
  "fields": {
    "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
    "description": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.",
    "tag": "CWE-90",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3975,
  "fields": {
    "name": "Use of Uninitialized Resource",
    "description": "The product uses or accesses a resource that has not been initialized.",
    "tag": "CWE-908",
    "cvss": null,
    "risk_rating": "",
    "impact": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.\nThe uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.",
    "remediation": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps.\nPay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nAvoid race conditions (CWE-362) during initialization routines.\nRun or compile the product with settings that generate warnings about uninitialized variables or data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3976,
  "fields": {
    "name": "Missing Initialization of Resource",
    "description": "The product does not initialize a critical resource.",
    "tag": "CWE-909",
    "cvss": null,
    "risk_rating": "",
    "impact": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party.\nThe uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend.",
    "remediation": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps.\nPay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization.\nAvoid race conditions (CWE-362) during initialization routines.\nRun or compile your product with settings that generate warnings about uninitialized variables or data.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3977,
  "fields": {
    "name": "XML Injection (aka Blind XPath Injection)",
    "description": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.",
    "tag": "CWE-91",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3978,
  "fields": {
    "name": "Use of Expired File Descriptor",
    "description": "The product uses or accesses a file descriptor after it has been closed.",
    "tag": "CWE-910",
    "cvss": null,
    "risk_rating": "",
    "impact": "The program could read data from the wrong file.\nAccessing a file descriptor that has been closed can cause a crash.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3979,
  "fields": {
    "name": "Improper Update of Reference Count",
    "description": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.",
    "tag": "CWE-911",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3980,
  "fields": {
    "name": "Hidden Functionality",
    "description": "The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.",
    "tag": "CWE-912",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Always verify the integrity of the product that is being installed.\nConduct a code coverage analysis using live testing, then closely inspect any code that is not covered.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3981,
  "fields": {
    "name": "Improper Control of Dynamically-Managed Code Resources",
    "description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.",
    "tag": "CWE-913",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "For any externally-influenced input, check the input against an allowlist of acceptable values.\nRefactor the code so that it does not need to be dynamically managed.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3982,
  "fields": {
    "name": "Improper Control of Dynamically-Identified Variables",
    "description": "The product does not properly restrict reading from or writing to dynamically-identified variables.",
    "tag": "CWE-914",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could modify sensitive data or program variables.",
    "remediation": "For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified.\nRefactor the code so that internal program variables do not need to be dynamically identified.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3983,
  "fields": {
    "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
    "description": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.",
    "tag": "CWE-915",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could modify sensitive data or program variables.",
    "remediation": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified.\nFor any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified.\nRefactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3984,
  "fields": {
    "name": "Use of Password Hash With Insufficient Computational Effort",
    "description": "The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.",
    "tag": "CWE-916",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes.",
    "remediation": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3985,
  "fields": {
    "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
    "description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.",
    "tag": "CWE-917",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid adding user-controlled data into an expression interpreter when possible.\n\n                  \nThe framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to \"true\".",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3986,
  "fields": {
    "name": "Server-Side Request Forgery (SSRF)",
    "description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.",
    "tag": "CWE-918",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3987,
  "fields": {
    "name": "DEPRECATED: Improper Sanitization of Custom Special Characters",
    "description": "This entry has been deprecated. It originally came from PLOVER, which sometimes defined \"other\" and \"miscellaneous\" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.",
    "tag": "CWE-92",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3988,
  "fields": {
    "name": "Improper Restriction of Power Consumption",
    "description": "The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.",
    "tag": "CWE-920",
    "cvss": null,
    "risk_rating": "",
    "impact": "The power source could be drained, causing the application - and the entire device - to cease functioning.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3989,
  "fields": {
    "name": "Storage of Sensitive Data in a Mechanism without Access Control",
    "description": "The product stores sensitive information in a file system or device that does not have built-in access control.",
    "tag": "CWE-921",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can read sensitive information by accessing the unrestricted storage mechanism.\nAttackers can modify or delete sensitive information by accessing the unrestricted storage mechanism.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3990,
  "fields": {
    "name": "Insecure Storage of Sensitive Information",
    "description": "The product stores sensitive information without properly limiting read or write access by unauthorized actors.",
    "tag": "CWE-922",
    "cvss": null,
    "risk_rating": "",
    "impact": "Attackers can read sensitive information by accessing the unrestricted storage mechanism.\nAttackers can overwrite sensitive information by accessing the unrestricted storage mechanism.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3991,
  "fields": {
    "name": "Improper Restriction of Communication Channel to Intended Endpoints",
    "description": "The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.",
    "tag": "CWE-923",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3992,
  "fields": {
    "name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel",
    "description": "The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.",
    "tag": "CWE-924",
    "cvss": null,
    "risk_rating": "",
    "impact": "If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint.",
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3993,
  "fields": {
    "name": "Improper Verification of Intent by Broadcast Receiver",
    "description": "The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.",
    "tag": "CWE-925",
    "cvss": null,
    "risk_rating": "",
    "impact": "Another application can impersonate the operating system and cause the software to perform an unintended action.",
    "remediation": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3994,
  "fields": {
    "name": "Improper Export of Android Application Components",
    "description": "The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.",
    "tag": "CWE-926",
    "cvss": null,
    "risk_rating": "",
    "impact": "Other applications, possibly untrusted, can launch the Activity.\nOther applications, possibly untrusted, can bind to the Service.\nOther applications, possibly untrusted, can read or modify the data that is offered by the Content Provider.",
    "remediation": "If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest.\nIf you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you.\nLimit Content Provider permissions (read/write) as appropriate.\nLimit Content Provider permissions (read/write) as appropriate.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3995,
  "fields": {
    "name": "Use of Implicit Intent for Sensitive Communication",
    "description": "The Android application uses an implicit intent for transmitting sensitive data to other applications.",
    "tag": "CWE-927",
    "cvss": null,
    "risk_rating": "",
    "impact": "Other applications, possibly untrusted, can read the data that is offered through the Intent.\nThe application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions.",
    "remediation": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3996,
  "fields": {
    "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
    "description": "The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.",
    "tag": "CWE-93",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "Avoid using CRLF as a special sequence.\nAppropriately filter or quote CRLF sequences in user-controlled input.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3997,
  "fields": {
    "name": "Improper Authorization in Handler for Custom URL Scheme",
    "description": "The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.",
    "tag": "CWE-939",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3998,
  "fields": {
    "name": "Improper Control of Generation of Code ('Code Injection')",
    "description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.",
    "tag": "CWE-94",
    "cvss": null,
    "risk_rating": "",
    "impact": "In some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjected code can access resources that the attacker is directly prevented from accessing.\nCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.\nOften the actions performed by injected control code are unlogged.",
    "remediation": "Refactor your program so that you do not have to dynamically generate code.\n\n                  \n\n                  \nUse automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible.\nUse dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).\nRun the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184).",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 3999,
  "fields": {
    "name": "Improper Verification of Source of a Communication Channel",
    "description": "The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.",
    "tag": "CWE-940",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker can access any functionality that is inadvertently accessible to the source.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4000,
  "fields": {
    "name": "Incorrectly Specified Destination in a Communication Channel",
    "description": "The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.",
    "tag": "CWE-941",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4001,
  "fields": {
    "name": "Permissive Cross-domain Policy with Untrusted Domains",
    "description": "The product uses a cross-domain policy file that includes domains that should not be trusted.",
    "tag": "CWE-942",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content.",
    "remediation": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server.\nFor Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.\nFor Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4002,
  "fields": {
    "name": "Improper Neutralization of Special Elements in Data Query Logic",
    "description": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.",
    "tag": "CWE-943",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4003,
  "fields": {
    "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").",
    "tag": "CWE-95",
    "cvss": null,
    "risk_rating": "",
    "impact": "The injected code could access restricted data / files.\nIn some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjected code can access resources that the attacker is directly prevented from accessing.\nCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.\nOften the actions performed by injected control code are unlogged.",
    "remediation": "If possible, refactor your code so that it does not need to use eval() at all.",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4004,
  "fields": {
    "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
    "description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.",
    "tag": "CWE-96",
    "cvss": null,
    "risk_rating": "",
    "impact": "The injected code could access restricted data / files.\nIn some cases, injectable code controls authentication; this may lead to a remote vulnerability.\nInjected code can access resources that the attacker is directly prevented from accessing.\nCode injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code.\nOften the actions performed by injected control code are unlogged.",
    "remediation": "Perform proper output validation and escaping to neutralize all code syntax from data written to code files.",
    "custom_fields": {}
  }
},
{
  "model": "components.vulnerability",
  "pk": 4005,
  "fields": {
    "name": "Improper Neutralization of Server-Side Includes (SSI) Within a Web Page",
    "description": "The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.",
    "tag": "CWE-97",
    "cvss": null,
    "risk_rating": "",
    "impact": null,
    "remediation": null,
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4007,
  "fields": {
    "name": "Improper Control of Resource Identifiers ('Resource Injection')",
    "description": "The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.",
    "tag": "CWE-99",
    "cvss": null,
    "risk_rating": "",
    "impact": "An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information.",
    "remediation": "",
    "custom_fields": null
  }
},
{
  "model": "components.vulnerability",
  "pk": 4019,
  "fields": {
    "name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
    "description": "The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",
    "tag": "CWE-1073",
    "cvss": null,
    "risk_rating": "",
    "impact": "",
    "remediation": "",
    "custom_fields": {}
  }
},
{
  "model": "components.vulnerability",
  "pk": 4020,
  "fields": {
    "name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
    "description": "The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.",
    "tag": "CWE-1073",
    "cvss": null,
    "risk_rating": "",
    "impact": "",
    "remediation": "",
    "custom_fields": {}
  }
}
]
